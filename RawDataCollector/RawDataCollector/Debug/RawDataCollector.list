
RawDataCollector.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000624c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800641c  0800641c  0001641c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006524  08006524  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006524  08006524  00016524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800652c  0800652c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800652c  0800652c  0001652c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006530  08006530  00016530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006534  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  20000070  080065a4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  080065a4  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fc51  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002161  00000000  00000000  0002fcf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad8  00000000  00000000  00031e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a28  00000000  00000000  00032930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022277  00000000  00000000  00033358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000efce  00000000  00000000  000555cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbd95  00000000  00000000  0006459d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00130332  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003280  00000000  00000000  00130388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006404 	.word	0x08006404

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08006404 	.word	0x08006404

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_d2uiz>:
 8000aac:	004a      	lsls	r2, r1, #1
 8000aae:	d211      	bcs.n	8000ad4 <__aeabi_d2uiz+0x28>
 8000ab0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab4:	d211      	bcs.n	8000ada <__aeabi_d2uiz+0x2e>
 8000ab6:	d50d      	bpl.n	8000ad4 <__aeabi_d2uiz+0x28>
 8000ab8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac0:	d40e      	bmi.n	8000ae0 <__aeabi_d2uiz+0x34>
 8000ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	4770      	bx	lr
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ade:	d102      	bne.n	8000ae6 <__aeabi_d2uiz+0x3a>
 8000ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ae4:	4770      	bx	lr
 8000ae6:	f04f 0000 	mov.w	r0, #0
 8000aea:	4770      	bx	lr

08000aec <__aeabi_d2f>:
 8000aec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af4:	bf24      	itt	cs
 8000af6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000afe:	d90d      	bls.n	8000b1c <__aeabi_d2f+0x30>
 8000b00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b14:	bf08      	it	eq
 8000b16:	f020 0001 	biceq.w	r0, r0, #1
 8000b1a:	4770      	bx	lr
 8000b1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b20:	d121      	bne.n	8000b66 <__aeabi_d2f+0x7a>
 8000b22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b26:	bfbc      	itt	lt
 8000b28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b2c:	4770      	bxlt	lr
 8000b2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b36:	f1c2 0218 	rsb	r2, r2, #24
 8000b3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b42:	fa20 f002 	lsr.w	r0, r0, r2
 8000b46:	bf18      	it	ne
 8000b48:	f040 0001 	orrne.w	r0, r0, #1
 8000b4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b58:	ea40 000c 	orr.w	r0, r0, ip
 8000b5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b64:	e7cc      	b.n	8000b00 <__aeabi_d2f+0x14>
 8000b66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6a:	d107      	bne.n	8000b7c <__aeabi_d2f+0x90>
 8000b6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b70:	bf1e      	ittt	ne
 8000b72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7a:	4770      	bxne	lr
 8000b7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_ldivmod>:
 8000b8c:	b97b      	cbnz	r3, 8000bae <__aeabi_ldivmod+0x22>
 8000b8e:	b972      	cbnz	r2, 8000bae <__aeabi_ldivmod+0x22>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bfbe      	ittt	lt
 8000b94:	2000      	movlt	r0, #0
 8000b96:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b9a:	e006      	blt.n	8000baa <__aeabi_ldivmod+0x1e>
 8000b9c:	bf08      	it	eq
 8000b9e:	2800      	cmpeq	r0, #0
 8000ba0:	bf1c      	itt	ne
 8000ba2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ba6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000baa:	f000 b9b9 	b.w	8000f20 <__aeabi_idiv0>
 8000bae:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb6:	2900      	cmp	r1, #0
 8000bb8:	db09      	blt.n	8000bce <__aeabi_ldivmod+0x42>
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	db1a      	blt.n	8000bf4 <__aeabi_ldivmod+0x68>
 8000bbe:	f000 f84d 	bl	8000c5c <__udivmoddi4>
 8000bc2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bca:	b004      	add	sp, #16
 8000bcc:	4770      	bx	lr
 8000bce:	4240      	negs	r0, r0
 8000bd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	db1b      	blt.n	8000c10 <__aeabi_ldivmod+0x84>
 8000bd8:	f000 f840 	bl	8000c5c <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4240      	negs	r0, r0
 8000be8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bec:	4252      	negs	r2, r2
 8000bee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bf2:	4770      	bx	lr
 8000bf4:	4252      	negs	r2, r2
 8000bf6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bfa:	f000 f82f 	bl	8000c5c <__udivmoddi4>
 8000bfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c06:	b004      	add	sp, #16
 8000c08:	4240      	negs	r0, r0
 8000c0a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c0e:	4770      	bx	lr
 8000c10:	4252      	negs	r2, r2
 8000c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c16:	f000 f821 	bl	8000c5c <__udivmoddi4>
 8000c1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c22:	b004      	add	sp, #16
 8000c24:	4252      	negs	r2, r2
 8000c26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c2a:	4770      	bx	lr

08000c2c <__aeabi_uldivmod>:
 8000c2c:	b953      	cbnz	r3, 8000c44 <__aeabi_uldivmod+0x18>
 8000c2e:	b94a      	cbnz	r2, 8000c44 <__aeabi_uldivmod+0x18>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bf08      	it	eq
 8000c34:	2800      	cmpeq	r0, #0
 8000c36:	bf1c      	itt	ne
 8000c38:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c3c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c40:	f000 b96e 	b.w	8000f20 <__aeabi_idiv0>
 8000c44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c4c:	f000 f806 	bl	8000c5c <__udivmoddi4>
 8000c50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c58:	b004      	add	sp, #16
 8000c5a:	4770      	bx	lr

08000c5c <__udivmoddi4>:
 8000c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c60:	9d08      	ldr	r5, [sp, #32]
 8000c62:	4604      	mov	r4, r0
 8000c64:	468c      	mov	ip, r1
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	f040 8083 	bne.w	8000d72 <__udivmoddi4+0x116>
 8000c6c:	428a      	cmp	r2, r1
 8000c6e:	4617      	mov	r7, r2
 8000c70:	d947      	bls.n	8000d02 <__udivmoddi4+0xa6>
 8000c72:	fab2 f282 	clz	r2, r2
 8000c76:	b142      	cbz	r2, 8000c8a <__udivmoddi4+0x2e>
 8000c78:	f1c2 0020 	rsb	r0, r2, #32
 8000c7c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c80:	4091      	lsls	r1, r2
 8000c82:	4097      	lsls	r7, r2
 8000c84:	ea40 0c01 	orr.w	ip, r0, r1
 8000c88:	4094      	lsls	r4, r2
 8000c8a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c8e:	0c23      	lsrs	r3, r4, #16
 8000c90:	fbbc f6f8 	udiv	r6, ip, r8
 8000c94:	fa1f fe87 	uxth.w	lr, r7
 8000c98:	fb08 c116 	mls	r1, r8, r6, ip
 8000c9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ca4:	4299      	cmp	r1, r3
 8000ca6:	d909      	bls.n	8000cbc <__udivmoddi4+0x60>
 8000ca8:	18fb      	adds	r3, r7, r3
 8000caa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cae:	f080 8119 	bcs.w	8000ee4 <__udivmoddi4+0x288>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 8116 	bls.w	8000ee4 <__udivmoddi4+0x288>
 8000cb8:	3e02      	subs	r6, #2
 8000cba:	443b      	add	r3, r7
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ccc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cd0:	45a6      	cmp	lr, r4
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x8c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cda:	f080 8105 	bcs.w	8000ee8 <__udivmoddi4+0x28c>
 8000cde:	45a6      	cmp	lr, r4
 8000ce0:	f240 8102 	bls.w	8000ee8 <__udivmoddi4+0x28c>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	443c      	add	r4, r7
 8000ce8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cec:	eba4 040e 	sub.w	r4, r4, lr
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	b11d      	cbz	r5, 8000cfc <__udivmoddi4+0xa0>
 8000cf4:	40d4      	lsrs	r4, r2
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	b902      	cbnz	r2, 8000d06 <__udivmoddi4+0xaa>
 8000d04:	deff      	udf	#255	; 0xff
 8000d06:	fab2 f282 	clz	r2, r2
 8000d0a:	2a00      	cmp	r2, #0
 8000d0c:	d150      	bne.n	8000db0 <__udivmoddi4+0x154>
 8000d0e:	1bcb      	subs	r3, r1, r7
 8000d10:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d14:	fa1f f887 	uxth.w	r8, r7
 8000d18:	2601      	movs	r6, #1
 8000d1a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d1e:	0c21      	lsrs	r1, r4, #16
 8000d20:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d28:	fb08 f30c 	mul.w	r3, r8, ip
 8000d2c:	428b      	cmp	r3, r1
 8000d2e:	d907      	bls.n	8000d40 <__udivmoddi4+0xe4>
 8000d30:	1879      	adds	r1, r7, r1
 8000d32:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0xe2>
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	f200 80e9 	bhi.w	8000f10 <__udivmoddi4+0x2b4>
 8000d3e:	4684      	mov	ip, r0
 8000d40:	1ac9      	subs	r1, r1, r3
 8000d42:	b2a3      	uxth	r3, r4
 8000d44:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d48:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d4c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d50:	fb08 f800 	mul.w	r8, r8, r0
 8000d54:	45a0      	cmp	r8, r4
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x10c>
 8000d58:	193c      	adds	r4, r7, r4
 8000d5a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d5e:	d202      	bcs.n	8000d66 <__udivmoddi4+0x10a>
 8000d60:	45a0      	cmp	r8, r4
 8000d62:	f200 80d9 	bhi.w	8000f18 <__udivmoddi4+0x2bc>
 8000d66:	4618      	mov	r0, r3
 8000d68:	eba4 0408 	sub.w	r4, r4, r8
 8000d6c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d70:	e7bf      	b.n	8000cf2 <__udivmoddi4+0x96>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0x12e>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80b1 	beq.w	8000ede <__udivmoddi4+0x282>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x1cc>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0x140>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80b8 	bhi.w	8000f0c <__udivmoddi4+0x2b0>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0103 	sbc.w	r1, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	468c      	mov	ip, r1
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0a8      	beq.n	8000cfc <__udivmoddi4+0xa0>
 8000daa:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dae:	e7a5      	b.n	8000cfc <__udivmoddi4+0xa0>
 8000db0:	f1c2 0320 	rsb	r3, r2, #32
 8000db4:	fa20 f603 	lsr.w	r6, r0, r3
 8000db8:	4097      	lsls	r7, r2
 8000dba:	fa01 f002 	lsl.w	r0, r1, r2
 8000dbe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dc2:	40d9      	lsrs	r1, r3
 8000dc4:	4330      	orrs	r0, r6
 8000dc6:	0c03      	lsrs	r3, r0, #16
 8000dc8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dcc:	fa1f f887 	uxth.w	r8, r7
 8000dd0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd8:	fb06 f108 	mul.w	r1, r6, r8
 8000ddc:	4299      	cmp	r1, r3
 8000dde:	fa04 f402 	lsl.w	r4, r4, r2
 8000de2:	d909      	bls.n	8000df8 <__udivmoddi4+0x19c>
 8000de4:	18fb      	adds	r3, r7, r3
 8000de6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000dea:	f080 808d 	bcs.w	8000f08 <__udivmoddi4+0x2ac>
 8000dee:	4299      	cmp	r1, r3
 8000df0:	f240 808a 	bls.w	8000f08 <__udivmoddi4+0x2ac>
 8000df4:	3e02      	subs	r6, #2
 8000df6:	443b      	add	r3, r7
 8000df8:	1a5b      	subs	r3, r3, r1
 8000dfa:	b281      	uxth	r1, r0
 8000dfc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e00:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e08:	fb00 f308 	mul.w	r3, r0, r8
 8000e0c:	428b      	cmp	r3, r1
 8000e0e:	d907      	bls.n	8000e20 <__udivmoddi4+0x1c4>
 8000e10:	1879      	adds	r1, r7, r1
 8000e12:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e16:	d273      	bcs.n	8000f00 <__udivmoddi4+0x2a4>
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d971      	bls.n	8000f00 <__udivmoddi4+0x2a4>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4439      	add	r1, r7
 8000e20:	1acb      	subs	r3, r1, r3
 8000e22:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e26:	e778      	b.n	8000d1a <__udivmoddi4+0xbe>
 8000e28:	f1c6 0c20 	rsb	ip, r6, #32
 8000e2c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e30:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e34:	431c      	orrs	r4, r3
 8000e36:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e42:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e46:	431f      	orrs	r7, r3
 8000e48:	0c3b      	lsrs	r3, r7, #16
 8000e4a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e4e:	fa1f f884 	uxth.w	r8, r4
 8000e52:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e56:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e5a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e5e:	458a      	cmp	sl, r1
 8000e60:	fa02 f206 	lsl.w	r2, r2, r6
 8000e64:	fa00 f306 	lsl.w	r3, r0, r6
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x220>
 8000e6a:	1861      	adds	r1, r4, r1
 8000e6c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e70:	d248      	bcs.n	8000f04 <__udivmoddi4+0x2a8>
 8000e72:	458a      	cmp	sl, r1
 8000e74:	d946      	bls.n	8000f04 <__udivmoddi4+0x2a8>
 8000e76:	f1a9 0902 	sub.w	r9, r9, #2
 8000e7a:	4421      	add	r1, r4
 8000e7c:	eba1 010a 	sub.w	r1, r1, sl
 8000e80:	b2bf      	uxth	r7, r7
 8000e82:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e86:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e8a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e8e:	fb00 f808 	mul.w	r8, r0, r8
 8000e92:	45b8      	cmp	r8, r7
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x24a>
 8000e96:	19e7      	adds	r7, r4, r7
 8000e98:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e9c:	d22e      	bcs.n	8000efc <__udivmoddi4+0x2a0>
 8000e9e:	45b8      	cmp	r8, r7
 8000ea0:	d92c      	bls.n	8000efc <__udivmoddi4+0x2a0>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	4427      	add	r7, r4
 8000ea6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eaa:	eba7 0708 	sub.w	r7, r7, r8
 8000eae:	fba0 8902 	umull	r8, r9, r0, r2
 8000eb2:	454f      	cmp	r7, r9
 8000eb4:	46c6      	mov	lr, r8
 8000eb6:	4649      	mov	r1, r9
 8000eb8:	d31a      	bcc.n	8000ef0 <__udivmoddi4+0x294>
 8000eba:	d017      	beq.n	8000eec <__udivmoddi4+0x290>
 8000ebc:	b15d      	cbz	r5, 8000ed6 <__udivmoddi4+0x27a>
 8000ebe:	ebb3 020e 	subs.w	r2, r3, lr
 8000ec2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ec6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eca:	40f2      	lsrs	r2, r6
 8000ecc:	ea4c 0202 	orr.w	r2, ip, r2
 8000ed0:	40f7      	lsrs	r7, r6
 8000ed2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ed6:	2600      	movs	r6, #0
 8000ed8:	4631      	mov	r1, r6
 8000eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ede:	462e      	mov	r6, r5
 8000ee0:	4628      	mov	r0, r5
 8000ee2:	e70b      	b.n	8000cfc <__udivmoddi4+0xa0>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	e6e9      	b.n	8000cbc <__udivmoddi4+0x60>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6fd      	b.n	8000ce8 <__udivmoddi4+0x8c>
 8000eec:	4543      	cmp	r3, r8
 8000eee:	d2e5      	bcs.n	8000ebc <__udivmoddi4+0x260>
 8000ef0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ef4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ef8:	3801      	subs	r0, #1
 8000efa:	e7df      	b.n	8000ebc <__udivmoddi4+0x260>
 8000efc:	4608      	mov	r0, r1
 8000efe:	e7d2      	b.n	8000ea6 <__udivmoddi4+0x24a>
 8000f00:	4660      	mov	r0, ip
 8000f02:	e78d      	b.n	8000e20 <__udivmoddi4+0x1c4>
 8000f04:	4681      	mov	r9, r0
 8000f06:	e7b9      	b.n	8000e7c <__udivmoddi4+0x220>
 8000f08:	4666      	mov	r6, ip
 8000f0a:	e775      	b.n	8000df8 <__udivmoddi4+0x19c>
 8000f0c:	4630      	mov	r0, r6
 8000f0e:	e74a      	b.n	8000da6 <__udivmoddi4+0x14a>
 8000f10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f14:	4439      	add	r1, r7
 8000f16:	e713      	b.n	8000d40 <__udivmoddi4+0xe4>
 8000f18:	3802      	subs	r0, #2
 8000f1a:	443c      	add	r4, r7
 8000f1c:	e724      	b.n	8000d68 <__udivmoddi4+0x10c>
 8000f1e:	bf00      	nop

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <BH1750_send_command>:
//
//	return HAL_OK;
//}

HAL_StatusTypeDef BH1750_send_command(BH1750_device_t* dev, uint8_t cmd)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af02      	add	r7, sp, #8
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	70fb      	strb	r3, [r7, #3]
	//TODO hal checks
	if(HAL_I2C_Master_Transmit(
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6858      	ldr	r0, [r3, #4]
			dev->i2c_handle,	//I2C Handle
			dev->address_w,		//I2C addr of dev
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	7a5b      	ldrb	r3, [r3, #9]
	if(HAL_I2C_Master_Transmit(
 8000f38:	b299      	uxth	r1, r3
 8000f3a:	1cfa      	adds	r2, r7, #3
 8000f3c:	230a      	movs	r3, #10
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	2301      	movs	r3, #1
 8000f42:	f002 fa0b 	bl	800335c <HAL_I2C_Master_Transmit>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <BH1750_send_command+0x2c>
			&cmd,				//CMD to be executed
			1,					//8bit addr
			10					//Wait time
		) != HAL_OK) return HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e000      	b.n	8000f52 <BH1750_send_command+0x2e>

	return HAL_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <BH1750_poll_self>:

void BH1750_poll_self(BH1750_device_t* self, DeviceData *deviceData)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	6039      	str	r1, [r7, #0]
	BH1750_get_lumen(self, deviceData);
 8000f64:	6839      	ldr	r1, [r7, #0]
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f000 f8ac 	bl	80010c4 <BH1750_get_lumen>
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <BH1750_init_dev_struct>:

BH1750_device_t* BH1750_init_dev_struct(I2C_HandleTypeDef* i2c_handle,
		char* name, bool addr_grounded)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	71fb      	strb	r3, [r7, #7]
	BH1750_device_t* init =
			(BH1750_device_t*)calloc(1, sizeof(BH1750_device_t));
 8000f82:	2114      	movs	r1, #20
 8000f84:	2001      	movs	r0, #1
 8000f86:	f004 fd59 	bl	8005a3c <calloc>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	617b      	str	r3, [r7, #20]

	if(init == NULL) return NULL;
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d101      	bne.n	8000f98 <BH1750_init_dev_struct+0x24>
 8000f94:	2300      	movs	r3, #0
 8000f96:	e02d      	b.n	8000ff4 <BH1750_init_dev_struct+0x80>

	if(addr_grounded){
 8000f98:	79fb      	ldrb	r3, [r7, #7]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d006      	beq.n	8000fac <BH1750_init_dev_struct+0x38>
		init->address_r = BH1750_GROUND_ADDR_READ;
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	2247      	movs	r2, #71	; 0x47
 8000fa2:	721a      	strb	r2, [r3, #8]
		init->address_w = BH1750_GROUND_ADDR_WRITE;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	2246      	movs	r2, #70	; 0x46
 8000fa8:	725a      	strb	r2, [r3, #9]
 8000faa:	e005      	b.n	8000fb8 <BH1750_init_dev_struct+0x44>
	}else{
		init->address_r = BH1750_NO_GROUND_ADDR_READ;
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	22ba      	movs	r2, #186	; 0xba
 8000fb0:	721a      	strb	r2, [r3, #8]
		init->address_w = BH1750_NO_GROUND_ADDR_WRITE;
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	22b9      	movs	r2, #185	; 0xb9
 8000fb6:	725a      	strb	r2, [r3, #9]
	}

	init->name = (char*)malloc(sizeof(char) * strlen(name));
 8000fb8:	68b8      	ldr	r0, [r7, #8]
 8000fba:	f7ff f929 	bl	8000210 <strlen>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f004 fd87 	bl	8005ad4 <malloc>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	461a      	mov	r2, r3
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	601a      	str	r2, [r3, #0]

	if(init->name == NULL) return NULL;
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d101      	bne.n	8000fda <BH1750_init_dev_struct+0x66>
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e00c      	b.n	8000ff4 <BH1750_init_dev_struct+0x80>

	init->i2c_handle = i2c_handle;
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	68fa      	ldr	r2, [r7, #12]
 8000fde:	605a      	str	r2, [r3, #4]

	strcpy(init->name, name);
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	68b9      	ldr	r1, [r7, #8]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f004 fe6e 	bl	8005cc8 <strcpy>

	init->poll = &BH1750_poll_self;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	4a03      	ldr	r2, [pc, #12]	; (8000ffc <BH1750_init_dev_struct+0x88>)
 8000ff0:	611a      	str	r2, [r3, #16]

	return init;
 8000ff2:	697b      	ldr	r3, [r7, #20]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	08000f5b 	.word	0x08000f5b

08001000 <BH1750_init_dev>:

HAL_StatusTypeDef BH1750_init_dev(BH1750_device_t* dev)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	BH1750_send_command(dev, CMD_POWER_ON);
 8001008:	2101      	movs	r1, #1
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ff8a 	bl	8000f24 <BH1750_send_command>
	BH1750_send_command(dev, CMD_RESET);
 8001010:	2103      	movs	r1, #3
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ff86 	bl	8000f24 <BH1750_send_command>
	BH1750_send_command(dev, CMD_H_RES_MODE);
 8001018:	2110      	movs	r1, #16
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ff82 	bl	8000f24 <BH1750_send_command>

	return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <BH1750_read_dev>:

HAL_StatusTypeDef BH1750_read_dev(BH1750_device_t* dev)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b084      	sub	sp, #16
 800102e:	af02      	add	r7, sp, #8
 8001030:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6858      	ldr	r0, [r3, #4]
			dev->address_r,
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	7a1b      	ldrb	r3, [r3, #8]
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 800103a:	b299      	uxth	r1, r3
			dev->buffer,
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f103 020c 	add.w	r2, r3, #12
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 8001042:	230a      	movs	r3, #10
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	2302      	movs	r3, #2
 8001048:	f002 fa86 	bl	8003558 <HAL_I2C_Master_Receive>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <BH1750_read_dev+0x2c>
			2,
			10
	) != HAL_OK) return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <BH1750_read_dev+0x2e>

	return HAL_OK;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <BH1750_convert>:

uint16_t BH1750_convert(BH1750_device_t* dev)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	dev->value = dev->buffer[0];
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	7b1b      	ldrb	r3, [r3, #12]
 800106c:	b29a      	uxth	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	815a      	strh	r2, [r3, #10]
	dev->value = (dev->value << 8) | dev->buffer[1];
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	895b      	ldrh	r3, [r3, #10]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	b21a      	sxth	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	7b5b      	ldrb	r3, [r3, #13]
 800107e:	b21b      	sxth	r3, r3
 8001080:	4313      	orrs	r3, r2
 8001082:	b21b      	sxth	r3, r3
 8001084:	b29a      	uxth	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	815a      	strh	r2, [r3, #10]

	return dev->value/=1.2;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	895b      	ldrh	r3, [r3, #10]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fa68 	bl	8000564 <__aeabi_i2d>
 8001094:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <BH1750_convert+0x60>)
 800109a:	f7ff fbf7 	bl	800088c <__aeabi_ddiv>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	4610      	mov	r0, r2
 80010a4:	4619      	mov	r1, r3
 80010a6:	f7ff fd01 	bl	8000aac <__aeabi_d2uiz>
 80010aa:	4603      	mov	r3, r0
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	815a      	strh	r2, [r3, #10]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	895b      	ldrh	r3, [r3, #10]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	3ff33333 	.word	0x3ff33333

080010c4 <BH1750_get_lumen>:

HAL_StatusTypeDef BH1750_get_lumen(BH1750_device_t* dev, DeviceData *deviceData)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
	BH1750_read_dev(dev);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff ffab 	bl	800102a <BH1750_read_dev>

	deviceData->BH1750_Lumens = BH1750_convert(dev);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ffc3 	bl	8001060 <BH1750_convert>
 80010da:	4603      	mov	r3, r0
 80010dc:	461a      	mov	r2, r3
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	819a      	strh	r2, [r3, #12]
	return HAL_OK;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2203      	movs	r2, #3
 80010f8:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2203      	movs	r2, #3
 8001104:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2203      	movs	r2, #3
 800110a:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2203      	movs	r2, #3
 8001110:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2203      	movs	r2, #3
 8001116:	715a      	strb	r2, [r3, #5]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af04      	add	r7, sp, #16
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	460b      	mov	r3, r1
 800112e:	607a      	str	r2, [r7, #4]
 8001130:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800113e:	7afb      	ldrb	r3, [r7, #11]
 8001140:	b29a      	uxth	r2, r3
 8001142:	8af9      	ldrh	r1, [r7, #22]
 8001144:	f241 3388 	movw	r3, #5000	; 0x1388
 8001148:	9302      	str	r3, [sp, #8]
 800114a:	2302      	movs	r3, #2
 800114c:	9301      	str	r3, [sp, #4]
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	2301      	movs	r3, #1
 8001156:	f002 fd1f 	bl	8003b98 <HAL_I2C_Mem_Read>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d10b      	bne.n	8001178 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001160:	7d7b      	ldrb	r3, [r7, #21]
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	b21a      	sxth	r2, r3
 8001166:	7d3b      	ldrb	r3, [r7, #20]
 8001168:	b21b      	sxth	r3, r3
 800116a:	4313      	orrs	r3, r2
 800116c:	b21b      	sxth	r3, r3
 800116e:	b29a      	uxth	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	801a      	strh	r2, [r3, #0]
		return true;
 8001174:	2301      	movs	r3, #1
 8001176:	e000      	b.n	800117a <read_register16+0x56>
	} else
		return false;
 8001178:	2300      	movs	r3, #0

}
 800117a:	4618      	mov	r0, r3
 800117c:	3718      	adds	r7, #24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8001182:	b590      	push	{r4, r7, lr}
 8001184:	b08b      	sub	sp, #44	; 0x2c
 8001186:	af04      	add	r7, sp, #16
 8001188:	60f8      	str	r0, [r7, #12]
 800118a:	607a      	str	r2, [r7, #4]
 800118c:	461a      	mov	r2, r3
 800118e:	460b      	mov	r3, r1
 8001190:	72fb      	strb	r3, [r7, #11]
 8001192:	4613      	mov	r3, r2
 8001194:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr<<1);
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80011a2:	7afb      	ldrb	r3, [r7, #11]
 80011a4:	b29a      	uxth	r2, r3
 80011a6:	7abb      	ldrb	r3, [r7, #10]
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	8af9      	ldrh	r1, [r7, #22]
 80011ac:	f241 3488 	movw	r4, #5000	; 0x1388
 80011b0:	9402      	str	r4, [sp, #8]
 80011b2:	9301      	str	r3, [sp, #4]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2301      	movs	r3, #1
 80011ba:	f002 fced 	bl	8003b98 <HAL_I2C_Mem_Read>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <read_data+0x46>
		return 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	e000      	b.n	80011ca <read_data+0x48>
	else
		return 1;
 80011c8:	2301      	movs	r3, #1

}
 80011ca:	4618      	mov	r0, r3
 80011cc:	371c      	adds	r7, #28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd90      	pop	{r4, r7, pc}

080011d2 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	461a      	mov	r2, r3
 80011de:	2188      	movs	r1, #136	; 0x88
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ff9f 	bl	8001124 <read_register16>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d06f      	beq.n	80012cc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3302      	adds	r3, #2
 80011f0:	461a      	mov	r2, r3
 80011f2:	218a      	movs	r1, #138	; 0x8a
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff95 	bl	8001124 <read_register16>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d065      	beq.n	80012cc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3304      	adds	r3, #4
 8001204:	461a      	mov	r2, r3
 8001206:	218c      	movs	r1, #140	; 0x8c
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff ff8b 	bl	8001124 <read_register16>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d05b      	beq.n	80012cc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3306      	adds	r3, #6
 8001218:	461a      	mov	r2, r3
 800121a:	218e      	movs	r1, #142	; 0x8e
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff81 	bl	8001124 <read_register16>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d051      	beq.n	80012cc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3308      	adds	r3, #8
 800122c:	461a      	mov	r2, r3
 800122e:	2190      	movs	r1, #144	; 0x90
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ff77 	bl	8001124 <read_register16>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d047      	beq.n	80012cc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	330a      	adds	r3, #10
 8001240:	461a      	mov	r2, r3
 8001242:	2192      	movs	r1, #146	; 0x92
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ff6d 	bl	8001124 <read_register16>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d03d      	beq.n	80012cc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	330c      	adds	r3, #12
 8001254:	461a      	mov	r2, r3
 8001256:	2194      	movs	r1, #148	; 0x94
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ff63 	bl	8001124 <read_register16>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d033      	beq.n	80012cc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	330e      	adds	r3, #14
 8001268:	461a      	mov	r2, r3
 800126a:	2196      	movs	r1, #150	; 0x96
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff ff59 	bl	8001124 <read_register16>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d029      	beq.n	80012cc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3310      	adds	r3, #16
 800127c:	461a      	mov	r2, r3
 800127e:	2198      	movs	r1, #152	; 0x98
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ff4f 	bl	8001124 <read_register16>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d01f      	beq.n	80012cc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3312      	adds	r3, #18
 8001290:	461a      	mov	r2, r3
 8001292:	219a      	movs	r1, #154	; 0x9a
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff45 	bl	8001124 <read_register16>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d015      	beq.n	80012cc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3314      	adds	r3, #20
 80012a4:	461a      	mov	r2, r3
 80012a6:	219c      	movs	r1, #156	; 0x9c
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff ff3b 	bl	8001124 <read_register16>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d00b      	beq.n	80012cc <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80012b8:	461a      	mov	r2, r3
 80012ba:	219e      	movs	r1, #158	; 0x9e
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff ff31 	bl	8001124 <read_register16>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <read_calibration_data+0xfa>

		return true;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e000      	b.n	80012ce <read_calibration_data+0xfc>
	}

	return false;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b084      	sub	sp, #16
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f103 0218 	add.w	r2, r3, #24
 80012e4:	2301      	movs	r3, #1
 80012e6:	21a1      	movs	r1, #161	; 0xa1
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff4a 	bl	8001182 <read_data>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d14b      	bne.n	800138c <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	331a      	adds	r3, #26
 80012f8:	461a      	mov	r2, r3
 80012fa:	21e1      	movs	r1, #225	; 0xe1
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f7ff ff11 	bl	8001124 <read_register16>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d041      	beq.n	800138c <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f103 021c 	add.w	r2, r3, #28
 800130e:	2301      	movs	r3, #1
 8001310:	21e3      	movs	r1, #227	; 0xe3
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff ff35 	bl	8001182 <read_data>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d136      	bne.n	800138c <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800131e:	f107 030e 	add.w	r3, r7, #14
 8001322:	461a      	mov	r2, r3
 8001324:	21e4      	movs	r1, #228	; 0xe4
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff fefc 	bl	8001124 <read_register16>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d02c      	beq.n	800138c <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001332:	f107 030c 	add.w	r3, r7, #12
 8001336:	461a      	mov	r2, r3
 8001338:	21e5      	movs	r1, #229	; 0xe5
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff fef2 	bl	8001124 <read_register16>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d022      	beq.n	800138c <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800134c:	2301      	movs	r3, #1
 800134e:	21e7      	movs	r1, #231	; 0xe7
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff16 	bl	8001182 <read_data>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d117      	bne.n	800138c <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800135c:	89fb      	ldrh	r3, [r7, #14]
 800135e:	011b      	lsls	r3, r3, #4
 8001360:	b21b      	sxth	r3, r3
 8001362:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 8001366:	b21a      	sxth	r2, r3
 8001368:	89fb      	ldrh	r3, [r7, #14]
 800136a:	121b      	asrs	r3, r3, #8
 800136c:	b21b      	sxth	r3, r3
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	b21b      	sxth	r3, r3
 8001374:	4313      	orrs	r3, r2
 8001376:	b21a      	sxth	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 800137c:	89bb      	ldrh	r3, [r7, #12]
 800137e:	091b      	lsrs	r3, r3, #4
 8001380:	b29b      	uxth	r3, r3
 8001382:	b21a      	sxth	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	841a      	strh	r2, [r3, #32]

		return true;
 8001388:	2301      	movs	r3, #1
 800138a:	e000      	b.n	800138e <read_hum_calibration_data+0xb8>
	}

	return false;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001396:	b580      	push	{r7, lr}
 8001398:	b088      	sub	sp, #32
 800139a:	af04      	add	r7, sp, #16
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	460b      	mov	r3, r1
 80013a0:	70fb      	strb	r3, [r7, #3]
 80013a2:	4613      	mov	r3, r2
 80013a4:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80013b2:	78fb      	ldrb	r3, [r7, #3]
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	89f9      	ldrh	r1, [r7, #14]
 80013b8:	f242 7310 	movw	r3, #10000	; 0x2710
 80013bc:	9302      	str	r3, [sp, #8]
 80013be:	2301      	movs	r3, #1
 80013c0:	9301      	str	r3, [sp, #4]
 80013c2:	1cbb      	adds	r3, r7, #2
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	2301      	movs	r3, #1
 80013c8:	f002 faec 	bl	80039a4 <HAL_I2C_Mem_Write>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <write_register8+0x40>
		return false;
 80013d2:	2300      	movs	r3, #0
 80013d4:	e000      	b.n	80013d8 <write_register8+0x42>
	else
		return true;
 80013d6:	2301      	movs	r3, #1
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80013ee:	2b76      	cmp	r3, #118	; 0x76
 80013f0:	d005      	beq.n	80013fe <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80013f6:	2b77      	cmp	r3, #119	; 0x77
 80013f8:	d001      	beq.n	80013fe <bmp280_init+0x1e>
		return false;
 80013fa:	2300      	movs	r3, #0
 80013fc:	e099      	b.n	8001532 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001404:	2301      	movs	r3, #1
 8001406:	21d0      	movs	r1, #208	; 0xd0
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff feba 	bl	8001182 <read_data>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <bmp280_init+0x38>
		return false;
 8001414:	2300      	movs	r3, #0
 8001416:	e08c      	b.n	8001532 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800141e:	2b58      	cmp	r3, #88	; 0x58
 8001420:	d006      	beq.n	8001430 <bmp280_init+0x50>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001428:	2b60      	cmp	r3, #96	; 0x60
 800142a:	d001      	beq.n	8001430 <bmp280_init+0x50>
		return false;
 800142c:	2300      	movs	r3, #0
 800142e:	e080      	b.n	8001532 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001430:	22b6      	movs	r2, #182	; 0xb6
 8001432:	21e0      	movs	r1, #224	; 0xe0
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ffae 	bl	8001396 <write_register8>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <bmp280_init+0x64>
		return false;
 8001440:	2300      	movs	r3, #0
 8001442:	e076      	b.n	8001532 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001444:	f107 020c 	add.w	r2, r7, #12
 8001448:	2301      	movs	r3, #1
 800144a:	21f3      	movs	r1, #243	; 0xf3
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff fe98 	bl	8001182 <read_data>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d1f5      	bne.n	8001444 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001458:	7b3b      	ldrb	r3, [r7, #12]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f0      	bne.n	8001444 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff feb5 	bl	80011d2 <read_calibration_data>
 8001468:	4603      	mov	r3, r0
 800146a:	f083 0301 	eor.w	r3, r3, #1
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d100      	bne.n	8001476 <bmp280_init+0x96>
 8001474:	e001      	b.n	800147a <bmp280_init+0x9a>
		return false;
 8001476:	2300      	movs	r3, #0
 8001478:	e05b      	b.n	8001532 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001480:	2b60      	cmp	r3, #96	; 0x60
 8001482:	d10a      	bne.n	800149a <bmp280_init+0xba>
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ff26 	bl	80012d6 <read_hum_calibration_data>
 800148a:	4603      	mov	r3, r0
 800148c:	f083 0301 	eor.w	r3, r3, #1
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <bmp280_init+0xba>
		return false;
 8001496:	2300      	movs	r3, #0
 8001498:	e04b      	b.n	8001532 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	795b      	ldrb	r3, [r3, #5]
 800149e:	015b      	lsls	r3, r3, #5
 80014a0:	b25a      	sxtb	r2, r3
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	785b      	ldrb	r3, [r3, #1]
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	b25b      	sxtb	r3, r3
 80014aa:	4313      	orrs	r3, r2
 80014ac:	b25b      	sxtb	r3, r3
 80014ae:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80014b0:	7bfb      	ldrb	r3, [r7, #15]
 80014b2:	461a      	mov	r2, r3
 80014b4:	21f5      	movs	r1, #245	; 0xf5
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff ff6d 	bl	8001396 <write_register8>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <bmp280_init+0xe6>
		return false;
 80014c2:	2300      	movs	r3, #0
 80014c4:	e035      	b.n	8001532 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d102      	bne.n	80014d4 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	78db      	ldrb	r3, [r3, #3]
 80014d8:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 80014da:	b25a      	sxtb	r2, r3
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	789b      	ldrb	r3, [r3, #2]
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	b25b      	sxtb	r3, r3
 80014e4:	4313      	orrs	r3, r2
 80014e6:	b25a      	sxtb	r2, r3
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	b25b      	sxtb	r3, r3
 80014ee:	4313      	orrs	r3, r2
 80014f0:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80014f2:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80014fa:	2b60      	cmp	r3, #96	; 0x60
 80014fc:	d10d      	bne.n	800151a <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	791b      	ldrb	r3, [r3, #4]
 8001502:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001504:	7b7b      	ldrb	r3, [r7, #13]
 8001506:	461a      	mov	r2, r3
 8001508:	21f2      	movs	r1, #242	; 0xf2
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff ff43 	bl	8001396 <write_register8>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <bmp280_init+0x13a>
			return false;
 8001516:	2300      	movs	r3, #0
 8001518:	e00b      	b.n	8001532 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 800151a:	7bbb      	ldrb	r3, [r7, #14]
 800151c:	461a      	mov	r2, r3
 800151e:	21f4      	movs	r1, #244	; 0xf4
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff ff38 	bl	8001396 <write_register8>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <bmp280_init+0x150>
		return false;
 800152c:	2300      	movs	r3, #0
 800152e:	e000      	b.n	8001532 <bmp280_init+0x152>
	}

	return true;
 8001530:	2301      	movs	r3, #1
}
 8001532:	4618      	mov	r0, r3
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 800153a:	b480      	push	{r7}
 800153c:	b087      	sub	sp, #28
 800153e:	af00      	add	r7, sp, #0
 8001540:	60f8      	str	r0, [r7, #12]
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	10da      	asrs	r2, r3, #3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001558:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800155c:	12db      	asrs	r3, r3, #11
 800155e:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	111b      	asrs	r3, r3, #4
 8001564:	68fa      	ldr	r2, [r7, #12]
 8001566:	8812      	ldrh	r2, [r2, #0]
 8001568:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 800156a:	68ba      	ldr	r2, [r7, #8]
 800156c:	1112      	asrs	r2, r2, #4
 800156e:	68f9      	ldr	r1, [r7, #12]
 8001570:	8809      	ldrh	r1, [r1, #0]
 8001572:	1a52      	subs	r2, r2, r1
 8001574:	fb02 f303 	mul.w	r3, r2, r3
 8001578:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001580:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001584:	139b      	asrs	r3, r3, #14
 8001586:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001588:	697a      	ldr	r2, [r7, #20]
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	441a      	add	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	4613      	mov	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	3380      	adds	r3, #128	; 0x80
 800159e:	121b      	asrs	r3, r3, #8
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	371c      	adds	r7, #28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 80015ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015b0:	b09c      	sub	sp, #112	; 0x70
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6578      	str	r0, [r7, #84]	; 0x54
 80015b6:	6539      	str	r1, [r7, #80]	; 0x50
 80015b8:	64fa      	str	r2, [r7, #76]	; 0x4c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 80015ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015bc:	461a      	mov	r2, r3
 80015be:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80015c2:	f5b2 34fa 	subs.w	r4, r2, #128000	; 0x1f400
 80015c6:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
 80015ca:	e9c7 451a 	strd	r4, r5, [r7, #104]	; 0x68
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80015ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80015d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015d2:	fb03 f102 	mul.w	r1, r3, r2
 80015d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80015d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015da:	fb03 f302 	mul.w	r3, r3, r2
 80015de:	18ca      	adds	r2, r1, r3
 80015e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015e2:	fba3 4503 	umull	r4, r5, r3, r3
 80015e6:	1953      	adds	r3, r2, r5
 80015e8:	461d      	mov	r5, r3
 80015ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80015ec:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80015f0:	b21a      	sxth	r2, r3
 80015f2:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80015f6:	fb02 f005 	mul.w	r0, r2, r5
 80015fa:	fb04 f103 	mul.w	r1, r4, r3
 80015fe:	4401      	add	r1, r0
 8001600:	fba4 2302 	umull	r2, r3, r4, r2
 8001604:	4419      	add	r1, r3
 8001606:	460b      	mov	r3, r1
 8001608:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
 800160c:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001612:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001616:	b21a      	sxth	r2, r3
 8001618:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800161c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800161e:	fb03 f001 	mul.w	r0, r3, r1
 8001622:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001624:	fb02 f101 	mul.w	r1, r2, r1
 8001628:	4408      	add	r0, r1
 800162a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800162c:	fba1 2302 	umull	r2, r3, r1, r2
 8001630:	18c1      	adds	r1, r0, r3
 8001632:	460b      	mov	r3, r1
 8001634:	f04f 0000 	mov.w	r0, #0
 8001638:	f04f 0100 	mov.w	r1, #0
 800163c:	0459      	lsls	r1, r3, #17
 800163e:	ea41 31d2 	orr.w	r1, r1, r2, lsr #15
 8001642:	0450      	lsls	r0, r2, #17
 8001644:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001648:	eb12 0800 	adds.w	r8, r2, r0
 800164c:	eb43 0901 	adc.w	r9, r3, r1
 8001650:	e9c7 8918 	strd	r8, r9, [r7, #96]	; 0x60
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001656:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800165a:	b21a      	sxth	r2, r3
 800165c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001660:	f04f 0000 	mov.w	r0, #0
 8001664:	f04f 0100 	mov.w	r1, #0
 8001668:	00d1      	lsls	r1, r2, #3
 800166a:	2000      	movs	r0, #0
 800166c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001670:	1814      	adds	r4, r2, r0
 8001672:	61bc      	str	r4, [r7, #24]
 8001674:	414b      	adcs	r3, r1
 8001676:	61fb      	str	r3, [r7, #28]
 8001678:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800167c:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001680:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001682:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001684:	fb03 f102 	mul.w	r1, r3, r2
 8001688:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800168a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800168c:	fb03 f302 	mul.w	r3, r3, r2
 8001690:	18ca      	adds	r2, r1, r3
 8001692:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001694:	fba3 4503 	umull	r4, r5, r3, r3
 8001698:	1953      	adds	r3, r2, r5
 800169a:	461d      	mov	r5, r3
 800169c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800169e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80016a2:	b21a      	sxth	r2, r3
 80016a4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80016a8:	fb02 f005 	mul.w	r0, r2, r5
 80016ac:	fb04 f103 	mul.w	r1, r4, r3
 80016b0:	4401      	add	r1, r0
 80016b2:	fba4 2302 	umull	r2, r3, r4, r2
 80016b6:	4419      	add	r1, r3
 80016b8:	460b      	mov	r3, r1
 80016ba:	f04f 0800 	mov.w	r8, #0
 80016be:	f04f 0900 	mov.w	r9, #0
 80016c2:	ea4f 2812 	mov.w	r8, r2, lsr #8
 80016c6:	ea48 6803 	orr.w	r8, r8, r3, lsl #24
 80016ca:	ea4f 2923 	mov.w	r9, r3, asr #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80016ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80016d4:	b21a      	sxth	r2, r3
 80016d6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80016da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80016dc:	fb03 f001 	mul.w	r0, r3, r1
 80016e0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80016e2:	fb02 f101 	mul.w	r1, r2, r1
 80016e6:	1844      	adds	r4, r0, r1
 80016e8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80016ea:	fba1 0102 	umull	r0, r1, r1, r2
 80016ee:	1863      	adds	r3, r4, r1
 80016f0:	4619      	mov	r1, r3
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	f04f 0300 	mov.w	r3, #0
 80016fa:	030b      	lsls	r3, r1, #12
 80016fc:	ea43 5310 	orr.w	r3, r3, r0, lsr #20
 8001700:	0302      	lsls	r2, r0, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001702:	eb18 0102 	adds.w	r1, r8, r2
 8001706:	6139      	str	r1, [r7, #16]
 8001708:	eb49 0303 	adc.w	r3, r9, r3
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001712:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001716:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800171a:	1c11      	adds	r1, r2, #0
 800171c:	6439      	str	r1, [r7, #64]	; 0x40
 800171e:	f543 4300 	adc.w	r3, r3, #32768	; 0x8000
 8001722:	647b      	str	r3, [r7, #68]	; 0x44
 8001724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001726:	88db      	ldrh	r3, [r3, #6]
 8001728:	b29a      	uxth	r2, r3
 800172a:	f04f 0300 	mov.w	r3, #0
 800172e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8001732:	4629      	mov	r1, r5
 8001734:	fb02 f001 	mul.w	r0, r2, r1
 8001738:	4621      	mov	r1, r4
 800173a:	fb01 f103 	mul.w	r1, r1, r3
 800173e:	4401      	add	r1, r0
 8001740:	4620      	mov	r0, r4
 8001742:	fba0 2302 	umull	r2, r3, r0, r2
 8001746:	4419      	add	r1, r3
 8001748:	460b      	mov	r3, r1
 800174a:	f04f 0000 	mov.w	r0, #0
 800174e:	f04f 0100 	mov.w	r1, #0
 8001752:	1058      	asrs	r0, r3, #1
 8001754:	17d9      	asrs	r1, r3, #31
 8001756:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

	if (var1 == 0) {
 800175a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800175e:	4313      	orrs	r3, r2
 8001760:	d101      	bne.n	8001766 <compensate_pressure+0x1ba>
		return 0;  // avoid exception caused by division by zero
 8001762:	2300      	movs	r3, #0
 8001764:	e0e1      	b.n	800192a <compensate_pressure+0x37e>
	}

	p = 1048576 - adc_press;
 8001766:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001768:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800176c:	461a      	mov	r2, r3
 800176e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001772:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	p = (((p << 31) - var2) * 3125) / var1;
 8001776:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001778:	105b      	asrs	r3, r3, #1
 800177a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800177c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800177e:	07db      	lsls	r3, r3, #31
 8001780:	63bb      	str	r3, [r7, #56]	; 0x38
 8001782:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001786:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800178a:	4621      	mov	r1, r4
 800178c:	ebb1 0a02 	subs.w	sl, r1, r2
 8001790:	4629      	mov	r1, r5
 8001792:	eb61 0b03 	sbc.w	fp, r1, r3
 8001796:	4652      	mov	r2, sl
 8001798:	465b      	mov	r3, fp
 800179a:	1891      	adds	r1, r2, r2
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	415b      	adcs	r3, r3
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017a6:	eb12 020a 	adds.w	r2, r2, sl
 80017aa:	eb43 030b 	adc.w	r3, r3, fp
 80017ae:	f04f 0000 	mov.w	r0, #0
 80017b2:	f04f 0100 	mov.w	r1, #0
 80017b6:	0199      	lsls	r1, r3, #6
 80017b8:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 80017bc:	0190      	lsls	r0, r2, #6
 80017be:	1812      	adds	r2, r2, r0
 80017c0:	eb41 0303 	adc.w	r3, r1, r3
 80017c4:	f04f 0000 	mov.w	r0, #0
 80017c8:	f04f 0100 	mov.w	r1, #0
 80017cc:	0099      	lsls	r1, r3, #2
 80017ce:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80017d2:	0090      	lsls	r0, r2, #2
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	eb12 020a 	adds.w	r2, r2, sl
 80017dc:	eb43 030b 	adc.w	r3, r3, fp
 80017e0:	f04f 0000 	mov.w	r0, #0
 80017e4:	f04f 0100 	mov.w	r1, #0
 80017e8:	0099      	lsls	r1, r3, #2
 80017ea:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80017ee:	0090      	lsls	r0, r2, #2
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	eb12 010a 	adds.w	r1, r2, sl
 80017f8:	6339      	str	r1, [r7, #48]	; 0x30
 80017fa:	eb43 030b 	adc.w	r3, r3, fp
 80017fe:	637b      	str	r3, [r7, #52]	; 0x34
 8001800:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8001804:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001808:	f7ff f9c0 	bl	8000b8c <__aeabi_ldivmod>
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001816:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800181a:	b218      	sxth	r0, r3
 800181c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8001820:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	f04f 0300 	mov.w	r3, #0
 800182c:	0b62      	lsrs	r2, r4, #13
 800182e:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001832:	136b      	asrs	r3, r5, #13
 8001834:	fb02 f501 	mul.w	r5, r2, r1
 8001838:	fb00 f403 	mul.w	r4, r0, r3
 800183c:	442c      	add	r4, r5
 800183e:	fba0 0102 	umull	r0, r1, r0, r2
 8001842:	1863      	adds	r3, r4, r1
 8001844:	4619      	mov	r1, r3
 8001846:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800184a:	f04f 0200 	mov.w	r2, #0
 800184e:	f04f 0300 	mov.w	r3, #0
 8001852:	0b62      	lsrs	r2, r4, #13
 8001854:	ea42 42c5 	orr.w	r2, r2, r5, lsl #19
 8001858:	136b      	asrs	r3, r5, #13
 800185a:	fb02 f501 	mul.w	r5, r2, r1
 800185e:	fb00 f403 	mul.w	r4, r0, r3
 8001862:	442c      	add	r4, r5
 8001864:	fba0 0102 	umull	r0, r1, r0, r2
 8001868:	1863      	adds	r3, r4, r1
 800186a:	4619      	mov	r1, r3
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	0e42      	lsrs	r2, r0, #25
 8001876:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800187a:	164b      	asrs	r3, r1, #25
 800187c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001882:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001886:	b21a      	sxth	r2, r3
 8001888:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800188c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800188e:	fb03 f001 	mul.w	r0, r3, r1
 8001892:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001894:	fb02 f101 	mul.w	r1, r2, r1
 8001898:	1844      	adds	r4, r0, r1
 800189a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800189c:	fba1 0102 	umull	r0, r1, r1, r2
 80018a0:	1863      	adds	r3, r4, r1
 80018a2:	4619      	mov	r1, r3
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	0cc2      	lsrs	r2, r0, #19
 80018ae:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80018b2:	14cb      	asrs	r3, r1, #19
 80018b4:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 80018b8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80018bc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80018c0:	1884      	adds	r4, r0, r2
 80018c2:	62bc      	str	r4, [r7, #40]	; 0x28
 80018c4:	eb41 0303 	adc.w	r3, r1, r3
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ca:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80018ce:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80018d2:	4621      	mov	r1, r4
 80018d4:	1889      	adds	r1, r1, r2
 80018d6:	6239      	str	r1, [r7, #32]
 80018d8:	4629      	mov	r1, r5
 80018da:	eb43 0101 	adc.w	r1, r3, r1
 80018de:	6279      	str	r1, [r7, #36]	; 0x24
 80018e0:	f04f 0000 	mov.w	r0, #0
 80018e4:	f04f 0100 	mov.w	r1, #0
 80018e8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80018ec:	4623      	mov	r3, r4
 80018ee:	0a18      	lsrs	r0, r3, #8
 80018f0:	462b      	mov	r3, r5
 80018f2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80018f6:	462b      	mov	r3, r5
 80018f8:	1219      	asrs	r1, r3, #8
 80018fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018fc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001900:	b21c      	sxth	r4, r3
 8001902:	ea4f 75e4 	mov.w	r5, r4, asr #31
 8001906:	f04f 0200 	mov.w	r2, #0
 800190a:	f04f 0300 	mov.w	r3, #0
 800190e:	012b      	lsls	r3, r5, #4
 8001910:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001914:	0122      	lsls	r2, r4, #4
 8001916:	1884      	adds	r4, r0, r2
 8001918:	603c      	str	r4, [r7, #0]
 800191a:	eb41 0303 	adc.w	r3, r1, r3
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001924:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	return p;
 8001928:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800192a:	4618      	mov	r0, r3
 800192c:	3770      	adds	r7, #112	; 0x70
 800192e:	46bd      	mov	sp, r7
 8001930:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001934 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001934:	b480      	push	{r7}
 8001936:	b087      	sub	sp, #28
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001946:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	039a      	lsls	r2, r3, #14
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001952:	051b      	lsls	r3, r3, #20
 8001954:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800195c:	4619      	mov	r1, r3
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	fb03 f301 	mul.w	r3, r3, r1
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800196a:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 800196c:	68fa      	ldr	r2, [r7, #12]
 800196e:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 8001972:	4611      	mov	r1, r2
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	fb02 f201 	mul.w	r2, r2, r1
 800197a:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800197c:	68f9      	ldr	r1, [r7, #12]
 800197e:	7f09      	ldrb	r1, [r1, #28]
 8001980:	4608      	mov	r0, r1
 8001982:	6979      	ldr	r1, [r7, #20]
 8001984:	fb01 f100 	mul.w	r1, r1, r0
 8001988:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800198a:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 800198e:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001992:	1292      	asrs	r2, r2, #10
 8001994:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001998:	68f9      	ldr	r1, [r7, #12]
 800199a:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 800199e:	fb01 f202 	mul.w	r2, r1, r2
 80019a2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80019a6:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80019a8:	fb02 f303 	mul.w	r3, r2, r3
 80019ac:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	13db      	asrs	r3, r3, #15
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	13d2      	asrs	r2, r2, #15
 80019b6:	fb02 f303 	mul.w	r3, r2, r3
 80019ba:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	7e12      	ldrb	r2, [r2, #24]
 80019c0:	fb02 f303 	mul.w	r3, r2, r3
 80019c4:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80019d2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80019da:	bfa8      	it	ge
 80019dc:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80019e0:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	131b      	asrs	r3, r3, #12
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	371c      	adds	r7, #28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b08c      	sub	sp, #48	; 0x30
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	60f8      	str	r0, [r7, #12]
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	607a      	str	r2, [r7, #4]
 80019fe:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a06:	2b60      	cmp	r3, #96	; 0x60
 8001a08:	d007      	beq.n	8001a1a <bmp280_read_fixed+0x28>
		if (humidity)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d002      	beq.n	8001a16 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <bmp280_read_fixed+0x32>
 8001a20:	2308      	movs	r3, #8
 8001a22:	e000      	b.n	8001a26 <bmp280_read_fixed+0x34>
 8001a24:	2306      	movs	r3, #6
 8001a26:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	f107 0218 	add.w	r2, r7, #24
 8001a30:	21f7      	movs	r1, #247	; 0xf7
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f7ff fba5 	bl	8001182 <read_data>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <bmp280_read_fixed+0x50>
		return false;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e038      	b.n	8001ab4 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001a42:	7e3b      	ldrb	r3, [r7, #24]
 8001a44:	031a      	lsls	r2, r3, #12
 8001a46:	7e7b      	ldrb	r3, [r7, #25]
 8001a48:	011b      	lsls	r3, r3, #4
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	7eba      	ldrb	r2, [r7, #26]
 8001a4e:	0912      	lsrs	r2, r2, #4
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	4313      	orrs	r3, r2
 8001a54:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001a56:	7efb      	ldrb	r3, [r7, #27]
 8001a58:	031a      	lsls	r2, r3, #12
 8001a5a:	7f3b      	ldrb	r3, [r7, #28]
 8001a5c:	011b      	lsls	r3, r3, #4
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	7f7a      	ldrb	r2, [r7, #29]
 8001a62:	0912      	lsrs	r2, r2, #4
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	4313      	orrs	r3, r2
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	461a      	mov	r2, r3
 8001a70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f7ff fd61 	bl	800153a <compensate_temperature>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	461a      	mov	r2, r3
 8001a82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a84:	68f8      	ldr	r0, [r7, #12]
 8001a86:	f7ff fd91 	bl	80015ac <compensate_pressure>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00d      	beq.n	8001ab2 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001a96:	7fbb      	ldrb	r3, [r7, #30]
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	7ffa      	ldrb	r2, [r7, #31]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	6a39      	ldr	r1, [r7, #32]
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f7ff ff44 	bl	8001934 <compensate_humidity>
 8001aac:	4602      	mov	r2, r0
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001ab2:	2301      	movs	r3, #1
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3730      	adds	r7, #48	; 0x30
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	0000      	movs	r0, r0
	...

08001ac0 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, DeviceData *deviceData) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
//	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001aca:	f107 0208 	add.w	r2, r7, #8
 8001ace:	f107 010c 	add.w	r1, r7, #12
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff ff8c 	bl	80019f2 <bmp280_read_fixed>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d018      	beq.n	8001b12 <bmp280_read_float+0x52>
			/*humidity ? &fixed_humidity : NULL*/ NULL)) {
//		*temperature = (float) fixed_temperature / 100;
		deviceData->BMP280_Pressure = (int) (fixed_pressure / 256 * 0.01) ;
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	0a1b      	lsrs	r3, r3, #8
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7fe fd2d 	bl	8000544 <__aeabi_ui2d>
 8001aea:	a30d      	add	r3, pc, #52	; (adr r3, 8001b20 <bmp280_read_float+0x60>)
 8001aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af0:	f7fe fda2 	bl	8000638 <__aeabi_dmul>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	f7fe ffae 	bl	8000a5c <__aeabi_d2iz>
 8001b00:	ee07 0a90 	vmov	s15, r0
 8001b04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	edc3 7a02 	vstr	s15, [r3, #8]
//		if (humidity)
//			*humidity = (float) fixed_humidity / 1024;
		return true;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <bmp280_read_float+0x54>
	}

	return false;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	f3af 8000 	nop.w
 8001b20:	47ae147b 	.word	0x47ae147b
 8001b24:	3f847ae1 	.word	0x3f847ae1

08001b28 <readTempAndHumidity>:
 */


#include "HTU21.h"

void readTempAndHumidity(I2C_HandleTypeDef *hi2c1, DeviceData *deviceData) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af04      	add	r7, sp, #16
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
	uint8_t HTU21D_RX_Data[2];

	uint16_t HTU21D_ADC_Raw;

	HAL_I2C_Mem_Read(hi2c1, HTU21D_Adress, HTU21D_Temp_Cmd, I2C_MEMADD_SIZE_8BIT, (uint8_t*) HTU21D_RX_Data, 2, 1000);
 8001b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b36:	9302      	str	r3, [sp, #8]
 8001b38:	2302      	movs	r3, #2
 8001b3a:	9301      	str	r3, [sp, #4]
 8001b3c:	f107 030c 	add.w	r3, r7, #12
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	2301      	movs	r3, #1
 8001b44:	22e3      	movs	r2, #227	; 0xe3
 8001b46:	2180      	movs	r1, #128	; 0x80
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f002 f825 	bl	8003b98 <HAL_I2C_Mem_Read>
	HTU21D_ADC_Raw = ((uint16_t)(HTU21D_RX_Data[0] << 8) | (HTU21D_RX_Data[1]));
 8001b4e:	7b3b      	ldrb	r3, [r7, #12]
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	021b      	lsls	r3, r3, #8
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	7b7b      	ldrb	r3, [r7, #13]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	81fb      	strh	r3, [r7, #14]
	deviceData->HTU21D_Temperature = (int)(HTU21D_ADC_Raw * 175.72 / 65536.00) - 46.85;
 8001b5e:	89fb      	ldrh	r3, [r7, #14]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fcff 	bl	8000564 <__aeabi_i2d>
 8001b66:	a33b      	add	r3, pc, #236	; (adr r3, 8001c54 <readTempAndHumidity+0x12c>)
 8001b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b6c:	f7fe fd64 	bl	8000638 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	4b32      	ldr	r3, [pc, #200]	; (8001c48 <readTempAndHumidity+0x120>)
 8001b7e:	f7fe fe85 	bl	800088c <__aeabi_ddiv>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4610      	mov	r0, r2
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f7fe ff67 	bl	8000a5c <__aeabi_d2iz>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fce7 	bl	8000564 <__aeabi_i2d>
 8001b96:	a32a      	add	r3, pc, #168	; (adr r3, 8001c40 <readTempAndHumidity+0x118>)
 8001b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9c:	f7fe fb94 	bl	80002c8 <__aeabi_dsub>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f7fe ffa0 	bl	8000aec <__aeabi_d2f>
 8001bac:	4602      	mov	r2, r0
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 8001bb2:	2064      	movs	r0, #100	; 0x64
 8001bb4:	f000 ff6c 	bl	8002a90 <HAL_Delay>

	HAL_I2C_Mem_Read(hi2c1, HTU21D_Adress, HTU21D_Humi_Cmd, I2C_MEMADD_SIZE_8BIT, HTU21D_RX_Data, 2, 1000);
 8001bb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bbc:	9302      	str	r3, [sp, #8]
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	9301      	str	r3, [sp, #4]
 8001bc2:	f107 030c 	add.w	r3, r7, #12
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	2301      	movs	r3, #1
 8001bca:	22e5      	movs	r2, #229	; 0xe5
 8001bcc:	2180      	movs	r1, #128	; 0x80
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f001 ffe2 	bl	8003b98 <HAL_I2C_Mem_Read>
	HTU21D_ADC_Raw = ((uint16_t)(HTU21D_RX_Data[0] << 8) | (HTU21D_RX_Data[1]));
 8001bd4:	7b3b      	ldrb	r3, [r7, #12]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	021b      	lsls	r3, r3, #8
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	7b7b      	ldrb	r3, [r7, #13]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	4313      	orrs	r3, r2
 8001be2:	81fb      	strh	r3, [r7, #14]
	deviceData->HTU21D_Humidity = (int)(HTU21D_ADC_Raw * 125.0 / 65536.0) - 6.0;
 8001be4:	89fb      	ldrh	r3, [r7, #14]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe fcbc 	bl	8000564 <__aeabi_i2d>
 8001bec:	f04f 0200 	mov.w	r2, #0
 8001bf0:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <readTempAndHumidity+0x124>)
 8001bf2:	f7fe fd21 	bl	8000638 <__aeabi_dmul>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	4610      	mov	r0, r2
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f04f 0200 	mov.w	r2, #0
 8001c02:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <readTempAndHumidity+0x120>)
 8001c04:	f7fe fe42 	bl	800088c <__aeabi_ddiv>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f7fe ff24 	bl	8000a5c <__aeabi_d2iz>
 8001c14:	4603      	mov	r3, r0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fca4 	bl	8000564 <__aeabi_i2d>
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <readTempAndHumidity+0x128>)
 8001c22:	f7fe fb51 	bl	80002c8 <__aeabi_dsub>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f7fe ff5d 	bl	8000aec <__aeabi_d2f>
 8001c32:	4602      	mov	r2, r0
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	605a      	str	r2, [r3, #4]
}
 8001c38:	bf00      	nop
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	cccccccd 	.word	0xcccccccd
 8001c44:	40476ccc 	.word	0x40476ccc
 8001c48:	40f00000 	.word	0x40f00000
 8001c4c:	405f4000 	.word	0x405f4000
 8001c50:	40180000 	.word	0x40180000
 8001c54:	3d70a3d7 	.word	0x3d70a3d7
 8001c58:	4065f70a 	.word	0x4065f70a

08001c5c <LCD_Set_Cursor>:
 */

#include "LED.h"

void LCD_Set_Cursor(unsigned char r, unsigned char c)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	460a      	mov	r2, r1
 8001c66:	71fb      	strb	r3, [r7, #7]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	71bb      	strb	r3, [r7, #6]
    unsigned char Temp,Low4,High4;
    if(r == 1)
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d111      	bne.n	8001c96 <LCD_Set_Cursor+0x3a>
    {
      Temp  = 0x80 + c - 1; //0x80 is used to move the cursor
 8001c72:	79bb      	ldrb	r3, [r7, #6]
 8001c74:	337f      	adds	r3, #127	; 0x7f
 8001c76:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	091b      	lsrs	r3, r3, #4
 8001c7c:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	737b      	strb	r3, [r7, #13]
      LCD_CMD(High4);
 8001c86:	7bbb      	ldrb	r3, [r7, #14]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f000 f883 	bl	8001d94 <LCD_CMD>
      LCD_CMD(Low4);
 8001c8e:	7b7b      	ldrb	r3, [r7, #13]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f000 f87f 	bl	8001d94 <LCD_CMD>
    }
    if(r == 2)
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d111      	bne.n	8001cc0 <LCD_Set_Cursor+0x64>
    {
      Temp  = 0xC0 + c - 1;
 8001c9c:	79bb      	ldrb	r3, [r7, #6]
 8001c9e:	3b41      	subs	r3, #65	; 0x41
 8001ca0:	73fb      	strb	r3, [r7, #15]
      High4 = Temp >> 4;
 8001ca2:	7bfb      	ldrb	r3, [r7, #15]
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	73bb      	strb	r3, [r7, #14]
      Low4  = Temp & 0x0F;
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	f003 030f 	and.w	r3, r3, #15
 8001cae:	737b      	strb	r3, [r7, #13]
      LCD_CMD(High4);
 8001cb0:	7bbb      	ldrb	r3, [r7, #14]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 f86e 	bl	8001d94 <LCD_CMD>
      LCD_CMD(Low4);
 8001cb8:	7b7b      	ldrb	r3, [r7, #13]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f000 f86a 	bl	8001d94 <LCD_CMD>
    }
    HAL_Delay(2);
 8001cc0:	2002      	movs	r0, #2
 8001cc2:	f000 fee5 	bl	8002a90 <HAL_Delay>
}
 8001cc6:	bf00      	nop
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <LCD_Clear>:
void LCD_Clear()
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	af00      	add	r7, sp, #0
    LCD_CMD(0);
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f000 f85e 	bl	8001d94 <LCD_CMD>
    LCD_CMD(1);
 8001cd8:	2001      	movs	r0, #1
 8001cda:	f000 f85b 	bl	8001d94 <LCD_CMD>
    HAL_Delay(70);
 8001cde:	2046      	movs	r0, #70	; 0x46
 8001ce0:	f000 fed6 	bl	8002a90 <HAL_Delay>
}
 8001ce4:	bf00      	nop
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <LCD_DATA>:
void LCD_DATA(unsigned char Data)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
    if(Data & 1)
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d005      	beq.n	8001d08 <LCD_DATA+0x20>
    	HAL_GPIO_WritePin(D4_PORT, D4_PIN, 1);
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	2120      	movs	r1, #32
 8001d00:	4821      	ldr	r0, [pc, #132]	; (8001d88 <LCD_DATA+0xa0>)
 8001d02:	f001 f98f 	bl	8003024 <HAL_GPIO_WritePin>
 8001d06:	e004      	b.n	8001d12 <LCD_DATA+0x2a>
    else
    	HAL_GPIO_WritePin(D4_PORT, D4_PIN, 0);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2120      	movs	r1, #32
 8001d0c:	481e      	ldr	r0, [pc, #120]	; (8001d88 <LCD_DATA+0xa0>)
 8001d0e:	f001 f989 	bl	8003024 <HAL_GPIO_WritePin>
    if(Data & 2)
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d006      	beq.n	8001d2a <LCD_DATA+0x42>
    	HAL_GPIO_WritePin(D5_PORT, D5_PIN, 1);
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d22:	481a      	ldr	r0, [pc, #104]	; (8001d8c <LCD_DATA+0xa4>)
 8001d24:	f001 f97e 	bl	8003024 <HAL_GPIO_WritePin>
 8001d28:	e005      	b.n	8001d36 <LCD_DATA+0x4e>
    else
    	HAL_GPIO_WritePin(D5_PORT, D5_PIN, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d30:	4816      	ldr	r0, [pc, #88]	; (8001d8c <LCD_DATA+0xa4>)
 8001d32:	f001 f977 	bl	8003024 <HAL_GPIO_WritePin>
    if(Data & 4)
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d006      	beq.n	8001d4e <LCD_DATA+0x66>
    	HAL_GPIO_WritePin(D6_PORT, D6_PIN, 1);
 8001d40:	2201      	movs	r2, #1
 8001d42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d46:	4811      	ldr	r0, [pc, #68]	; (8001d8c <LCD_DATA+0xa4>)
 8001d48:	f001 f96c 	bl	8003024 <HAL_GPIO_WritePin>
 8001d4c:	e005      	b.n	8001d5a <LCD_DATA+0x72>
    else
    	HAL_GPIO_WritePin(D6_PORT, D6_PIN, 0);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d54:	480d      	ldr	r0, [pc, #52]	; (8001d8c <LCD_DATA+0xa4>)
 8001d56:	f001 f965 	bl	8003024 <HAL_GPIO_WritePin>
    if(Data & 8)
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	f003 0308 	and.w	r3, r3, #8
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d006      	beq.n	8001d72 <LCD_DATA+0x8a>
    	HAL_GPIO_WritePin(D7_PORT, D7_PIN, 1);
 8001d64:	2201      	movs	r2, #1
 8001d66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d6a:	4809      	ldr	r0, [pc, #36]	; (8001d90 <LCD_DATA+0xa8>)
 8001d6c:	f001 f95a 	bl	8003024 <HAL_GPIO_WritePin>
    else
    	HAL_GPIO_WritePin(D7_PORT, D7_PIN, 0);
}
 8001d70:	e005      	b.n	8001d7e <LCD_DATA+0x96>
    	HAL_GPIO_WritePin(D7_PORT, D7_PIN, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d78:	4805      	ldr	r0, [pc, #20]	; (8001d90 <LCD_DATA+0xa8>)
 8001d7a:	f001 f953 	bl	8003024 <HAL_GPIO_WritePin>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40020800 	.word	0x40020800
 8001d8c:	40020000 	.word	0x40020000
 8001d90:	40020400 	.word	0x40020400

08001d94 <LCD_CMD>:
void LCD_CMD(unsigned char a_CMD)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	71fb      	strb	r3, [r7, #7]
    // Select Command Register
    HAL_GPIO_WritePin(RS_PORT, RS_PIN, 0);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001da4:	480d      	ldr	r0, [pc, #52]	; (8001ddc <LCD_CMD+0x48>)
 8001da6:	f001 f93d 	bl	8003024 <HAL_GPIO_WritePin>
    // Move The Command Data To LCD
    LCD_DATA(a_CMD);
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff9b 	bl	8001ce8 <LCD_DATA>
    // Send The EN Clock Signal
    HAL_GPIO_WritePin(EN_PORT, EN_PIN, 1);
 8001db2:	2201      	movs	r2, #1
 8001db4:	2140      	movs	r1, #64	; 0x40
 8001db6:	480a      	ldr	r0, [pc, #40]	; (8001de0 <LCD_CMD+0x4c>)
 8001db8:	f001 f934 	bl	8003024 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8001dbc:	2032      	movs	r0, #50	; 0x32
 8001dbe:	f000 fe67 	bl	8002a90 <HAL_Delay>
    HAL_GPIO_WritePin(EN_PORT, EN_PIN, 0);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2140      	movs	r1, #64	; 0x40
 8001dc6:	4806      	ldr	r0, [pc, #24]	; (8001de0 <LCD_CMD+0x4c>)
 8001dc8:	f001 f92c 	bl	8003024 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8001dcc:	2032      	movs	r0, #50	; 0x32
 8001dce:	f000 fe5f 	bl	8002a90 <HAL_Delay>
}
 8001dd2:	bf00      	nop
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40020400 	.word	0x40020400
 8001de0:	40020800 	.word	0x40020800

08001de4 <LCD_Init>:
void LCD_Init(){
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
	LCD_DATA(0x00);
 8001de8:	2000      	movs	r0, #0
 8001dea:	f7ff ff7d 	bl	8001ce8 <LCD_DATA>
	    HAL_Delay(150);
 8001dee:	2096      	movs	r0, #150	; 0x96
 8001df0:	f000 fe4e 	bl	8002a90 <HAL_Delay>
	    LCD_CMD(0x03);
 8001df4:	2003      	movs	r0, #3
 8001df6:	f7ff ffcd 	bl	8001d94 <LCD_CMD>
	    HAL_Delay(5);
 8001dfa:	2005      	movs	r0, #5
 8001dfc:	f000 fe48 	bl	8002a90 <HAL_Delay>
	    LCD_CMD(0x03);
 8001e00:	2003      	movs	r0, #3
 8001e02:	f7ff ffc7 	bl	8001d94 <LCD_CMD>
	    HAL_Delay(150);
 8001e06:	2096      	movs	r0, #150	; 0x96
 8001e08:	f000 fe42 	bl	8002a90 <HAL_Delay>
	    LCD_CMD(0x03);
 8001e0c:	2003      	movs	r0, #3
 8001e0e:	f7ff ffc1 	bl	8001d94 <LCD_CMD>
	    LCD_CMD(0x02);
 8001e12:	2002      	movs	r0, #2
 8001e14:	f7ff ffbe 	bl	8001d94 <LCD_CMD>
	    LCD_CMD(0x02);
 8001e18:	2002      	movs	r0, #2
 8001e1a:	f7ff ffbb 	bl	8001d94 <LCD_CMD>
	    LCD_CMD(0x08);
 8001e1e:	2008      	movs	r0, #8
 8001e20:	f7ff ffb8 	bl	8001d94 <LCD_CMD>
	    LCD_CMD(0x00);
 8001e24:	2000      	movs	r0, #0
 8001e26:	f7ff ffb5 	bl	8001d94 <LCD_CMD>
	    LCD_CMD(0x0C);
 8001e2a:	200c      	movs	r0, #12
 8001e2c:	f7ff ffb2 	bl	8001d94 <LCD_CMD>
	    LCD_CMD(0x00);
 8001e30:	2000      	movs	r0, #0
 8001e32:	f7ff ffaf 	bl	8001d94 <LCD_CMD>
	    LCD_CMD(0x06);
 8001e36:	2006      	movs	r0, #6
 8001e38:	f7ff ffac 	bl	8001d94 <LCD_CMD>
	    LCD_CMD(0x00);
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f7ff ffa9 	bl	8001d94 <LCD_CMD>
	    LCD_CMD(0x01);
 8001e42:	2001      	movs	r0, #1
 8001e44:	f7ff ffa6 	bl	8001d94 <LCD_CMD>
}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <LCD_Write_Char>:

void LCD_Write_Char(char Data)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
   char Low4,High4;
   Low4  = Data & 0x0F;
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	f003 030f 	and.w	r3, r3, #15
 8001e5c:	73fb      	strb	r3, [r7, #15]
   High4 = Data & 0xF0;
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	f023 030f 	bic.w	r3, r3, #15
 8001e64:	73bb      	strb	r3, [r7, #14]

   HAL_GPIO_WritePin(RS_PORT, RS_PIN, 1);
 8001e66:	2201      	movs	r2, #1
 8001e68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e6c:	4818      	ldr	r0, [pc, #96]	; (8001ed0 <LCD_Write_Char+0x84>)
 8001e6e:	f001 f8d9 	bl	8003024 <HAL_GPIO_WritePin>

   LCD_DATA(High4>>4);
 8001e72:	7bbb      	ldrb	r3, [r7, #14]
 8001e74:	091b      	lsrs	r3, r3, #4
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff35 	bl	8001ce8 <LCD_DATA>
   HAL_GPIO_WritePin(EN_PORT, EN_PIN, 1);
 8001e7e:	2201      	movs	r2, #1
 8001e80:	2140      	movs	r1, #64	; 0x40
 8001e82:	4814      	ldr	r0, [pc, #80]	; (8001ed4 <LCD_Write_Char+0x88>)
 8001e84:	f001 f8ce 	bl	8003024 <HAL_GPIO_WritePin>
   HAL_Delay(10);
 8001e88:	200a      	movs	r0, #10
 8001e8a:	f000 fe01 	bl	8002a90 <HAL_Delay>
   HAL_GPIO_WritePin(EN_PORT, EN_PIN, 0);
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2140      	movs	r1, #64	; 0x40
 8001e92:	4810      	ldr	r0, [pc, #64]	; (8001ed4 <LCD_Write_Char+0x88>)
 8001e94:	f001 f8c6 	bl	8003024 <HAL_GPIO_WritePin>
   HAL_Delay(10);
 8001e98:	200a      	movs	r0, #10
 8001e9a:	f000 fdf9 	bl	8002a90 <HAL_Delay>

   LCD_DATA(Low4);
 8001e9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff21 	bl	8001ce8 <LCD_DATA>
   HAL_GPIO_WritePin(EN_PORT, EN_PIN, 1);
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	2140      	movs	r1, #64	; 0x40
 8001eaa:	480a      	ldr	r0, [pc, #40]	; (8001ed4 <LCD_Write_Char+0x88>)
 8001eac:	f001 f8ba 	bl	8003024 <HAL_GPIO_WritePin>
   HAL_Delay(10);
 8001eb0:	200a      	movs	r0, #10
 8001eb2:	f000 fded 	bl	8002a90 <HAL_Delay>
   HAL_GPIO_WritePin(EN_PORT, EN_PIN, 0);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2140      	movs	r1, #64	; 0x40
 8001eba:	4806      	ldr	r0, [pc, #24]	; (8001ed4 <LCD_Write_Char+0x88>)
 8001ebc:	f001 f8b2 	bl	8003024 <HAL_GPIO_WritePin>
   HAL_Delay(10);
 8001ec0:	200a      	movs	r0, #10
 8001ec2:	f000 fde5 	bl	8002a90 <HAL_Delay>
}
 8001ec6:	bf00      	nop
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40020400 	.word	0x40020400
 8001ed4:	40020800 	.word	0x40020800

08001ed8 <LCD_Write_String>:
void LCD_Write_String(char *str)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
    int i;
    for(i=0;str[i]!='\0';i++)
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	e009      	b.n	8001efa <LCD_Write_String+0x22>
       LCD_Write_Char(str[i]);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	4413      	add	r3, r2
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff ffac 	bl	8001e4c <LCD_Write_Char>
    for(i=0;str[i]!='\0';i++)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	4413      	add	r3, r2
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1ef      	bne.n	8001ee6 <LCD_Write_String+0xe>
}
 8001f06:	bf00      	nop
 8001f08:	bf00      	nop
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b0da      	sub	sp, #360	; 0x168
 8001f14:	af02      	add	r7, sp, #8

	uint16_t size;
	uint8_t Data[256];
	DeviceData deviceData;
	DeviceData deviceDataCached;
	memset(&deviceData, 0, sizeof (deviceData));
 8001f16:	f107 0314 	add.w	r3, r7, #20
 8001f1a:	2210      	movs	r2, #16
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f003 fde0 	bl	8005ae4 <memset>
	memset(&deviceDataCached, 0, sizeof (deviceDataCached));
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	2210      	movs	r2, #16
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f003 fdda 	bl	8005ae4 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f30:	f000 fd3c 	bl	80029ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f34:	f000 f8da 	bl	80020ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f38:	f000 f9be 	bl	80022b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001f3c:	f000 f936 	bl	80021ac <MX_I2C1_Init>
  MX_I2C3_Init();
 8001f40:	f000 f962 	bl	8002208 <MX_I2C3_Init>
  MX_USART3_UART_Init();
 8001f44:	f000 f98e 	bl	8002264 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(100);
 8001f48:	2064      	movs	r0, #100	; 0x64
 8001f4a:	f000 fda1 	bl	8002a90 <HAL_Delay>
//
//  EEPROM_Read(5, 15, datar2, 50);
//
//  datar3 = EEPROM_Read_NUM (6, 0);

  LCD_Init();
 8001f4e:	f7ff ff49 	bl	8001de4 <LCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  BH1750_device_t* lumen = BH1750_init_dev_struct(&hi2c3, "test device", true);
 8001f52:	2201      	movs	r2, #1
 8001f54:	495e      	ldr	r1, [pc, #376]	; (80020d0 <main+0x1c0>)
 8001f56:	485f      	ldr	r0, [pc, #380]	; (80020d4 <main+0x1c4>)
 8001f58:	f7ff f80c 	bl	8000f74 <BH1750_init_dev_struct>
 8001f5c:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
  BH1750_init_dev(lumen);
 8001f60:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 8001f64:	f7ff f84c 	bl	8001000 <BH1750_init_dev>

  bmp280_init_default_params(&bmp280.params);
 8001f68:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001f6c:	332c      	adds	r3, #44	; 0x2c
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff f8bc 	bl	80010ec <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8001f74:	2376      	movs	r3, #118	; 0x76
 8001f76:	f8a7 3148 	strh.w	r3, [r7, #328]	; 0x148
  bmp280.i2c = &hi2c3;
 8001f7a:	4b56      	ldr	r3, [pc, #344]	; (80020d4 <main+0x1c4>)
 8001f7c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

  while (!bmp280_init(&bmp280, &bmp280.params))
 8001f80:	e00b      	b.n	8001f9a <main+0x8a>
  {
  	size = sprintf((char *)Data, "BMP280 initialization failed\n");
 8001f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f86:	4954      	ldr	r1, [pc, #336]	; (80020d8 <main+0x1c8>)
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f003 fe7d 	bl	8005c88 <siprintf>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a
	HAL_Delay(100);
 8001f94:	2064      	movs	r0, #100	; 0x64
 8001f96:	f000 fd7b 	bl	8002a90 <HAL_Delay>
  while (!bmp280_init(&bmp280, &bmp280.params))
 8001f9a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001f9e:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8001fa2:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fa19 	bl	80013e0 <bmp280_init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	f083 0301 	eor.w	r3, r3, #1
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1e3      	bne.n	8001f82 <main+0x72>
  }
  HAL_Delay(100);
 8001fba:	2064      	movs	r0, #100	; 0x64
 8001fbc:	f000 fd68 	bl	8002a90 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


		lumen->poll(lumen, &deviceData);
 8001fc0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	f107 0214 	add.w	r2, r7, #20
 8001fca:	4611      	mov	r1, r2
 8001fcc:	f8d7 015c 	ldr.w	r0, [r7, #348]	; 0x15c
 8001fd0:	4798      	blx	r3
		HAL_Delay(100);
 8001fd2:	2064      	movs	r0, #100	; 0x64
 8001fd4:	f000 fd5c 	bl	8002a90 <HAL_Delay>

		readTempAndHumidity(&hi2c1, &deviceData);
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	4619      	mov	r1, r3
 8001fde:	483f      	ldr	r0, [pc, #252]	; (80020dc <main+0x1cc>)
 8001fe0:	f7ff fda2 	bl	8001b28 <readTempAndHumidity>
		HAL_Delay(100);
 8001fe4:	2064      	movs	r0, #100	; 0x64
 8001fe6:	f000 fd53 	bl	8002a90 <HAL_Delay>

		bmp280_read_float(&bmp280, &deviceData);
 8001fea:	f107 0214 	add.w	r2, r7, #20
 8001fee:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff fd63 	bl	8001ac0 <bmp280_read_float>

		HAL_Delay(100);
 8001ffa:	2064      	movs	r0, #100	; 0x64
 8001ffc:	f000 fd48 	bl	8002a90 <HAL_Delay>
		if (measureData && deviceData.BH1750_Lumens != 0)
 8002000:	4b37      	ldr	r3, [pc, #220]	; (80020e0 <main+0x1d0>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d056      	beq.n	80020b6 <main+0x1a6>
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	899b      	ldrh	r3, [r3, #12]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d051      	beq.n	80020b6 <main+0x1a6>
		{
			if (checkData(&deviceData, &deviceDataCached))
 8002012:	1d3a      	adds	r2, r7, #4
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f000 fa0e 	bl	800243c <checkData>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d047      	beq.n	80020b6 <main+0x1a6>
			{
				size = sprintf((char *)Data,"Lumen: %d lm; Temperature: %.d C; Humidity: %d %%; Pressure: %.d hPA\r\n",
						(int)deviceData.BH1750_Lumens,
 8002026:	f107 0314 	add.w	r3, r7, #20
 800202a:	899b      	ldrh	r3, [r3, #12]
				size = sprintf((char *)Data,"Lumen: %d lm; Temperature: %.d C; Humidity: %d %%; Pressure: %.d hPA\r\n",
 800202c:	461a      	mov	r2, r3
						(int)deviceData.HTU21D_Temperature,
 800202e:	f107 0314 	add.w	r3, r7, #20
 8002032:	edd3 7a00 	vldr	s15, [r3]
				size = sprintf((char *)Data,"Lumen: %d lm; Temperature: %.d C; Humidity: %d %%; Pressure: %.d hPA\r\n",
 8002036:	eebd 7ae7 	vcvt.s32.f32	s14, s15
						(int)deviceData.HTU21D_Humidity,
 800203a:	f107 0314 	add.w	r3, r7, #20
 800203e:	edd3 7a01 	vldr	s15, [r3, #4]
				size = sprintf((char *)Data,"Lumen: %d lm; Temperature: %.d C; Humidity: %d %%; Pressure: %.d hPA\r\n",
 8002042:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002046:	ee17 1a90 	vmov	r1, s15
						(int)deviceData.BMP280_Pressure);
 800204a:	f107 0314 	add.w	r3, r7, #20
 800204e:	edd3 7a02 	vldr	s15, [r3, #8]
				size = sprintf((char *)Data,"Lumen: %d lm; Temperature: %.d C; Humidity: %d %%; Pressure: %.d hPA\r\n",
 8002052:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002056:	ee17 3a90 	vmov	r3, s15
 800205a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	9100      	str	r1, [sp, #0]
 8002062:	ee17 3a10 	vmov	r3, s14
 8002066:	491f      	ldr	r1, [pc, #124]	; (80020e4 <main+0x1d4>)
 8002068:	f003 fe0e 	bl	8005c88 <siprintf>
 800206c:	4603      	mov	r3, r0
 800206e:	f8a7 315a 	strh.w	r3, [r7, #346]	; 0x15a

				deviceDataCached.BH1750_Lumens = deviceData.BH1750_Lumens;
 8002072:	f107 0314 	add.w	r3, r7, #20
 8002076:	899a      	ldrh	r2, [r3, #12]
 8002078:	1d3b      	adds	r3, r7, #4
 800207a:	819a      	strh	r2, [r3, #12]
				deviceDataCached.BMP280_Pressure = deviceData.BMP280_Pressure;
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	689a      	ldr	r2, [r3, #8]
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	609a      	str	r2, [r3, #8]
				deviceDataCached.HTU21D_Humidity = deviceData.HTU21D_Humidity;
 8002086:	f107 0314 	add.w	r3, r7, #20
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	1d3b      	adds	r3, r7, #4
 800208e:	605a      	str	r2, [r3, #4]
				deviceDataCached.HTU21D_Temperature = deviceData.HTU21D_Temperature;
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	1d3b      	adds	r3, r7, #4
 8002098:	601a      	str	r2, [r3, #0]

				displayOnLCD(&deviceData);
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	4618      	mov	r0, r3
 80020a0:	f000 fa08 	bl	80024b4 <displayOnLCD>
				HAL_UART_Transmit(&huart3, Data, size,1000);
 80020a4:	f8b7 215a 	ldrh.w	r2, [r7, #346]	; 0x15a
 80020a8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80020ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020b0:	480d      	ldr	r0, [pc, #52]	; (80020e8 <main+0x1d8>)
 80020b2:	f003 f9fa 	bl	80054aa <HAL_UART_Transmit>
			}

		}
		memset(Data, 0, sizeof(Data));
 80020b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020be:	2100      	movs	r1, #0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f003 fd0f 	bl	8005ae4 <memset>
		HAL_Delay(10000);
 80020c6:	f242 7010 	movw	r0, #10000	; 0x2710
 80020ca:	f000 fce1 	bl	8002a90 <HAL_Delay>
		lumen->poll(lumen, &deviceData);
 80020ce:	e777      	b.n	8001fc0 <main+0xb0>
 80020d0:	0800641c 	.word	0x0800641c
 80020d4:	2000009c 	.word	0x2000009c
 80020d8:	08006428 	.word	0x08006428
 80020dc:	20000134 	.word	0x20000134
 80020e0:	2000008c 	.word	0x2000008c
 80020e4:	08006448 	.word	0x08006448
 80020e8:	200000f0 	.word	0x200000f0

080020ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b094      	sub	sp, #80	; 0x50
 80020f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020f2:	f107 031c 	add.w	r3, r7, #28
 80020f6:	2234      	movs	r2, #52	; 0x34
 80020f8:	2100      	movs	r1, #0
 80020fa:	4618      	mov	r0, r3
 80020fc:	f003 fcf2 	bl	8005ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002100:	f107 0308 	add.w	r3, r7, #8
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002110:	2300      	movs	r3, #0
 8002112:	607b      	str	r3, [r7, #4]
 8002114:	4b23      	ldr	r3, [pc, #140]	; (80021a4 <SystemClock_Config+0xb8>)
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	4a22      	ldr	r2, [pc, #136]	; (80021a4 <SystemClock_Config+0xb8>)
 800211a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800211e:	6413      	str	r3, [r2, #64]	; 0x40
 8002120:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <SystemClock_Config+0xb8>)
 8002122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002128:	607b      	str	r3, [r7, #4]
 800212a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800212c:	2300      	movs	r3, #0
 800212e:	603b      	str	r3, [r7, #0]
 8002130:	4b1d      	ldr	r3, [pc, #116]	; (80021a8 <SystemClock_Config+0xbc>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002138:	4a1b      	ldr	r2, [pc, #108]	; (80021a8 <SystemClock_Config+0xbc>)
 800213a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <SystemClock_Config+0xbc>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002148:	603b      	str	r3, [r7, #0]
 800214a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800214c:	2302      	movs	r3, #2
 800214e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002150:	2301      	movs	r3, #1
 8002152:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002154:	2310      	movs	r3, #16
 8002156:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002158:	2300      	movs	r3, #0
 800215a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800215c:	f107 031c 	add.w	r3, r7, #28
 8002160:	4618      	mov	r0, r3
 8002162:	f002 feb7 	bl	8004ed4 <HAL_RCC_OscConfig>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800216c:	f000 fa4e 	bl	800260c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002170:	230f      	movs	r3, #15
 8002172:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002178:	2300      	movs	r3, #0
 800217a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800217c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002180:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002182:	2300      	movs	r3, #0
 8002184:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002186:	f107 0308 	add.w	r3, r7, #8
 800218a:	2100      	movs	r1, #0
 800218c:	4618      	mov	r0, r3
 800218e:	f002 fbd5 	bl	800493c <HAL_RCC_ClockConfig>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002198:	f000 fa38 	bl	800260c <Error_Handler>
  }
}
 800219c:	bf00      	nop
 800219e:	3750      	adds	r7, #80	; 0x50
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40007000 	.word	0x40007000

080021ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021b0:	4b12      	ldr	r3, [pc, #72]	; (80021fc <MX_I2C1_Init+0x50>)
 80021b2:	4a13      	ldr	r2, [pc, #76]	; (8002200 <MX_I2C1_Init+0x54>)
 80021b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80021b6:	4b11      	ldr	r3, [pc, #68]	; (80021fc <MX_I2C1_Init+0x50>)
 80021b8:	4a12      	ldr	r2, [pc, #72]	; (8002204 <MX_I2C1_Init+0x58>)
 80021ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021bc:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <MX_I2C1_Init+0x50>)
 80021be:	2200      	movs	r2, #0
 80021c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021c2:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <MX_I2C1_Init+0x50>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021c8:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <MX_I2C1_Init+0x50>)
 80021ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021d0:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <MX_I2C1_Init+0x50>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021d6:	4b09      	ldr	r3, [pc, #36]	; (80021fc <MX_I2C1_Init+0x50>)
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021dc:	4b07      	ldr	r3, [pc, #28]	; (80021fc <MX_I2C1_Init+0x50>)
 80021de:	2200      	movs	r2, #0
 80021e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <MX_I2C1_Init+0x50>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021e8:	4804      	ldr	r0, [pc, #16]	; (80021fc <MX_I2C1_Init+0x50>)
 80021ea:	f000 ff73 	bl	80030d4 <HAL_I2C_Init>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80021f4:	f000 fa0a 	bl	800260c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000134 	.word	0x20000134
 8002200:	40005400 	.word	0x40005400
 8002204:	000186a0 	.word	0x000186a0

08002208 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800220c:	4b12      	ldr	r3, [pc, #72]	; (8002258 <MX_I2C3_Init+0x50>)
 800220e:	4a13      	ldr	r2, [pc, #76]	; (800225c <MX_I2C3_Init+0x54>)
 8002210:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002212:	4b11      	ldr	r3, [pc, #68]	; (8002258 <MX_I2C3_Init+0x50>)
 8002214:	4a12      	ldr	r2, [pc, #72]	; (8002260 <MX_I2C3_Init+0x58>)
 8002216:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002218:	4b0f      	ldr	r3, [pc, #60]	; (8002258 <MX_I2C3_Init+0x50>)
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800221e:	4b0e      	ldr	r3, [pc, #56]	; (8002258 <MX_I2C3_Init+0x50>)
 8002220:	2200      	movs	r2, #0
 8002222:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002224:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <MX_I2C3_Init+0x50>)
 8002226:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800222a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800222c:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <MX_I2C3_Init+0x50>)
 800222e:	2200      	movs	r2, #0
 8002230:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <MX_I2C3_Init+0x50>)
 8002234:	2200      	movs	r2, #0
 8002236:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002238:	4b07      	ldr	r3, [pc, #28]	; (8002258 <MX_I2C3_Init+0x50>)
 800223a:	2200      	movs	r2, #0
 800223c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <MX_I2C3_Init+0x50>)
 8002240:	2200      	movs	r2, #0
 8002242:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002244:	4804      	ldr	r0, [pc, #16]	; (8002258 <MX_I2C3_Init+0x50>)
 8002246:	f000 ff45 	bl	80030d4 <HAL_I2C_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002250:	f000 f9dc 	bl	800260c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}
 8002258:	2000009c 	.word	0x2000009c
 800225c:	40005c00 	.word	0x40005c00
 8002260:	000186a0 	.word	0x000186a0

08002264 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002268:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <MX_USART3_UART_Init+0x4c>)
 800226a:	4a12      	ldr	r2, [pc, #72]	; (80022b4 <MX_USART3_UART_Init+0x50>)
 800226c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800226e:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <MX_USART3_UART_Init+0x4c>)
 8002270:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002274:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002276:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <MX_USART3_UART_Init+0x4c>)
 8002278:	2200      	movs	r2, #0
 800227a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <MX_USART3_UART_Init+0x4c>)
 800227e:	2200      	movs	r2, #0
 8002280:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002282:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <MX_USART3_UART_Init+0x4c>)
 8002284:	2200      	movs	r2, #0
 8002286:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002288:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <MX_USART3_UART_Init+0x4c>)
 800228a:	220c      	movs	r2, #12
 800228c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800228e:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <MX_USART3_UART_Init+0x4c>)
 8002290:	2200      	movs	r2, #0
 8002292:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <MX_USART3_UART_Init+0x4c>)
 8002296:	2200      	movs	r2, #0
 8002298:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800229a:	4805      	ldr	r0, [pc, #20]	; (80022b0 <MX_USART3_UART_Init+0x4c>)
 800229c:	f003 f8b8 	bl	8005410 <HAL_UART_Init>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80022a6:	f000 f9b1 	bl	800260c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022aa:	bf00      	nop
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	200000f0 	.word	0x200000f0
 80022b4:	40004800 	.word	0x40004800

080022b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	; 0x28
 80022bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022be:	f107 0314 	add.w	r3, r7, #20
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]
 80022c8:	609a      	str	r2, [r3, #8]
 80022ca:	60da      	str	r2, [r3, #12]
 80022cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	4b56      	ldr	r3, [pc, #344]	; (800242c <MX_GPIO_Init+0x174>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a55      	ldr	r2, [pc, #340]	; (800242c <MX_GPIO_Init+0x174>)
 80022d8:	f043 0304 	orr.w	r3, r3, #4
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b53      	ldr	r3, [pc, #332]	; (800242c <MX_GPIO_Init+0x174>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	613b      	str	r3, [r7, #16]
 80022e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	4b4f      	ldr	r3, [pc, #316]	; (800242c <MX_GPIO_Init+0x174>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	4a4e      	ldr	r2, [pc, #312]	; (800242c <MX_GPIO_Init+0x174>)
 80022f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f8:	6313      	str	r3, [r2, #48]	; 0x30
 80022fa:	4b4c      	ldr	r3, [pc, #304]	; (800242c <MX_GPIO_Init+0x174>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	4b48      	ldr	r3, [pc, #288]	; (800242c <MX_GPIO_Init+0x174>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	4a47      	ldr	r2, [pc, #284]	; (800242c <MX_GPIO_Init+0x174>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6313      	str	r3, [r2, #48]	; 0x30
 8002316:	4b45      	ldr	r3, [pc, #276]	; (800242c <MX_GPIO_Init+0x174>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	607b      	str	r3, [r7, #4]
 8002326:	4b41      	ldr	r3, [pc, #260]	; (800242c <MX_GPIO_Init+0x174>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	4a40      	ldr	r2, [pc, #256]	; (800242c <MX_GPIO_Init+0x174>)
 800232c:	f043 0302 	orr.w	r3, r3, #2
 8002330:	6313      	str	r3, [r2, #48]	; 0x30
 8002332:	4b3e      	ldr	r3, [pc, #248]	; (800242c <MX_GPIO_Init+0x174>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	607b      	str	r3, [r7, #4]
 800233c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800233e:	2200      	movs	r2, #0
 8002340:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 8002344:	483a      	ldr	r0, [pc, #232]	; (8002430 <MX_GPIO_Init+0x178>)
 8002346:	f000 fe6d 	bl	8003024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 800234a:	2200      	movs	r2, #0
 800234c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8002350:	4838      	ldr	r0, [pc, #224]	; (8002434 <MX_GPIO_Init+0x17c>)
 8002352:	f000 fe67 	bl	8003024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8002356:	2200      	movs	r2, #0
 8002358:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800235c:	4836      	ldr	r0, [pc, #216]	; (8002438 <MX_GPIO_Init+0x180>)
 800235e:	f000 fe61 	bl	8003024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002362:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002368:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800236c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002372:	f107 0314 	add.w	r3, r7, #20
 8002376:	4619      	mov	r1, r3
 8002378:	482e      	ldr	r0, [pc, #184]	; (8002434 <MX_GPIO_Init+0x17c>)
 800237a:	f000 fcbf 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800237e:	230c      	movs	r3, #12
 8002380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002382:	2302      	movs	r3, #2
 8002384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238a:	2303      	movs	r3, #3
 800238c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800238e:	2307      	movs	r3, #7
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002392:	f107 0314 	add.w	r3, r7, #20
 8002396:	4619      	mov	r1, r3
 8002398:	4825      	ldr	r0, [pc, #148]	; (8002430 <MX_GPIO_Init+0x178>)
 800239a:	f000 fcaf 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA11 PA12 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_11|GPIO_PIN_12;
 800239e:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 80023a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a4:	2301      	movs	r3, #1
 80023a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ac:	2300      	movs	r3, #0
 80023ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b0:	f107 0314 	add.w	r3, r7, #20
 80023b4:	4619      	mov	r1, r3
 80023b6:	481e      	ldr	r0, [pc, #120]	; (8002430 <MX_GPIO_Init+0x178>)
 80023b8:	f000 fca0 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC5 PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8;
 80023bc:	f44f 73b0 	mov.w	r3, #352	; 0x160
 80023c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023c2:	2301      	movs	r3, #1
 80023c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ca:	2300      	movs	r3, #0
 80023cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ce:	f107 0314 	add.w	r3, r7, #20
 80023d2:	4619      	mov	r1, r3
 80023d4:	4817      	ldr	r0, [pc, #92]	; (8002434 <MX_GPIO_Init+0x17c>)
 80023d6:	f000 fc91 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80023da:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80023de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023e0:	2301      	movs	r3, #1
 80023e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e8:	2300      	movs	r3, #0
 80023ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ec:	f107 0314 	add.w	r3, r7, #20
 80023f0:	4619      	mov	r1, r3
 80023f2:	4811      	ldr	r0, [pc, #68]	; (8002438 <MX_GPIO_Init+0x180>)
 80023f4:	f000 fc82 	bl	8002cfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80023f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80023fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002402:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002408:	f107 0314 	add.w	r3, r7, #20
 800240c:	4619      	mov	r1, r3
 800240e:	480a      	ldr	r0, [pc, #40]	; (8002438 <MX_GPIO_Init+0x180>)
 8002410:	f000 fc74 	bl	8002cfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002414:	2200      	movs	r2, #0
 8002416:	2100      	movs	r1, #0
 8002418:	2028      	movs	r0, #40	; 0x28
 800241a:	f000 fc38 	bl	8002c8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800241e:	2028      	movs	r0, #40	; 0x28
 8002420:	f000 fc51 	bl	8002cc6 <HAL_NVIC_EnableIRQ>

}
 8002424:	bf00      	nop
 8002426:	3728      	adds	r7, #40	; 0x28
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40023800 	.word	0x40023800
 8002430:	40020000 	.word	0x40020000
 8002434:	40020800 	.word	0x40020800
 8002438:	40020400 	.word	0x40020400

0800243c <checkData>:

/* USER CODE BEGIN 4 */
bool checkData(DeviceData *deviceData, DeviceData *deviceDataCached)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
	if (deviceData->BH1750_Lumens != deviceDataCached->BH1750_Lumens)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	899a      	ldrh	r2, [r3, #12]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	899b      	ldrh	r3, [r3, #12]
 800244e:	429a      	cmp	r2, r3
 8002450:	d001      	beq.n	8002456 <checkData+0x1a>
		return true;
 8002452:	2301      	movs	r3, #1
 8002454:	e027      	b.n	80024a6 <checkData+0x6a>
	else if (deviceData->BMP280_Pressure != deviceDataCached->BMP280_Pressure)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	ed93 7a02 	vldr	s14, [r3, #8]
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002462:	eeb4 7a67 	vcmp.f32	s14, s15
 8002466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800246a:	d001      	beq.n	8002470 <checkData+0x34>
		return true;
 800246c:	2301      	movs	r3, #1
 800246e:	e01a      	b.n	80024a6 <checkData+0x6a>
	else if (deviceData->HTU21D_Humidity != deviceDataCached->HTU21D_Humidity)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	ed93 7a01 	vldr	s14, [r3, #4]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	edd3 7a01 	vldr	s15, [r3, #4]
 800247c:	eeb4 7a67 	vcmp.f32	s14, s15
 8002480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002484:	d001      	beq.n	800248a <checkData+0x4e>
		return true;
 8002486:	2301      	movs	r3, #1
 8002488:	e00d      	b.n	80024a6 <checkData+0x6a>
	else if (deviceData->HTU21D_Temperature != deviceDataCached->HTU21D_Temperature)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	ed93 7a00 	vldr	s14, [r3]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	edd3 7a00 	vldr	s15, [r3]
 8002496:	eeb4 7a67 	vcmp.f32	s14, s15
 800249a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800249e:	d001      	beq.n	80024a4 <checkData+0x68>
		return true;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e000      	b.n	80024a6 <checkData+0x6a>

	return false;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
	...

080024b4 <displayOnLCD>:

void displayOnLCD(DeviceData *deviceData)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b090      	sub	sp, #64	; 0x40
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
	// L: lm
	// T: C
	// H: %
	// P: hPa
	char LCD_Data_Lumen[3] = "";
 80024bc:	4b4e      	ldr	r3, [pc, #312]	; (80025f8 <displayOnLCD+0x144>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 80024c4:	f107 033d 	add.w	r3, r7, #61	; 0x3d
 80024c8:	2200      	movs	r2, #0
 80024ca:	801a      	strh	r2, [r3, #0]
	char LCD_Data_Lumen_2[8]="";
 80024cc:	2300      	movs	r3, #0
 80024ce:	637b      	str	r3, [r7, #52]	; 0x34
 80024d0:	2300      	movs	r3, #0
 80024d2:	63bb      	str	r3, [r7, #56]	; 0x38

	char LCD_Data_Temperature[2] = "";
 80024d4:	2300      	movs	r3, #0
 80024d6:	863b      	strh	r3, [r7, #48]	; 0x30
	char LCD_Data_Temperature_2[8]="";
 80024d8:	2300      	movs	r3, #0
 80024da:	62bb      	str	r3, [r7, #40]	; 0x28
 80024dc:	2300      	movs	r3, #0
 80024de:	62fb      	str	r3, [r7, #44]	; 0x2c

	char LCD_Data_Humidity[2] = "";
 80024e0:	2300      	movs	r3, #0
 80024e2:	84bb      	strh	r3, [r7, #36]	; 0x24
	char LCD_Data_Humidity_2[8]="";
 80024e4:	2300      	movs	r3, #0
 80024e6:	61fb      	str	r3, [r7, #28]
 80024e8:	2300      	movs	r3, #0
 80024ea:	623b      	str	r3, [r7, #32]

	char LCD_Data_Pressure[5] = "";
 80024ec:	2300      	movs	r3, #0
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	2300      	movs	r3, #0
 80024f2:	763b      	strb	r3, [r7, #24]
	char LCD_Data_Pressure_2[10]="";
 80024f4:	2300      	movs	r3, #0
 80024f6:	60bb      	str	r3, [r7, #8]
 80024f8:	f107 030c 	add.w	r3, r7, #12
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	809a      	strh	r2, [r3, #4]

	itoa(deviceData->BH1750_Lumens, LCD_Data_Lumen, 10);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	899b      	ldrh	r3, [r3, #12]
 8002506:	4618      	mov	r0, r3
 8002508:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800250c:	220a      	movs	r2, #10
 800250e:	4619      	mov	r1, r3
 8002510:	f003 fade 	bl	8005ad0 <itoa>
	sprintf(LCD_Data_Lumen_2, "L:%s", LCD_Data_Lumen);
 8002514:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002518:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800251c:	4937      	ldr	r1, [pc, #220]	; (80025fc <displayOnLCD+0x148>)
 800251e:	4618      	mov	r0, r3
 8002520:	f003 fbb2 	bl	8005c88 <siprintf>

	itoa((int)deviceData->HTU21D_Temperature,LCD_Data_Temperature, 10);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	edd3 7a00 	vldr	s15, [r3]
 800252a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800252e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002532:	220a      	movs	r2, #10
 8002534:	4619      	mov	r1, r3
 8002536:	ee17 0a90 	vmov	r0, s15
 800253a:	f003 fac9 	bl	8005ad0 <itoa>
	sprintf(LCD_Data_Temperature_2, "T:%sC", LCD_Data_Temperature);
 800253e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002542:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002546:	492e      	ldr	r1, [pc, #184]	; (8002600 <displayOnLCD+0x14c>)
 8002548:	4618      	mov	r0, r3
 800254a:	f003 fb9d 	bl	8005c88 <siprintf>

	itoa((int)deviceData->HTU21D_Humidity,LCD_Data_Humidity, 10);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	edd3 7a01 	vldr	s15, [r3, #4]
 8002554:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800255c:	220a      	movs	r2, #10
 800255e:	4619      	mov	r1, r3
 8002560:	ee17 0a90 	vmov	r0, s15
 8002564:	f003 fab4 	bl	8005ad0 <itoa>
	sprintf(LCD_Data_Humidity_2, "H:%s%%", LCD_Data_Humidity);
 8002568:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800256c:	f107 031c 	add.w	r3, r7, #28
 8002570:	4924      	ldr	r1, [pc, #144]	; (8002604 <displayOnLCD+0x150>)
 8002572:	4618      	mov	r0, r3
 8002574:	f003 fb88 	bl	8005c88 <siprintf>

	itoa((int)deviceData->BMP280_Pressure,LCD_Data_Pressure, 10);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	edd3 7a02 	vldr	s15, [r3, #8]
 800257e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002582:	f107 0314 	add.w	r3, r7, #20
 8002586:	220a      	movs	r2, #10
 8002588:	4619      	mov	r1, r3
 800258a:	ee17 0a90 	vmov	r0, s15
 800258e:	f003 fa9f 	bl	8005ad0 <itoa>
	sprintf(LCD_Data_Pressure_2, "P:%shPa", LCD_Data_Pressure);
 8002592:	f107 0214 	add.w	r2, r7, #20
 8002596:	f107 0308 	add.w	r3, r7, #8
 800259a:	491b      	ldr	r1, [pc, #108]	; (8002608 <displayOnLCD+0x154>)
 800259c:	4618      	mov	r0, r3
 800259e:	f003 fb73 	bl	8005c88 <siprintf>

	LCD_Clear();
 80025a2:	f7ff fb94 	bl	8001cce <LCD_Clear>

	LCD_Set_Cursor(1,1);
 80025a6:	2101      	movs	r1, #1
 80025a8:	2001      	movs	r0, #1
 80025aa:	f7ff fb57 	bl	8001c5c <LCD_Set_Cursor>
	LCD_Write_String(LCD_Data_Lumen_2);
 80025ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7ff fc90 	bl	8001ed8 <LCD_Write_String>

	LCD_Set_Cursor(1,8);
 80025b8:	2108      	movs	r1, #8
 80025ba:	2001      	movs	r0, #1
 80025bc:	f7ff fb4e 	bl	8001c5c <LCD_Set_Cursor>
	LCD_Write_String(LCD_Data_Temperature_2);
 80025c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff fc87 	bl	8001ed8 <LCD_Write_String>

	LCD_Set_Cursor(2,1);
 80025ca:	2101      	movs	r1, #1
 80025cc:	2002      	movs	r0, #2
 80025ce:	f7ff fb45 	bl	8001c5c <LCD_Set_Cursor>
	LCD_Write_String(LCD_Data_Humidity_2);
 80025d2:	f107 031c 	add.w	r3, r7, #28
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff fc7e 	bl	8001ed8 <LCD_Write_String>

	LCD_Set_Cursor(2,8);
 80025dc:	2108      	movs	r1, #8
 80025de:	2002      	movs	r0, #2
 80025e0:	f7ff fb3c 	bl	8001c5c <LCD_Set_Cursor>
	LCD_Write_String(LCD_Data_Pressure_2);
 80025e4:	f107 0308 	add.w	r3, r7, #8
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fc75 	bl	8001ed8 <LCD_Write_String>
}
 80025ee:	bf00      	nop
 80025f0:	3740      	adds	r7, #64	; 0x40
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	080064b0 	.word	0x080064b0
 80025fc:	08006490 	.word	0x08006490
 8002600:	08006498 	.word	0x08006498
 8002604:	080064a0 	.word	0x080064a0
 8002608:	080064a8 	.word	0x080064a8

0800260c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002610:	b672      	cpsid	i
}
 8002612:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002614:	e7fe      	b.n	8002614 <Error_Handler+0x8>
	...

08002618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	607b      	str	r3, [r7, #4]
 8002622:	4b10      	ldr	r3, [pc, #64]	; (8002664 <HAL_MspInit+0x4c>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002626:	4a0f      	ldr	r2, [pc, #60]	; (8002664 <HAL_MspInit+0x4c>)
 8002628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800262c:	6453      	str	r3, [r2, #68]	; 0x44
 800262e:	4b0d      	ldr	r3, [pc, #52]	; (8002664 <HAL_MspInit+0x4c>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002636:	607b      	str	r3, [r7, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	603b      	str	r3, [r7, #0]
 800263e:	4b09      	ldr	r3, [pc, #36]	; (8002664 <HAL_MspInit+0x4c>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	4a08      	ldr	r2, [pc, #32]	; (8002664 <HAL_MspInit+0x4c>)
 8002644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002648:	6413      	str	r3, [r2, #64]	; 0x40
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_MspInit+0x4c>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002656:	2007      	movs	r0, #7
 8002658:	f000 fb0e 	bl	8002c78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800265c:	bf00      	nop
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40023800 	.word	0x40023800

08002668 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08c      	sub	sp, #48	; 0x30
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002670:	f107 031c 	add.w	r3, r7, #28
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	60da      	str	r2, [r3, #12]
 800267e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a42      	ldr	r2, [pc, #264]	; (8002790 <HAL_I2C_MspInit+0x128>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d12d      	bne.n	80026e6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	61bb      	str	r3, [r7, #24]
 800268e:	4b41      	ldr	r3, [pc, #260]	; (8002794 <HAL_I2C_MspInit+0x12c>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	4a40      	ldr	r2, [pc, #256]	; (8002794 <HAL_I2C_MspInit+0x12c>)
 8002694:	f043 0302 	orr.w	r3, r3, #2
 8002698:	6313      	str	r3, [r2, #48]	; 0x30
 800269a:	4b3e      	ldr	r3, [pc, #248]	; (8002794 <HAL_I2C_MspInit+0x12c>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	61bb      	str	r3, [r7, #24]
 80026a4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026ac:	2312      	movs	r3, #18
 80026ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b0:	2300      	movs	r3, #0
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b4:	2303      	movs	r3, #3
 80026b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026b8:	2304      	movs	r3, #4
 80026ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026bc:	f107 031c 	add.w	r3, r7, #28
 80026c0:	4619      	mov	r1, r3
 80026c2:	4835      	ldr	r0, [pc, #212]	; (8002798 <HAL_I2C_MspInit+0x130>)
 80026c4:	f000 fb1a 	bl	8002cfc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026c8:	2300      	movs	r3, #0
 80026ca:	617b      	str	r3, [r7, #20]
 80026cc:	4b31      	ldr	r3, [pc, #196]	; (8002794 <HAL_I2C_MspInit+0x12c>)
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	4a30      	ldr	r2, [pc, #192]	; (8002794 <HAL_I2C_MspInit+0x12c>)
 80026d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026d6:	6413      	str	r3, [r2, #64]	; 0x40
 80026d8:	4b2e      	ldr	r3, [pc, #184]	; (8002794 <HAL_I2C_MspInit+0x12c>)
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80026e4:	e04f      	b.n	8002786 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a2c      	ldr	r2, [pc, #176]	; (800279c <HAL_I2C_MspInit+0x134>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d14a      	bne.n	8002786 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f0:	2300      	movs	r3, #0
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	4b27      	ldr	r3, [pc, #156]	; (8002794 <HAL_I2C_MspInit+0x12c>)
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	4a26      	ldr	r2, [pc, #152]	; (8002794 <HAL_I2C_MspInit+0x12c>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002700:	4b24      	ldr	r3, [pc, #144]	; (8002794 <HAL_I2C_MspInit+0x12c>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800270c:	2300      	movs	r3, #0
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	4b20      	ldr	r3, [pc, #128]	; (8002794 <HAL_I2C_MspInit+0x12c>)
 8002712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002714:	4a1f      	ldr	r2, [pc, #124]	; (8002794 <HAL_I2C_MspInit+0x12c>)
 8002716:	f043 0302 	orr.w	r3, r3, #2
 800271a:	6313      	str	r3, [r2, #48]	; 0x30
 800271c:	4b1d      	ldr	r3, [pc, #116]	; (8002794 <HAL_I2C_MspInit+0x12c>)
 800271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002728:	f44f 7380 	mov.w	r3, #256	; 0x100
 800272c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800272e:	2312      	movs	r3, #18
 8002730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002732:	2300      	movs	r3, #0
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002736:	2303      	movs	r3, #3
 8002738:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800273a:	2304      	movs	r3, #4
 800273c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273e:	f107 031c 	add.w	r3, r7, #28
 8002742:	4619      	mov	r1, r3
 8002744:	4816      	ldr	r0, [pc, #88]	; (80027a0 <HAL_I2C_MspInit+0x138>)
 8002746:	f000 fad9 	bl	8002cfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800274a:	2310      	movs	r3, #16
 800274c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800274e:	2312      	movs	r3, #18
 8002750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002752:	2300      	movs	r3, #0
 8002754:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002756:	2303      	movs	r3, #3
 8002758:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800275a:	2304      	movs	r3, #4
 800275c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800275e:	f107 031c 	add.w	r3, r7, #28
 8002762:	4619      	mov	r1, r3
 8002764:	480c      	ldr	r0, [pc, #48]	; (8002798 <HAL_I2C_MspInit+0x130>)
 8002766:	f000 fac9 	bl	8002cfc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	4b09      	ldr	r3, [pc, #36]	; (8002794 <HAL_I2C_MspInit+0x12c>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4a08      	ldr	r2, [pc, #32]	; (8002794 <HAL_I2C_MspInit+0x12c>)
 8002774:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002778:	6413      	str	r3, [r2, #64]	; 0x40
 800277a:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_I2C_MspInit+0x12c>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002782:	60bb      	str	r3, [r7, #8]
 8002784:	68bb      	ldr	r3, [r7, #8]
}
 8002786:	bf00      	nop
 8002788:	3730      	adds	r7, #48	; 0x30
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40005400 	.word	0x40005400
 8002794:	40023800 	.word	0x40023800
 8002798:	40020400 	.word	0x40020400
 800279c:	40005c00 	.word	0x40005c00
 80027a0:	40020000 	.word	0x40020000

080027a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	; 0x28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	f107 0314 	add.w	r3, r7, #20
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a19      	ldr	r2, [pc, #100]	; (8002828 <HAL_UART_MspInit+0x84>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d12c      	bne.n	8002820 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	4b18      	ldr	r3, [pc, #96]	; (800282c <HAL_UART_MspInit+0x88>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	4a17      	ldr	r2, [pc, #92]	; (800282c <HAL_UART_MspInit+0x88>)
 80027d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027d4:	6413      	str	r3, [r2, #64]	; 0x40
 80027d6:	4b15      	ldr	r3, [pc, #84]	; (800282c <HAL_UART_MspInit+0x88>)
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	4b11      	ldr	r3, [pc, #68]	; (800282c <HAL_UART_MspInit+0x88>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	4a10      	ldr	r2, [pc, #64]	; (800282c <HAL_UART_MspInit+0x88>)
 80027ec:	f043 0304 	orr.w	r3, r3, #4
 80027f0:	6313      	str	r3, [r2, #48]	; 0x30
 80027f2:	4b0e      	ldr	r3, [pc, #56]	; (800282c <HAL_UART_MspInit+0x88>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80027fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002804:	2302      	movs	r3, #2
 8002806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002808:	2300      	movs	r3, #0
 800280a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800280c:	2303      	movs	r3, #3
 800280e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002810:	2307      	movs	r3, #7
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002814:	f107 0314 	add.w	r3, r7, #20
 8002818:	4619      	mov	r1, r3
 800281a:	4805      	ldr	r0, [pc, #20]	; (8002830 <HAL_UART_MspInit+0x8c>)
 800281c:	f000 fa6e 	bl	8002cfc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002820:	bf00      	nop
 8002822:	3728      	adds	r7, #40	; 0x28
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40004800 	.word	0x40004800
 800282c:	40023800 	.word	0x40023800
 8002830:	40020800 	.word	0x40020800

08002834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002838:	e7fe      	b.n	8002838 <NMI_Handler+0x4>

0800283a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800283a:	b480      	push	{r7}
 800283c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800283e:	e7fe      	b.n	800283e <HardFault_Handler+0x4>

08002840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002844:	e7fe      	b.n	8002844 <MemManage_Handler+0x4>

08002846 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002846:	b480      	push	{r7}
 8002848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800284a:	e7fe      	b.n	800284a <BusFault_Handler+0x4>

0800284c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002850:	e7fe      	b.n	8002850 <UsageFault_Handler+0x4>

08002852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002852:	b480      	push	{r7}
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800286e:	b480      	push	{r7}
 8002870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002872:	bf00      	nop
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002880:	f000 f8e6 	bl	8002a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002884:	bf00      	nop
 8002886:	bd80      	pop	{r7, pc}

08002888 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800288c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002890:	f000 fbfc 	bl	800308c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002894:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002898:	f000 fbf8 	bl	800308c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800289c:	2120      	movs	r1, #32
 800289e:	4808      	ldr	r0, [pc, #32]	; (80028c0 <EXTI15_10_IRQHandler+0x38>)
 80028a0:	f000 fbd9 	bl	8003056 <HAL_GPIO_TogglePin>
  if (measureData !=1)
 80028a4:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <EXTI15_10_IRQHandler+0x3c>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d003      	beq.n	80028b4 <EXTI15_10_IRQHandler+0x2c>
	  // TODO: add log
	  measureData = 1;
 80028ac:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <EXTI15_10_IRQHandler+0x3c>)
 80028ae:	2201      	movs	r2, #1
 80028b0:	701a      	strb	r2, [r3, #0]
  else
	  // TODO: add log
	  measureData = 0;
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80028b2:	e002      	b.n	80028ba <EXTI15_10_IRQHandler+0x32>
	  measureData = 0;
 80028b4:	4b03      	ldr	r3, [pc, #12]	; (80028c4 <EXTI15_10_IRQHandler+0x3c>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	701a      	strb	r2, [r3, #0]
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40020000 	.word	0x40020000
 80028c4:	2000008c 	.word	0x2000008c

080028c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028d0:	4a14      	ldr	r2, [pc, #80]	; (8002924 <_sbrk+0x5c>)
 80028d2:	4b15      	ldr	r3, [pc, #84]	; (8002928 <_sbrk+0x60>)
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028dc:	4b13      	ldr	r3, [pc, #76]	; (800292c <_sbrk+0x64>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d102      	bne.n	80028ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028e4:	4b11      	ldr	r3, [pc, #68]	; (800292c <_sbrk+0x64>)
 80028e6:	4a12      	ldr	r2, [pc, #72]	; (8002930 <_sbrk+0x68>)
 80028e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ea:	4b10      	ldr	r3, [pc, #64]	; (800292c <_sbrk+0x64>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4413      	add	r3, r2
 80028f2:	693a      	ldr	r2, [r7, #16]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d207      	bcs.n	8002908 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028f8:	f003 f8a8 	bl	8005a4c <__errno>
 80028fc:	4603      	mov	r3, r0
 80028fe:	220c      	movs	r2, #12
 8002900:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002902:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002906:	e009      	b.n	800291c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002908:	4b08      	ldr	r3, [pc, #32]	; (800292c <_sbrk+0x64>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800290e:	4b07      	ldr	r3, [pc, #28]	; (800292c <_sbrk+0x64>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4413      	add	r3, r2
 8002916:	4a05      	ldr	r2, [pc, #20]	; (800292c <_sbrk+0x64>)
 8002918:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800291a:	68fb      	ldr	r3, [r7, #12]
}
 800291c:	4618      	mov	r0, r3
 800291e:	3718      	adds	r7, #24
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	20020000 	.word	0x20020000
 8002928:	00000400 	.word	0x00000400
 800292c:	20000090 	.word	0x20000090
 8002930:	200001a0 	.word	0x200001a0

08002934 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002938:	4b06      	ldr	r3, [pc, #24]	; (8002954 <SystemInit+0x20>)
 800293a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293e:	4a05      	ldr	r2, [pc, #20]	; (8002954 <SystemInit+0x20>)
 8002940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002944:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002948:	bf00      	nop
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop
 8002954:	e000ed00 	.word	0xe000ed00

08002958 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002958:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002990 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800295c:	480d      	ldr	r0, [pc, #52]	; (8002994 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800295e:	490e      	ldr	r1, [pc, #56]	; (8002998 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002960:	4a0e      	ldr	r2, [pc, #56]	; (800299c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002964:	e002      	b.n	800296c <LoopCopyDataInit>

08002966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800296a:	3304      	adds	r3, #4

0800296c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800296c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800296e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002970:	d3f9      	bcc.n	8002966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002972:	4a0b      	ldr	r2, [pc, #44]	; (80029a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002974:	4c0b      	ldr	r4, [pc, #44]	; (80029a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002978:	e001      	b.n	800297e <LoopFillZerobss>

0800297a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800297a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800297c:	3204      	adds	r2, #4

0800297e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800297e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002980:	d3fb      	bcc.n	800297a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002982:	f7ff ffd7 	bl	8002934 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002986:	f003 f867 	bl	8005a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800298a:	f7ff fac1 	bl	8001f10 <main>
  bx  lr    
 800298e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002990:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002994:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002998:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800299c:	08006534 	.word	0x08006534
  ldr r2, =_sbss
 80029a0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80029a4:	2000019c 	.word	0x2000019c

080029a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029a8:	e7fe      	b.n	80029a8 <ADC_IRQHandler>
	...

080029ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029b0:	4b0e      	ldr	r3, [pc, #56]	; (80029ec <HAL_Init+0x40>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a0d      	ldr	r2, [pc, #52]	; (80029ec <HAL_Init+0x40>)
 80029b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029bc:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <HAL_Init+0x40>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a0a      	ldr	r2, [pc, #40]	; (80029ec <HAL_Init+0x40>)
 80029c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029c8:	4b08      	ldr	r3, [pc, #32]	; (80029ec <HAL_Init+0x40>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a07      	ldr	r2, [pc, #28]	; (80029ec <HAL_Init+0x40>)
 80029ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029d4:	2003      	movs	r0, #3
 80029d6:	f000 f94f 	bl	8002c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029da:	2000      	movs	r0, #0
 80029dc:	f000 f808 	bl	80029f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029e0:	f7ff fe1a 	bl	8002618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40023c00 	.word	0x40023c00

080029f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029f8:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <HAL_InitTick+0x54>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <HAL_InitTick+0x58>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	4619      	mov	r1, r3
 8002a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 f967 	bl	8002ce2 <HAL_SYSTICK_Config>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e00e      	b.n	8002a3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b0f      	cmp	r3, #15
 8002a22:	d80a      	bhi.n	8002a3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a24:	2200      	movs	r2, #0
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a2c:	f000 f92f 	bl	8002c8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a30:	4a06      	ldr	r2, [pc, #24]	; (8002a4c <HAL_InitTick+0x5c>)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	e000      	b.n	8002a3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20000000 	.word	0x20000000
 8002a48:	20000008 	.word	0x20000008
 8002a4c:	20000004 	.word	0x20000004

08002a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a54:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <HAL_IncTick+0x20>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <HAL_IncTick+0x24>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4413      	add	r3, r2
 8002a60:	4a04      	ldr	r2, [pc, #16]	; (8002a74 <HAL_IncTick+0x24>)
 8002a62:	6013      	str	r3, [r2, #0]
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	20000008 	.word	0x20000008
 8002a74:	20000188 	.word	0x20000188

08002a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a7c:	4b03      	ldr	r3, [pc, #12]	; (8002a8c <HAL_GetTick+0x14>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	20000188 	.word	0x20000188

08002a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a98:	f7ff ffee 	bl	8002a78 <HAL_GetTick>
 8002a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002aa8:	d005      	beq.n	8002ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aaa:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <HAL_Delay+0x44>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4413      	add	r3, r2
 8002ab4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ab6:	bf00      	nop
 8002ab8:	f7ff ffde 	bl	8002a78 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d8f7      	bhi.n	8002ab8 <HAL_Delay+0x28>
  {
  }
}
 8002ac8:	bf00      	nop
 8002aca:	bf00      	nop
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000008 	.word	0x20000008

08002ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f003 0307 	and.w	r3, r3, #7
 8002ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <__NVIC_SetPriorityGrouping+0x44>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002af4:	4013      	ands	r3, r2
 8002af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b0a:	4a04      	ldr	r2, [pc, #16]	; (8002b1c <__NVIC_SetPriorityGrouping+0x44>)
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	60d3      	str	r3, [r2, #12]
}
 8002b10:	bf00      	nop
 8002b12:	3714      	adds	r7, #20
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <__NVIC_GetPriorityGrouping+0x18>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	0a1b      	lsrs	r3, r3, #8
 8002b2a:	f003 0307 	and.w	r3, r3, #7
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	4603      	mov	r3, r0
 8002b44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	db0b      	blt.n	8002b66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b4e:	79fb      	ldrb	r3, [r7, #7]
 8002b50:	f003 021f 	and.w	r2, r3, #31
 8002b54:	4907      	ldr	r1, [pc, #28]	; (8002b74 <__NVIC_EnableIRQ+0x38>)
 8002b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5a:	095b      	lsrs	r3, r3, #5
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	e000e100 	.word	0xe000e100

08002b78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	4603      	mov	r3, r0
 8002b80:	6039      	str	r1, [r7, #0]
 8002b82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	db0a      	blt.n	8002ba2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	490c      	ldr	r1, [pc, #48]	; (8002bc4 <__NVIC_SetPriority+0x4c>)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	0112      	lsls	r2, r2, #4
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ba0:	e00a      	b.n	8002bb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	b2da      	uxtb	r2, r3
 8002ba6:	4908      	ldr	r1, [pc, #32]	; (8002bc8 <__NVIC_SetPriority+0x50>)
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	3b04      	subs	r3, #4
 8002bb0:	0112      	lsls	r2, r2, #4
 8002bb2:	b2d2      	uxtb	r2, r2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	761a      	strb	r2, [r3, #24]
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000e100 	.word	0xe000e100
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b089      	sub	sp, #36	; 0x24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f003 0307 	and.w	r3, r3, #7
 8002bde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f1c3 0307 	rsb	r3, r3, #7
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	bf28      	it	cs
 8002bea:	2304      	movcs	r3, #4
 8002bec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	2b06      	cmp	r3, #6
 8002bf4:	d902      	bls.n	8002bfc <NVIC_EncodePriority+0x30>
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	3b03      	subs	r3, #3
 8002bfa:	e000      	b.n	8002bfe <NVIC_EncodePriority+0x32>
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0a:	43da      	mvns	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	401a      	ands	r2, r3
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1e:	43d9      	mvns	r1, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c24:	4313      	orrs	r3, r2
         );
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3724      	adds	r7, #36	; 0x24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
	...

08002c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c44:	d301      	bcc.n	8002c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c46:	2301      	movs	r3, #1
 8002c48:	e00f      	b.n	8002c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c4a:	4a0a      	ldr	r2, [pc, #40]	; (8002c74 <SysTick_Config+0x40>)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c52:	210f      	movs	r1, #15
 8002c54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c58:	f7ff ff8e 	bl	8002b78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <SysTick_Config+0x40>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c62:	4b04      	ldr	r3, [pc, #16]	; (8002c74 <SysTick_Config+0x40>)
 8002c64:	2207      	movs	r2, #7
 8002c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	e000e010 	.word	0xe000e010

08002c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff ff29 	bl	8002ad8 <__NVIC_SetPriorityGrouping>
}
 8002c86:	bf00      	nop
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}

08002c8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b086      	sub	sp, #24
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	4603      	mov	r3, r0
 8002c96:	60b9      	str	r1, [r7, #8]
 8002c98:	607a      	str	r2, [r7, #4]
 8002c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ca0:	f7ff ff3e 	bl	8002b20 <__NVIC_GetPriorityGrouping>
 8002ca4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	6978      	ldr	r0, [r7, #20]
 8002cac:	f7ff ff8e 	bl	8002bcc <NVIC_EncodePriority>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb6:	4611      	mov	r1, r2
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff ff5d 	bl	8002b78 <__NVIC_SetPriority>
}
 8002cbe:	bf00      	nop
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b082      	sub	sp, #8
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	4603      	mov	r3, r0
 8002cce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff ff31 	bl	8002b3c <__NVIC_EnableIRQ>
}
 8002cda:	bf00      	nop
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b082      	sub	sp, #8
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7ff ffa2 	bl	8002c34 <SysTick_Config>
 8002cf0:	4603      	mov	r3, r0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
	...

08002cfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b089      	sub	sp, #36	; 0x24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
 8002d16:	e165      	b.n	8002fe4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d18:	2201      	movs	r2, #1
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d2c:	693a      	ldr	r2, [r7, #16]
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	f040 8154 	bne.w	8002fde <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d005      	beq.n	8002d4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d130      	bne.n	8002db0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	2203      	movs	r2, #3
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4013      	ands	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d84:	2201      	movs	r2, #1
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	091b      	lsrs	r3, r3, #4
 8002d9a:	f003 0201 	and.w	r2, r3, #1
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 0303 	and.w	r3, r3, #3
 8002db8:	2b03      	cmp	r3, #3
 8002dba:	d017      	beq.n	8002dec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 0303 	and.w	r3, r3, #3
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d123      	bne.n	8002e40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	08da      	lsrs	r2, r3, #3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3208      	adds	r2, #8
 8002e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	220f      	movs	r2, #15
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43db      	mvns	r3, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	08da      	lsrs	r2, r3, #3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3208      	adds	r2, #8
 8002e3a:	69b9      	ldr	r1, [r7, #24]
 8002e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	2203      	movs	r2, #3
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 0203 	and.w	r2, r3, #3
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 80ae 	beq.w	8002fde <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]
 8002e86:	4b5d      	ldr	r3, [pc, #372]	; (8002ffc <HAL_GPIO_Init+0x300>)
 8002e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8a:	4a5c      	ldr	r2, [pc, #368]	; (8002ffc <HAL_GPIO_Init+0x300>)
 8002e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e90:	6453      	str	r3, [r2, #68]	; 0x44
 8002e92:	4b5a      	ldr	r3, [pc, #360]	; (8002ffc <HAL_GPIO_Init+0x300>)
 8002e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e9e:	4a58      	ldr	r2, [pc, #352]	; (8003000 <HAL_GPIO_Init+0x304>)
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	089b      	lsrs	r3, r3, #2
 8002ea4:	3302      	adds	r3, #2
 8002ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	220f      	movs	r2, #15
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a4f      	ldr	r2, [pc, #316]	; (8003004 <HAL_GPIO_Init+0x308>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d025      	beq.n	8002f16 <HAL_GPIO_Init+0x21a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a4e      	ldr	r2, [pc, #312]	; (8003008 <HAL_GPIO_Init+0x30c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d01f      	beq.n	8002f12 <HAL_GPIO_Init+0x216>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a4d      	ldr	r2, [pc, #308]	; (800300c <HAL_GPIO_Init+0x310>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d019      	beq.n	8002f0e <HAL_GPIO_Init+0x212>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a4c      	ldr	r2, [pc, #304]	; (8003010 <HAL_GPIO_Init+0x314>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d013      	beq.n	8002f0a <HAL_GPIO_Init+0x20e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a4b      	ldr	r2, [pc, #300]	; (8003014 <HAL_GPIO_Init+0x318>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d00d      	beq.n	8002f06 <HAL_GPIO_Init+0x20a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a4a      	ldr	r2, [pc, #296]	; (8003018 <HAL_GPIO_Init+0x31c>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d007      	beq.n	8002f02 <HAL_GPIO_Init+0x206>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a49      	ldr	r2, [pc, #292]	; (800301c <HAL_GPIO_Init+0x320>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d101      	bne.n	8002efe <HAL_GPIO_Init+0x202>
 8002efa:	2306      	movs	r3, #6
 8002efc:	e00c      	b.n	8002f18 <HAL_GPIO_Init+0x21c>
 8002efe:	2307      	movs	r3, #7
 8002f00:	e00a      	b.n	8002f18 <HAL_GPIO_Init+0x21c>
 8002f02:	2305      	movs	r3, #5
 8002f04:	e008      	b.n	8002f18 <HAL_GPIO_Init+0x21c>
 8002f06:	2304      	movs	r3, #4
 8002f08:	e006      	b.n	8002f18 <HAL_GPIO_Init+0x21c>
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e004      	b.n	8002f18 <HAL_GPIO_Init+0x21c>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e002      	b.n	8002f18 <HAL_GPIO_Init+0x21c>
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <HAL_GPIO_Init+0x21c>
 8002f16:	2300      	movs	r3, #0
 8002f18:	69fa      	ldr	r2, [r7, #28]
 8002f1a:	f002 0203 	and.w	r2, r2, #3
 8002f1e:	0092      	lsls	r2, r2, #2
 8002f20:	4093      	lsls	r3, r2
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f28:	4935      	ldr	r1, [pc, #212]	; (8003000 <HAL_GPIO_Init+0x304>)
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	089b      	lsrs	r3, r3, #2
 8002f2e:	3302      	adds	r3, #2
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f36:	4b3a      	ldr	r3, [pc, #232]	; (8003020 <HAL_GPIO_Init+0x324>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4013      	ands	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d003      	beq.n	8002f5a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f5a:	4a31      	ldr	r2, [pc, #196]	; (8003020 <HAL_GPIO_Init+0x324>)
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f60:	4b2f      	ldr	r3, [pc, #188]	; (8003020 <HAL_GPIO_Init+0x324>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	43db      	mvns	r3, r3
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f84:	4a26      	ldr	r2, [pc, #152]	; (8003020 <HAL_GPIO_Init+0x324>)
 8002f86:	69bb      	ldr	r3, [r7, #24]
 8002f88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f8a:	4b25      	ldr	r3, [pc, #148]	; (8003020 <HAL_GPIO_Init+0x324>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fae:	4a1c      	ldr	r2, [pc, #112]	; (8003020 <HAL_GPIO_Init+0x324>)
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fb4:	4b1a      	ldr	r3, [pc, #104]	; (8003020 <HAL_GPIO_Init+0x324>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	43db      	mvns	r3, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fd8:	4a11      	ldr	r2, [pc, #68]	; (8003020 <HAL_GPIO_Init+0x324>)
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	61fb      	str	r3, [r7, #28]
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	2b0f      	cmp	r3, #15
 8002fe8:	f67f ae96 	bls.w	8002d18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fec:	bf00      	nop
 8002fee:	bf00      	nop
 8002ff0:	3724      	adds	r7, #36	; 0x24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40013800 	.word	0x40013800
 8003004:	40020000 	.word	0x40020000
 8003008:	40020400 	.word	0x40020400
 800300c:	40020800 	.word	0x40020800
 8003010:	40020c00 	.word	0x40020c00
 8003014:	40021000 	.word	0x40021000
 8003018:	40021400 	.word	0x40021400
 800301c:	40021800 	.word	0x40021800
 8003020:	40013c00 	.word	0x40013c00

08003024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	460b      	mov	r3, r1
 800302e:	807b      	strh	r3, [r7, #2]
 8003030:	4613      	mov	r3, r2
 8003032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003034:	787b      	ldrb	r3, [r7, #1]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800303a:	887a      	ldrh	r2, [r7, #2]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003040:	e003      	b.n	800304a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003042:	887b      	ldrh	r3, [r7, #2]
 8003044:	041a      	lsls	r2, r3, #16
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	619a      	str	r2, [r3, #24]
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003056:	b480      	push	{r7}
 8003058:	b085      	sub	sp, #20
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	460b      	mov	r3, r1
 8003060:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003068:	887a      	ldrh	r2, [r7, #2]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	4013      	ands	r3, r2
 800306e:	041a      	lsls	r2, r3, #16
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	43d9      	mvns	r1, r3
 8003074:	887b      	ldrh	r3, [r7, #2]
 8003076:	400b      	ands	r3, r1
 8003078:	431a      	orrs	r2, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	619a      	str	r2, [r3, #24]
}
 800307e:	bf00      	nop
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
	...

0800308c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003096:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003098:	695a      	ldr	r2, [r3, #20]
 800309a:	88fb      	ldrh	r3, [r7, #6]
 800309c:	4013      	ands	r3, r2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d006      	beq.n	80030b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030a2:	4a05      	ldr	r2, [pc, #20]	; (80030b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030a4:	88fb      	ldrh	r3, [r7, #6]
 80030a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030a8:	88fb      	ldrh	r3, [r7, #6]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 f806 	bl	80030bc <HAL_GPIO_EXTI_Callback>
  }
}
 80030b0:	bf00      	nop
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40013c00 	.word	0x40013c00

080030bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	4603      	mov	r3, r0
 80030c4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
	...

080030d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e12b      	b.n	800333e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7ff fab4 	bl	8002668 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2224      	movs	r2, #36	; 0x24
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0201 	bic.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003126:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003136:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003138:	f001 fcf2 	bl	8004b20 <HAL_RCC_GetPCLK1Freq>
 800313c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	4a81      	ldr	r2, [pc, #516]	; (8003348 <HAL_I2C_Init+0x274>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d807      	bhi.n	8003158 <HAL_I2C_Init+0x84>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4a80      	ldr	r2, [pc, #512]	; (800334c <HAL_I2C_Init+0x278>)
 800314c:	4293      	cmp	r3, r2
 800314e:	bf94      	ite	ls
 8003150:	2301      	movls	r3, #1
 8003152:	2300      	movhi	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	e006      	b.n	8003166 <HAL_I2C_Init+0x92>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4a7d      	ldr	r2, [pc, #500]	; (8003350 <HAL_I2C_Init+0x27c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	bf94      	ite	ls
 8003160:	2301      	movls	r3, #1
 8003162:	2300      	movhi	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e0e7      	b.n	800333e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4a78      	ldr	r2, [pc, #480]	; (8003354 <HAL_I2C_Init+0x280>)
 8003172:	fba2 2303 	umull	r2, r3, r2, r3
 8003176:	0c9b      	lsrs	r3, r3, #18
 8003178:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	430a      	orrs	r2, r1
 800318c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	4a6a      	ldr	r2, [pc, #424]	; (8003348 <HAL_I2C_Init+0x274>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d802      	bhi.n	80031a8 <HAL_I2C_Init+0xd4>
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	3301      	adds	r3, #1
 80031a6:	e009      	b.n	80031bc <HAL_I2C_Init+0xe8>
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031ae:	fb02 f303 	mul.w	r3, r2, r3
 80031b2:	4a69      	ldr	r2, [pc, #420]	; (8003358 <HAL_I2C_Init+0x284>)
 80031b4:	fba2 2303 	umull	r2, r3, r2, r3
 80031b8:	099b      	lsrs	r3, r3, #6
 80031ba:	3301      	adds	r3, #1
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	430b      	orrs	r3, r1
 80031c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	495c      	ldr	r1, [pc, #368]	; (8003348 <HAL_I2C_Init+0x274>)
 80031d8:	428b      	cmp	r3, r1
 80031da:	d819      	bhi.n	8003210 <HAL_I2C_Init+0x13c>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	1e59      	subs	r1, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80031ea:	1c59      	adds	r1, r3, #1
 80031ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031f0:	400b      	ands	r3, r1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <HAL_I2C_Init+0x138>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	1e59      	subs	r1, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	fbb1 f3f3 	udiv	r3, r1, r3
 8003204:	3301      	adds	r3, #1
 8003206:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800320a:	e051      	b.n	80032b0 <HAL_I2C_Init+0x1dc>
 800320c:	2304      	movs	r3, #4
 800320e:	e04f      	b.n	80032b0 <HAL_I2C_Init+0x1dc>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d111      	bne.n	800323c <HAL_I2C_Init+0x168>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1e58      	subs	r0, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6859      	ldr	r1, [r3, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	440b      	add	r3, r1
 8003226:	fbb0 f3f3 	udiv	r3, r0, r3
 800322a:	3301      	adds	r3, #1
 800322c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003230:	2b00      	cmp	r3, #0
 8003232:	bf0c      	ite	eq
 8003234:	2301      	moveq	r3, #1
 8003236:	2300      	movne	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	e012      	b.n	8003262 <HAL_I2C_Init+0x18e>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	1e58      	subs	r0, r3, #1
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6859      	ldr	r1, [r3, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	0099      	lsls	r1, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003252:	3301      	adds	r3, #1
 8003254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003258:	2b00      	cmp	r3, #0
 800325a:	bf0c      	ite	eq
 800325c:	2301      	moveq	r3, #1
 800325e:	2300      	movne	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_I2C_Init+0x196>
 8003266:	2301      	movs	r3, #1
 8003268:	e022      	b.n	80032b0 <HAL_I2C_Init+0x1dc>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10e      	bne.n	8003290 <HAL_I2C_Init+0x1bc>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	1e58      	subs	r0, r3, #1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6859      	ldr	r1, [r3, #4]
 800327a:	460b      	mov	r3, r1
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	440b      	add	r3, r1
 8003280:	fbb0 f3f3 	udiv	r3, r0, r3
 8003284:	3301      	adds	r3, #1
 8003286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800328a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800328e:	e00f      	b.n	80032b0 <HAL_I2C_Init+0x1dc>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	1e58      	subs	r0, r3, #1
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6859      	ldr	r1, [r3, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	0099      	lsls	r1, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032a6:	3301      	adds	r3, #1
 80032a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	6809      	ldr	r1, [r1, #0]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69da      	ldr	r2, [r3, #28]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6911      	ldr	r1, [r2, #16]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	68d2      	ldr	r2, [r2, #12]
 80032ea:	4311      	orrs	r1, r2
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6812      	ldr	r2, [r2, #0]
 80032f0:	430b      	orrs	r3, r1
 80032f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695a      	ldr	r2, [r3, #20]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	000186a0 	.word	0x000186a0
 800334c:	001e847f 	.word	0x001e847f
 8003350:	003d08ff 	.word	0x003d08ff
 8003354:	431bde83 	.word	0x431bde83
 8003358:	10624dd3 	.word	0x10624dd3

0800335c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af02      	add	r7, sp, #8
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	607a      	str	r2, [r7, #4]
 8003366:	461a      	mov	r2, r3
 8003368:	460b      	mov	r3, r1
 800336a:	817b      	strh	r3, [r7, #10]
 800336c:	4613      	mov	r3, r2
 800336e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003370:	f7ff fb82 	bl	8002a78 <HAL_GetTick>
 8003374:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b20      	cmp	r3, #32
 8003380:	f040 80e0 	bne.w	8003544 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	2319      	movs	r3, #25
 800338a:	2201      	movs	r2, #1
 800338c:	4970      	ldr	r1, [pc, #448]	; (8003550 <HAL_I2C_Master_Transmit+0x1f4>)
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f001 f8f6 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800339a:	2302      	movs	r3, #2
 800339c:	e0d3      	b.n	8003546 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d101      	bne.n	80033ac <HAL_I2C_Master_Transmit+0x50>
 80033a8:	2302      	movs	r3, #2
 80033aa:	e0cc      	b.n	8003546 <HAL_I2C_Master_Transmit+0x1ea>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d007      	beq.n	80033d2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 0201 	orr.w	r2, r2, #1
 80033d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2221      	movs	r2, #33	; 0x21
 80033e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2210      	movs	r2, #16
 80033ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	893a      	ldrh	r2, [r7, #8]
 8003402:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003408:	b29a      	uxth	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4a50      	ldr	r2, [pc, #320]	; (8003554 <HAL_I2C_Master_Transmit+0x1f8>)
 8003412:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003414:	8979      	ldrh	r1, [r7, #10]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	6a3a      	ldr	r2, [r7, #32]
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 fde2 	bl	8003fe4 <I2C_MasterRequestWrite>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e08d      	b.n	8003546 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800342a:	2300      	movs	r3, #0
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	613b      	str	r3, [r7, #16]
 800343e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003440:	e066      	b.n	8003510 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	6a39      	ldr	r1, [r7, #32]
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f001 f970 	bl	800472c <I2C_WaitOnTXEFlagUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00d      	beq.n	800346e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	2b04      	cmp	r3, #4
 8003458:	d107      	bne.n	800346a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003468:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e06b      	b.n	8003546 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	781a      	ldrb	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003488:	b29b      	uxth	r3, r3
 800348a:	3b01      	subs	r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003496:	3b01      	subs	r3, #1
 8003498:	b29a      	uxth	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d11b      	bne.n	80034e4 <HAL_I2C_Master_Transmit+0x188>
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d017      	beq.n	80034e4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	781a      	ldrb	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	3b01      	subs	r3, #1
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	6a39      	ldr	r1, [r7, #32]
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f001 f960 	bl	80047ae <I2C_WaitOnBTFFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00d      	beq.n	8003510 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d107      	bne.n	800350c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800350a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e01a      	b.n	8003546 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003514:	2b00      	cmp	r3, #0
 8003516:	d194      	bne.n	8003442 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003526:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003540:	2300      	movs	r3, #0
 8003542:	e000      	b.n	8003546 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003544:	2302      	movs	r3, #2
  }
}
 8003546:	4618      	mov	r0, r3
 8003548:	3718      	adds	r7, #24
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	00100002 	.word	0x00100002
 8003554:	ffff0000 	.word	0xffff0000

08003558 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b08c      	sub	sp, #48	; 0x30
 800355c:	af02      	add	r7, sp, #8
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	607a      	str	r2, [r7, #4]
 8003562:	461a      	mov	r2, r3
 8003564:	460b      	mov	r3, r1
 8003566:	817b      	strh	r3, [r7, #10]
 8003568:	4613      	mov	r3, r2
 800356a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800356c:	f7ff fa84 	bl	8002a78 <HAL_GetTick>
 8003570:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b20      	cmp	r3, #32
 800357c:	f040 820b 	bne.w	8003996 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	2319      	movs	r3, #25
 8003586:	2201      	movs	r2, #1
 8003588:	497c      	ldr	r1, [pc, #496]	; (800377c <HAL_I2C_Master_Receive+0x224>)
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 fff8 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003596:	2302      	movs	r3, #2
 8003598:	e1fe      	b.n	8003998 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_I2C_Master_Receive+0x50>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e1f7      	b.n	8003998 <HAL_I2C_Master_Receive+0x440>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d007      	beq.n	80035ce <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f042 0201 	orr.w	r2, r2, #1
 80035cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2222      	movs	r2, #34	; 0x22
 80035e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2210      	movs	r2, #16
 80035ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	893a      	ldrh	r2, [r7, #8]
 80035fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003604:	b29a      	uxth	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4a5c      	ldr	r2, [pc, #368]	; (8003780 <HAL_I2C_Master_Receive+0x228>)
 800360e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003610:	8979      	ldrh	r1, [r7, #10]
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 fd66 	bl	80040e8 <I2C_MasterRequestRead>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e1b8      	b.n	8003998 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362a:	2b00      	cmp	r3, #0
 800362c:	d113      	bne.n	8003656 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800362e:	2300      	movs	r3, #0
 8003630:	623b      	str	r3, [r7, #32]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	623b      	str	r3, [r7, #32]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	623b      	str	r3, [r7, #32]
 8003642:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	e18c      	b.n	8003970 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365a:	2b01      	cmp	r3, #1
 800365c:	d11b      	bne.n	8003696 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800366c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800366e:	2300      	movs	r3, #0
 8003670:	61fb      	str	r3, [r7, #28]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	61fb      	str	r3, [r7, #28]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	61fb      	str	r3, [r7, #28]
 8003682:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	e16c      	b.n	8003970 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369a:	2b02      	cmp	r3, #2
 800369c:	d11b      	bne.n	80036d6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036be:	2300      	movs	r3, #0
 80036c0:	61bb      	str	r3, [r7, #24]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	61bb      	str	r3, [r7, #24]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	61bb      	str	r3, [r7, #24]
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	e14c      	b.n	8003970 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80036fc:	e138      	b.n	8003970 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003702:	2b03      	cmp	r3, #3
 8003704:	f200 80f1 	bhi.w	80038ea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800370c:	2b01      	cmp	r3, #1
 800370e:	d123      	bne.n	8003758 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003712:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f001 f88b 	bl	8004830 <I2C_WaitOnRXNEFlagUntilTimeout>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e139      	b.n	8003998 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691a      	ldr	r2, [r3, #16]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374c:	b29b      	uxth	r3, r3
 800374e:	3b01      	subs	r3, #1
 8003750:	b29a      	uxth	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003756:	e10b      	b.n	8003970 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375c:	2b02      	cmp	r3, #2
 800375e:	d14e      	bne.n	80037fe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003766:	2200      	movs	r2, #0
 8003768:	4906      	ldr	r1, [pc, #24]	; (8003784 <HAL_I2C_Master_Receive+0x22c>)
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 ff08 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d008      	beq.n	8003788 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e10e      	b.n	8003998 <HAL_I2C_Master_Receive+0x440>
 800377a:	bf00      	nop
 800377c:	00100002 	.word	0x00100002
 8003780:	ffff0000 	.word	0xffff0000
 8003784:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003796:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	691a      	ldr	r2, [r3, #16]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	1c5a      	adds	r2, r3, #1
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	3b01      	subs	r3, #1
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	691a      	ldr	r2, [r3, #16]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	b2d2      	uxtb	r2, r2
 80037d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037fc:	e0b8      	b.n	8003970 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003804:	2200      	movs	r2, #0
 8003806:	4966      	ldr	r1, [pc, #408]	; (80039a0 <HAL_I2C_Master_Receive+0x448>)
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 feb9 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d001      	beq.n	8003818 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e0bf      	b.n	8003998 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003826:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	691a      	ldr	r2, [r3, #16]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003844:	3b01      	subs	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003850:	b29b      	uxth	r3, r3
 8003852:	3b01      	subs	r3, #1
 8003854:	b29a      	uxth	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800385a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003860:	2200      	movs	r2, #0
 8003862:	494f      	ldr	r1, [pc, #316]	; (80039a0 <HAL_I2C_Master_Receive+0x448>)
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 fe8b 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e091      	b.n	8003998 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003882:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691a      	ldr	r2, [r3, #16]
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388e:	b2d2      	uxtb	r2, r2
 8003890:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	3b01      	subs	r3, #1
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	691a      	ldr	r2, [r3, #16]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038de:	b29b      	uxth	r3, r3
 80038e0:	3b01      	subs	r3, #1
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038e8:	e042      	b.n	8003970 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 ff9e 	bl	8004830 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e04c      	b.n	8003998 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	691a      	ldr	r2, [r3, #16]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	1c5a      	adds	r2, r3, #1
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800391a:	3b01      	subs	r3, #1
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	f003 0304 	and.w	r3, r3, #4
 800393a:	2b04      	cmp	r3, #4
 800393c:	d118      	bne.n	8003970 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395a:	3b01      	subs	r3, #1
 800395c:	b29a      	uxth	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003966:	b29b      	uxth	r3, r3
 8003968:	3b01      	subs	r3, #1
 800396a:	b29a      	uxth	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003974:	2b00      	cmp	r3, #0
 8003976:	f47f aec2 	bne.w	80036fe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2220      	movs	r2, #32
 800397e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	e000      	b.n	8003998 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003996:	2302      	movs	r3, #2
  }
}
 8003998:	4618      	mov	r0, r3
 800399a:	3728      	adds	r7, #40	; 0x28
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	00010004 	.word	0x00010004

080039a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b088      	sub	sp, #32
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	4608      	mov	r0, r1
 80039ae:	4611      	mov	r1, r2
 80039b0:	461a      	mov	r2, r3
 80039b2:	4603      	mov	r3, r0
 80039b4:	817b      	strh	r3, [r7, #10]
 80039b6:	460b      	mov	r3, r1
 80039b8:	813b      	strh	r3, [r7, #8]
 80039ba:	4613      	mov	r3, r2
 80039bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039be:	f7ff f85b 	bl	8002a78 <HAL_GetTick>
 80039c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b20      	cmp	r3, #32
 80039ce:	f040 80d9 	bne.w	8003b84 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	2319      	movs	r3, #25
 80039d8:	2201      	movs	r2, #1
 80039da:	496d      	ldr	r1, [pc, #436]	; (8003b90 <HAL_I2C_Mem_Write+0x1ec>)
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 fdcf 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80039e8:	2302      	movs	r3, #2
 80039ea:	e0cc      	b.n	8003b86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d101      	bne.n	80039fa <HAL_I2C_Mem_Write+0x56>
 80039f6:	2302      	movs	r3, #2
 80039f8:	e0c5      	b.n	8003b86 <HAL_I2C_Mem_Write+0x1e2>
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2201      	movs	r2, #1
 80039fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d007      	beq.n	8003a20 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0201 	orr.w	r2, r2, #1
 8003a1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2221      	movs	r2, #33	; 0x21
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2240      	movs	r2, #64	; 0x40
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6a3a      	ldr	r2, [r7, #32]
 8003a4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4a4d      	ldr	r2, [pc, #308]	; (8003b94 <HAL_I2C_Mem_Write+0x1f0>)
 8003a60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a62:	88f8      	ldrh	r0, [r7, #6]
 8003a64:	893a      	ldrh	r2, [r7, #8]
 8003a66:	8979      	ldrh	r1, [r7, #10]
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	9301      	str	r3, [sp, #4]
 8003a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	4603      	mov	r3, r0
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 fc06 	bl	8004284 <I2C_RequestMemoryWrite>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d052      	beq.n	8003b24 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e081      	b.n	8003b86 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a82:	697a      	ldr	r2, [r7, #20]
 8003a84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 fe50 	bl	800472c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00d      	beq.n	8003aae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d107      	bne.n	8003aaa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aa8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e06b      	b.n	8003b86 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	781a      	ldrb	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac8:	3b01      	subs	r3, #1
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	3b01      	subs	r3, #1
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	f003 0304 	and.w	r3, r3, #4
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d11b      	bne.n	8003b24 <HAL_I2C_Mem_Write+0x180>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d017      	beq.n	8003b24 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	781a      	ldrb	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1aa      	bne.n	8003a82 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 fe3c 	bl	80047ae <I2C_WaitOnBTFFlagUntilTimeout>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00d      	beq.n	8003b58 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b40:	2b04      	cmp	r3, #4
 8003b42:	d107      	bne.n	8003b54 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b52:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e016      	b.n	8003b86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b80:	2300      	movs	r3, #0
 8003b82:	e000      	b.n	8003b86 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b84:	2302      	movs	r3, #2
  }
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	00100002 	.word	0x00100002
 8003b94:	ffff0000 	.word	0xffff0000

08003b98 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08c      	sub	sp, #48	; 0x30
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	4608      	mov	r0, r1
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	817b      	strh	r3, [r7, #10]
 8003baa:	460b      	mov	r3, r1
 8003bac:	813b      	strh	r3, [r7, #8]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bb2:	f7fe ff61 	bl	8002a78 <HAL_GetTick>
 8003bb6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b20      	cmp	r3, #32
 8003bc2:	f040 8208 	bne.w	8003fd6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	2319      	movs	r3, #25
 8003bcc:	2201      	movs	r2, #1
 8003bce:	497b      	ldr	r1, [pc, #492]	; (8003dbc <HAL_I2C_Mem_Read+0x224>)
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 fcd5 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e1fb      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d101      	bne.n	8003bee <HAL_I2C_Mem_Read+0x56>
 8003bea:	2302      	movs	r3, #2
 8003bec:	e1f4      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x440>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d007      	beq.n	8003c14 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0201 	orr.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2222      	movs	r2, #34	; 0x22
 8003c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2240      	movs	r2, #64	; 0x40
 8003c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c3e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003c44:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	4a5b      	ldr	r2, [pc, #364]	; (8003dc0 <HAL_I2C_Mem_Read+0x228>)
 8003c54:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c56:	88f8      	ldrh	r0, [r7, #6]
 8003c58:	893a      	ldrh	r2, [r7, #8]
 8003c5a:	8979      	ldrh	r1, [r7, #10]
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	9301      	str	r3, [sp, #4]
 8003c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	4603      	mov	r3, r0
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 fba2 	bl	80043b0 <I2C_RequestMemoryRead>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e1b0      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d113      	bne.n	8003ca6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c7e:	2300      	movs	r3, #0
 8003c80:	623b      	str	r3, [r7, #32]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695b      	ldr	r3, [r3, #20]
 8003c88:	623b      	str	r3, [r7, #32]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	623b      	str	r3, [r7, #32]
 8003c92:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	e184      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d11b      	bne.n	8003ce6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61fb      	str	r3, [r7, #28]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	61fb      	str	r3, [r7, #28]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	61fb      	str	r3, [r7, #28]
 8003cd2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	e164      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d11b      	bne.n	8003d26 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cfc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61bb      	str	r3, [r7, #24]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	61bb      	str	r3, [r7, #24]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	61bb      	str	r3, [r7, #24]
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	e144      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d26:	2300      	movs	r3, #0
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	617b      	str	r3, [r7, #20]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	617b      	str	r3, [r7, #20]
 8003d3a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d3c:	e138      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d42:	2b03      	cmp	r3, #3
 8003d44:	f200 80f1 	bhi.w	8003f2a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d123      	bne.n	8003d98 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 fd6b 	bl	8004830 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e139      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	691a      	ldr	r2, [r3, #16]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d80:	3b01      	subs	r3, #1
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8c:	b29b      	uxth	r3, r3
 8003d8e:	3b01      	subs	r3, #1
 8003d90:	b29a      	uxth	r2, r3
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d96:	e10b      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d14e      	bne.n	8003e3e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da6:	2200      	movs	r2, #0
 8003da8:	4906      	ldr	r1, [pc, #24]	; (8003dc4 <HAL_I2C_Mem_Read+0x22c>)
 8003daa:	68f8      	ldr	r0, [r7, #12]
 8003dac:	f000 fbe8 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d008      	beq.n	8003dc8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e10e      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x440>
 8003dba:	bf00      	nop
 8003dbc:	00100002 	.word	0x00100002
 8003dc0:	ffff0000 	.word	0xffff0000
 8003dc4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691a      	ldr	r2, [r3, #16]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	b2d2      	uxtb	r2, r2
 8003de4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	1c5a      	adds	r2, r3, #1
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e3c:	e0b8      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e44:	2200      	movs	r2, #0
 8003e46:	4966      	ldr	r1, [pc, #408]	; (8003fe0 <HAL_I2C_Mem_Read+0x448>)
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 fb99 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0bf      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	494f      	ldr	r1, [pc, #316]	; (8003fe0 <HAL_I2C_Mem_Read+0x448>)
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 fb6b 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e091      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ec2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691a      	ldr	r2, [r3, #16]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	1c5a      	adds	r2, r3, #1
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	b29a      	uxth	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	691a      	ldr	r2, [r3, #16]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	b2d2      	uxtb	r2, r2
 8003f02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f12:	3b01      	subs	r3, #1
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f28:	e042      	b.n	8003fb0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 fc7e 	bl	8004830 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e04c      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	f003 0304 	and.w	r3, r3, #4
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d118      	bne.n	8003fb0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	1c5a      	adds	r2, r3, #1
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f47f aec2 	bne.w	8003d3e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	e000      	b.n	8003fd8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003fd6:	2302      	movs	r3, #2
  }
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3728      	adds	r7, #40	; 0x28
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	00010004 	.word	0x00010004

08003fe4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af02      	add	r7, sp, #8
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	607a      	str	r2, [r7, #4]
 8003fee:	603b      	str	r3, [r7, #0]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d006      	beq.n	800400e <I2C_MasterRequestWrite+0x2a>
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d003      	beq.n	800400e <I2C_MasterRequestWrite+0x2a>
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800400c:	d108      	bne.n	8004020 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	e00b      	b.n	8004038 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004024:	2b12      	cmp	r3, #18
 8004026:	d107      	bne.n	8004038 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004036:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	9300      	str	r3, [sp, #0]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f000 fa9b 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00d      	beq.n	800406c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800405e:	d103      	bne.n	8004068 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004066:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e035      	b.n	80040d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004074:	d108      	bne.n	8004088 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004076:	897b      	ldrh	r3, [r7, #10]
 8004078:	b2db      	uxtb	r3, r3
 800407a:	461a      	mov	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004084:	611a      	str	r2, [r3, #16]
 8004086:	e01b      	b.n	80040c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004088:	897b      	ldrh	r3, [r7, #10]
 800408a:	11db      	asrs	r3, r3, #7
 800408c:	b2db      	uxtb	r3, r3
 800408e:	f003 0306 	and.w	r3, r3, #6
 8004092:	b2db      	uxtb	r3, r3
 8004094:	f063 030f 	orn	r3, r3, #15
 8004098:	b2da      	uxtb	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	490e      	ldr	r1, [pc, #56]	; (80040e0 <I2C_MasterRequestWrite+0xfc>)
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 fac1 	bl	800462e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e010      	b.n	80040d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040b6:	897b      	ldrh	r3, [r7, #10]
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	4907      	ldr	r1, [pc, #28]	; (80040e4 <I2C_MasterRequestWrite+0x100>)
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 fab1 	bl	800462e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e000      	b.n	80040d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	00010008 	.word	0x00010008
 80040e4:	00010002 	.word	0x00010002

080040e8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b088      	sub	sp, #32
 80040ec:	af02      	add	r7, sp, #8
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	607a      	str	r2, [r7, #4]
 80040f2:	603b      	str	r3, [r7, #0]
 80040f4:	460b      	mov	r3, r1
 80040f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800410c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2b08      	cmp	r3, #8
 8004112:	d006      	beq.n	8004122 <I2C_MasterRequestRead+0x3a>
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d003      	beq.n	8004122 <I2C_MasterRequestRead+0x3a>
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004120:	d108      	bne.n	8004134 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	e00b      	b.n	800414c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004138:	2b11      	cmp	r3, #17
 800413a:	d107      	bne.n	800414c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800414a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 fa11 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00d      	beq.n	8004180 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004172:	d103      	bne.n	800417c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f44f 7200 	mov.w	r2, #512	; 0x200
 800417a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	e079      	b.n	8004274 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004188:	d108      	bne.n	800419c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800418a:	897b      	ldrh	r3, [r7, #10]
 800418c:	b2db      	uxtb	r3, r3
 800418e:	f043 0301 	orr.w	r3, r3, #1
 8004192:	b2da      	uxtb	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	611a      	str	r2, [r3, #16]
 800419a:	e05f      	b.n	800425c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800419c:	897b      	ldrh	r3, [r7, #10]
 800419e:	11db      	asrs	r3, r3, #7
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	f003 0306 	and.w	r3, r3, #6
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	f063 030f 	orn	r3, r3, #15
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	4930      	ldr	r1, [pc, #192]	; (800427c <I2C_MasterRequestRead+0x194>)
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 fa37 	bl	800462e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d001      	beq.n	80041ca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e054      	b.n	8004274 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041ca:	897b      	ldrh	r3, [r7, #10]
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	4929      	ldr	r1, [pc, #164]	; (8004280 <I2C_MasterRequestRead+0x198>)
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 fa27 	bl	800462e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e044      	b.n	8004274 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ea:	2300      	movs	r3, #0
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	613b      	str	r3, [r7, #16]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	613b      	str	r3, [r7, #16]
 80041fe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800420e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f9af 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00d      	beq.n	8004244 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004236:	d103      	bne.n	8004240 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800423e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004240:	2303      	movs	r3, #3
 8004242:	e017      	b.n	8004274 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004244:	897b      	ldrh	r3, [r7, #10]
 8004246:	11db      	asrs	r3, r3, #7
 8004248:	b2db      	uxtb	r3, r3
 800424a:	f003 0306 	and.w	r3, r3, #6
 800424e:	b2db      	uxtb	r3, r3
 8004250:	f063 030e 	orn	r3, r3, #14
 8004254:	b2da      	uxtb	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	4907      	ldr	r1, [pc, #28]	; (8004280 <I2C_MasterRequestRead+0x198>)
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 f9e3 	bl	800462e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	00010008 	.word	0x00010008
 8004280:	00010002 	.word	0x00010002

08004284 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b088      	sub	sp, #32
 8004288:	af02      	add	r7, sp, #8
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	4608      	mov	r0, r1
 800428e:	4611      	mov	r1, r2
 8004290:	461a      	mov	r2, r3
 8004292:	4603      	mov	r3, r0
 8004294:	817b      	strh	r3, [r7, #10]
 8004296:	460b      	mov	r3, r1
 8004298:	813b      	strh	r3, [r7, #8]
 800429a:	4613      	mov	r3, r2
 800429c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	6a3b      	ldr	r3, [r7, #32]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 f960 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00d      	beq.n	80042e2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042d4:	d103      	bne.n	80042de <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e05f      	b.n	80043a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042e2:	897b      	ldrh	r3, [r7, #10]
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	461a      	mov	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	6a3a      	ldr	r2, [r7, #32]
 80042f6:	492d      	ldr	r1, [pc, #180]	; (80043ac <I2C_RequestMemoryWrite+0x128>)
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f000 f998 	bl	800462e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e04c      	b.n	80043a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004308:	2300      	movs	r3, #0
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	617b      	str	r3, [r7, #20]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800431e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004320:	6a39      	ldr	r1, [r7, #32]
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 fa02 	bl	800472c <I2C_WaitOnTXEFlagUntilTimeout>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00d      	beq.n	800434a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004332:	2b04      	cmp	r3, #4
 8004334:	d107      	bne.n	8004346 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004344:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e02b      	b.n	80043a2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800434a:	88fb      	ldrh	r3, [r7, #6]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d105      	bne.n	800435c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004350:	893b      	ldrh	r3, [r7, #8]
 8004352:	b2da      	uxtb	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	611a      	str	r2, [r3, #16]
 800435a:	e021      	b.n	80043a0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800435c:	893b      	ldrh	r3, [r7, #8]
 800435e:	0a1b      	lsrs	r3, r3, #8
 8004360:	b29b      	uxth	r3, r3
 8004362:	b2da      	uxtb	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800436a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800436c:	6a39      	ldr	r1, [r7, #32]
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 f9dc 	bl	800472c <I2C_WaitOnTXEFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00d      	beq.n	8004396 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	2b04      	cmp	r3, #4
 8004380:	d107      	bne.n	8004392 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004390:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e005      	b.n	80043a2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004396:	893b      	ldrh	r3, [r7, #8]
 8004398:	b2da      	uxtb	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	00010002 	.word	0x00010002

080043b0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	4608      	mov	r0, r1
 80043ba:	4611      	mov	r1, r2
 80043bc:	461a      	mov	r2, r3
 80043be:	4603      	mov	r3, r0
 80043c0:	817b      	strh	r3, [r7, #10]
 80043c2:	460b      	mov	r3, r1
 80043c4:	813b      	strh	r3, [r7, #8]
 80043c6:	4613      	mov	r3, r2
 80043c8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80043d8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	6a3b      	ldr	r3, [r7, #32]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 f8c2 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00d      	beq.n	800441e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800440c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004410:	d103      	bne.n	800441a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004418:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e0aa      	b.n	8004574 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800441e:	897b      	ldrh	r3, [r7, #10]
 8004420:	b2db      	uxtb	r3, r3
 8004422:	461a      	mov	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800442c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800442e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004430:	6a3a      	ldr	r2, [r7, #32]
 8004432:	4952      	ldr	r1, [pc, #328]	; (800457c <I2C_RequestMemoryRead+0x1cc>)
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 f8fa 	bl	800462e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e097      	b.n	8004574 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004444:	2300      	movs	r3, #0
 8004446:	617b      	str	r3, [r7, #20]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	617b      	str	r3, [r7, #20]
 8004458:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800445a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800445c:	6a39      	ldr	r1, [r7, #32]
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 f964 	bl	800472c <I2C_WaitOnTXEFlagUntilTimeout>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00d      	beq.n	8004486 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	2b04      	cmp	r3, #4
 8004470:	d107      	bne.n	8004482 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004480:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e076      	b.n	8004574 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004486:	88fb      	ldrh	r3, [r7, #6]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d105      	bne.n	8004498 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800448c:	893b      	ldrh	r3, [r7, #8]
 800448e:	b2da      	uxtb	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	611a      	str	r2, [r3, #16]
 8004496:	e021      	b.n	80044dc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004498:	893b      	ldrh	r3, [r7, #8]
 800449a:	0a1b      	lsrs	r3, r3, #8
 800449c:	b29b      	uxth	r3, r3
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a8:	6a39      	ldr	r1, [r7, #32]
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 f93e 	bl	800472c <I2C_WaitOnTXEFlagUntilTimeout>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00d      	beq.n	80044d2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	d107      	bne.n	80044ce <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044cc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e050      	b.n	8004574 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044d2:	893b      	ldrh	r3, [r7, #8]
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044de:	6a39      	ldr	r1, [r7, #32]
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 f923 	bl	800472c <I2C_WaitOnTXEFlagUntilTimeout>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00d      	beq.n	8004508 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	d107      	bne.n	8004504 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004502:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e035      	b.n	8004574 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004516:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	2200      	movs	r2, #0
 8004520:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 f82b 	bl	8004580 <I2C_WaitOnFlagUntilTimeout>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00d      	beq.n	800454c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800453e:	d103      	bne.n	8004548 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004546:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e013      	b.n	8004574 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800454c:	897b      	ldrh	r3, [r7, #10]
 800454e:	b2db      	uxtb	r3, r3
 8004550:	f043 0301 	orr.w	r3, r3, #1
 8004554:	b2da      	uxtb	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	6a3a      	ldr	r2, [r7, #32]
 8004560:	4906      	ldr	r1, [pc, #24]	; (800457c <I2C_RequestMemoryRead+0x1cc>)
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 f863 	bl	800462e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3718      	adds	r7, #24
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	00010002 	.word	0x00010002

08004580 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	603b      	str	r3, [r7, #0]
 800458c:	4613      	mov	r3, r2
 800458e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004590:	e025      	b.n	80045de <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004598:	d021      	beq.n	80045de <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800459a:	f7fe fa6d 	bl	8002a78 <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d302      	bcc.n	80045b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d116      	bne.n	80045de <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2200      	movs	r2, #0
 80045b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2220      	movs	r2, #32
 80045ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	f043 0220 	orr.w	r2, r3, #32
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e023      	b.n	8004626 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	0c1b      	lsrs	r3, r3, #16
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d10d      	bne.n	8004604 <I2C_WaitOnFlagUntilTimeout+0x84>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	43da      	mvns	r2, r3
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	4013      	ands	r3, r2
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	bf0c      	ite	eq
 80045fa:	2301      	moveq	r3, #1
 80045fc:	2300      	movne	r3, #0
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	461a      	mov	r2, r3
 8004602:	e00c      	b.n	800461e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	699b      	ldr	r3, [r3, #24]
 800460a:	43da      	mvns	r2, r3
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	4013      	ands	r3, r2
 8004610:	b29b      	uxth	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	bf0c      	ite	eq
 8004616:	2301      	moveq	r3, #1
 8004618:	2300      	movne	r3, #0
 800461a:	b2db      	uxtb	r3, r3
 800461c:	461a      	mov	r2, r3
 800461e:	79fb      	ldrb	r3, [r7, #7]
 8004620:	429a      	cmp	r2, r3
 8004622:	d0b6      	beq.n	8004592 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b084      	sub	sp, #16
 8004632:	af00      	add	r7, sp, #0
 8004634:	60f8      	str	r0, [r7, #12]
 8004636:	60b9      	str	r1, [r7, #8]
 8004638:	607a      	str	r2, [r7, #4]
 800463a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800463c:	e051      	b.n	80046e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004648:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800464c:	d123      	bne.n	8004696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800465c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004666:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2220      	movs	r2, #32
 8004672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	f043 0204 	orr.w	r2, r3, #4
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e046      	b.n	8004724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800469c:	d021      	beq.n	80046e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800469e:	f7fe f9eb 	bl	8002a78 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d302      	bcc.n	80046b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d116      	bne.n	80046e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2220      	movs	r2, #32
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	f043 0220 	orr.w	r2, r3, #32
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e020      	b.n	8004724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	0c1b      	lsrs	r3, r3, #16
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d10c      	bne.n	8004706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	43da      	mvns	r2, r3
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	4013      	ands	r3, r2
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	bf14      	ite	ne
 80046fe:	2301      	movne	r3, #1
 8004700:	2300      	moveq	r3, #0
 8004702:	b2db      	uxtb	r3, r3
 8004704:	e00b      	b.n	800471e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	43da      	mvns	r2, r3
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	4013      	ands	r3, r2
 8004712:	b29b      	uxth	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	bf14      	ite	ne
 8004718:	2301      	movne	r3, #1
 800471a:	2300      	moveq	r3, #0
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d18d      	bne.n	800463e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004738:	e02d      	b.n	8004796 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 f8ce 	bl	80048dc <I2C_IsAcknowledgeFailed>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e02d      	b.n	80047a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004750:	d021      	beq.n	8004796 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004752:	f7fe f991 	bl	8002a78 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	68ba      	ldr	r2, [r7, #8]
 800475e:	429a      	cmp	r2, r3
 8004760:	d302      	bcc.n	8004768 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d116      	bne.n	8004796 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2220      	movs	r2, #32
 8004772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	f043 0220 	orr.w	r2, r3, #32
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e007      	b.n	80047a6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a0:	2b80      	cmp	r3, #128	; 0x80
 80047a2:	d1ca      	bne.n	800473a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	b084      	sub	sp, #16
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	60f8      	str	r0, [r7, #12]
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047ba:	e02d      	b.n	8004818 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 f88d 	bl	80048dc <I2C_IsAcknowledgeFailed>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d001      	beq.n	80047cc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e02d      	b.n	8004828 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047d2:	d021      	beq.n	8004818 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d4:	f7fe f950 	bl	8002a78 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d302      	bcc.n	80047ea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d116      	bne.n	8004818 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004804:	f043 0220 	orr.w	r2, r3, #32
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e007      	b.n	8004828 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b04      	cmp	r3, #4
 8004824:	d1ca      	bne.n	80047bc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}

08004830 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800483c:	e042      	b.n	80048c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	f003 0310 	and.w	r3, r3, #16
 8004848:	2b10      	cmp	r3, #16
 800484a:	d119      	bne.n	8004880 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f06f 0210 	mvn.w	r2, #16
 8004854:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2220      	movs	r2, #32
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e029      	b.n	80048d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004880:	f7fe f8fa 	bl	8002a78 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	429a      	cmp	r2, r3
 800488e:	d302      	bcc.n	8004896 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d116      	bne.n	80048c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2200      	movs	r2, #0
 800489a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2220      	movs	r2, #32
 80048a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b0:	f043 0220 	orr.w	r2, r3, #32
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e007      	b.n	80048d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ce:	2b40      	cmp	r3, #64	; 0x40
 80048d0:	d1b5      	bne.n	800483e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048f2:	d11b      	bne.n	800492c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	f043 0204 	orr.w	r2, r3, #4
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e000      	b.n	800492e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
	...

0800493c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e0cc      	b.n	8004aea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004950:	4b68      	ldr	r3, [pc, #416]	; (8004af4 <HAL_RCC_ClockConfig+0x1b8>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 030f 	and.w	r3, r3, #15
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	429a      	cmp	r2, r3
 800495c:	d90c      	bls.n	8004978 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800495e:	4b65      	ldr	r3, [pc, #404]	; (8004af4 <HAL_RCC_ClockConfig+0x1b8>)
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004966:	4b63      	ldr	r3, [pc, #396]	; (8004af4 <HAL_RCC_ClockConfig+0x1b8>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 030f 	and.w	r3, r3, #15
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	429a      	cmp	r2, r3
 8004972:	d001      	beq.n	8004978 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e0b8      	b.n	8004aea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d020      	beq.n	80049c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b00      	cmp	r3, #0
 800498e:	d005      	beq.n	800499c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004990:	4b59      	ldr	r3, [pc, #356]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	4a58      	ldr	r2, [pc, #352]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004996:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800499a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049a8:	4b53      	ldr	r3, [pc, #332]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	4a52      	ldr	r2, [pc, #328]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049b4:	4b50      	ldr	r3, [pc, #320]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	494d      	ldr	r1, [pc, #308]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d044      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d107      	bne.n	80049ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049da:	4b47      	ldr	r3, [pc, #284]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d119      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e07f      	b.n	8004aea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d003      	beq.n	80049fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049f6:	2b03      	cmp	r3, #3
 80049f8:	d107      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049fa:	4b3f      	ldr	r3, [pc, #252]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d109      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e06f      	b.n	8004aea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a0a:	4b3b      	ldr	r3, [pc, #236]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e067      	b.n	8004aea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a1a:	4b37      	ldr	r3, [pc, #220]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f023 0203 	bic.w	r2, r3, #3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	4934      	ldr	r1, [pc, #208]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a2c:	f7fe f824 	bl	8002a78 <HAL_GetTick>
 8004a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a32:	e00a      	b.n	8004a4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a34:	f7fe f820 	bl	8002a78 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e04f      	b.n	8004aea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a4a:	4b2b      	ldr	r3, [pc, #172]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 020c 	and.w	r2, r3, #12
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d1eb      	bne.n	8004a34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a5c:	4b25      	ldr	r3, [pc, #148]	; (8004af4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d20c      	bcs.n	8004a84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a6a:	4b22      	ldr	r3, [pc, #136]	; (8004af4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	b2d2      	uxtb	r2, r2
 8004a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a72:	4b20      	ldr	r3, [pc, #128]	; (8004af4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d001      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e032      	b.n	8004aea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d008      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a90:	4b19      	ldr	r3, [pc, #100]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	4916      	ldr	r1, [pc, #88]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0308 	and.w	r3, r3, #8
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d009      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aae:	4b12      	ldr	r3, [pc, #72]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	490e      	ldr	r1, [pc, #56]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ac2:	f000 f855 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	091b      	lsrs	r3, r3, #4
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	490a      	ldr	r1, [pc, #40]	; (8004afc <HAL_RCC_ClockConfig+0x1c0>)
 8004ad4:	5ccb      	ldrb	r3, [r1, r3]
 8004ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8004ada:	4a09      	ldr	r2, [pc, #36]	; (8004b00 <HAL_RCC_ClockConfig+0x1c4>)
 8004adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ade:	4b09      	ldr	r3, [pc, #36]	; (8004b04 <HAL_RCC_ClockConfig+0x1c8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fd ff84 	bl	80029f0 <HAL_InitTick>

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	40023c00 	.word	0x40023c00
 8004af8:	40023800 	.word	0x40023800
 8004afc:	080064b4 	.word	0x080064b4
 8004b00:	20000000 	.word	0x20000000
 8004b04:	20000004 	.word	0x20000004

08004b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b0c:	4b03      	ldr	r3, [pc, #12]	; (8004b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	20000000 	.word	0x20000000

08004b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b24:	f7ff fff0 	bl	8004b08 <HAL_RCC_GetHCLKFreq>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	4b05      	ldr	r3, [pc, #20]	; (8004b40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	0a9b      	lsrs	r3, r3, #10
 8004b30:	f003 0307 	and.w	r3, r3, #7
 8004b34:	4903      	ldr	r1, [pc, #12]	; (8004b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b36:	5ccb      	ldrb	r3, [r1, r3]
 8004b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	40023800 	.word	0x40023800
 8004b44:	080064c4 	.word	0x080064c4

08004b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b4c:	f7ff ffdc 	bl	8004b08 <HAL_RCC_GetHCLKFreq>
 8004b50:	4602      	mov	r2, r0
 8004b52:	4b05      	ldr	r3, [pc, #20]	; (8004b68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	0b5b      	lsrs	r3, r3, #13
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	4903      	ldr	r1, [pc, #12]	; (8004b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b5e:	5ccb      	ldrb	r3, [r1, r3]
 8004b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	40023800 	.word	0x40023800
 8004b6c:	080064c4 	.word	0x080064c4

08004b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b74:	b088      	sub	sp, #32
 8004b76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b8c:	4bce      	ldr	r3, [pc, #824]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f003 030c 	and.w	r3, r3, #12
 8004b94:	2b0c      	cmp	r3, #12
 8004b96:	f200 818d 	bhi.w	8004eb4 <HAL_RCC_GetSysClockFreq+0x344>
 8004b9a:	a201      	add	r2, pc, #4	; (adr r2, 8004ba0 <HAL_RCC_GetSysClockFreq+0x30>)
 8004b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba0:	08004bd5 	.word	0x08004bd5
 8004ba4:	08004eb5 	.word	0x08004eb5
 8004ba8:	08004eb5 	.word	0x08004eb5
 8004bac:	08004eb5 	.word	0x08004eb5
 8004bb0:	08004bdb 	.word	0x08004bdb
 8004bb4:	08004eb5 	.word	0x08004eb5
 8004bb8:	08004eb5 	.word	0x08004eb5
 8004bbc:	08004eb5 	.word	0x08004eb5
 8004bc0:	08004be1 	.word	0x08004be1
 8004bc4:	08004eb5 	.word	0x08004eb5
 8004bc8:	08004eb5 	.word	0x08004eb5
 8004bcc:	08004eb5 	.word	0x08004eb5
 8004bd0:	08004d55 	.word	0x08004d55
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bd4:	4bbd      	ldr	r3, [pc, #756]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x35c>)
 8004bd6:	61bb      	str	r3, [r7, #24]
       break;
 8004bd8:	e16f      	b.n	8004eba <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bda:	4bbd      	ldr	r3, [pc, #756]	; (8004ed0 <HAL_RCC_GetSysClockFreq+0x360>)
 8004bdc:	61bb      	str	r3, [r7, #24]
      break;
 8004bde:	e16c      	b.n	8004eba <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004be0:	4bb9      	ldr	r3, [pc, #740]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004be8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bea:	4bb7      	ldr	r3, [pc, #732]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d053      	beq.n	8004c9e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bf6:	4bb4      	ldr	r3, [pc, #720]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	099b      	lsrs	r3, r3, #6
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	f04f 0300 	mov.w	r3, #0
 8004c02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004c06:	f04f 0100 	mov.w	r1, #0
 8004c0a:	ea02 0400 	and.w	r4, r2, r0
 8004c0e:	603c      	str	r4, [r7, #0]
 8004c10:	400b      	ands	r3, r1
 8004c12:	607b      	str	r3, [r7, #4]
 8004c14:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c18:	4620      	mov	r0, r4
 8004c1a:	4629      	mov	r1, r5
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	f04f 0300 	mov.w	r3, #0
 8004c24:	014b      	lsls	r3, r1, #5
 8004c26:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004c2a:	0142      	lsls	r2, r0, #5
 8004c2c:	4610      	mov	r0, r2
 8004c2e:	4619      	mov	r1, r3
 8004c30:	4623      	mov	r3, r4
 8004c32:	1ac0      	subs	r0, r0, r3
 8004c34:	462b      	mov	r3, r5
 8004c36:	eb61 0103 	sbc.w	r1, r1, r3
 8004c3a:	f04f 0200 	mov.w	r2, #0
 8004c3e:	f04f 0300 	mov.w	r3, #0
 8004c42:	018b      	lsls	r3, r1, #6
 8004c44:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004c48:	0182      	lsls	r2, r0, #6
 8004c4a:	1a12      	subs	r2, r2, r0
 8004c4c:	eb63 0301 	sbc.w	r3, r3, r1
 8004c50:	f04f 0000 	mov.w	r0, #0
 8004c54:	f04f 0100 	mov.w	r1, #0
 8004c58:	00d9      	lsls	r1, r3, #3
 8004c5a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c5e:	00d0      	lsls	r0, r2, #3
 8004c60:	4602      	mov	r2, r0
 8004c62:	460b      	mov	r3, r1
 8004c64:	4621      	mov	r1, r4
 8004c66:	1852      	adds	r2, r2, r1
 8004c68:	4629      	mov	r1, r5
 8004c6a:	eb43 0101 	adc.w	r1, r3, r1
 8004c6e:	460b      	mov	r3, r1
 8004c70:	f04f 0000 	mov.w	r0, #0
 8004c74:	f04f 0100 	mov.w	r1, #0
 8004c78:	0259      	lsls	r1, r3, #9
 8004c7a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004c7e:	0250      	lsls	r0, r2, #9
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	4610      	mov	r0, r2
 8004c86:	4619      	mov	r1, r3
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	f04f 0300 	mov.w	r3, #0
 8004c90:	f7fb ffcc 	bl	8000c2c <__aeabi_uldivmod>
 8004c94:	4602      	mov	r2, r0
 8004c96:	460b      	mov	r3, r1
 8004c98:	4613      	mov	r3, r2
 8004c9a:	61fb      	str	r3, [r7, #28]
 8004c9c:	e04c      	b.n	8004d38 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c9e:	4b8a      	ldr	r3, [pc, #552]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	099b      	lsrs	r3, r3, #6
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	f04f 0300 	mov.w	r3, #0
 8004caa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004cae:	f04f 0100 	mov.w	r1, #0
 8004cb2:	ea02 0a00 	and.w	sl, r2, r0
 8004cb6:	ea03 0b01 	and.w	fp, r3, r1
 8004cba:	4650      	mov	r0, sl
 8004cbc:	4659      	mov	r1, fp
 8004cbe:	f04f 0200 	mov.w	r2, #0
 8004cc2:	f04f 0300 	mov.w	r3, #0
 8004cc6:	014b      	lsls	r3, r1, #5
 8004cc8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ccc:	0142      	lsls	r2, r0, #5
 8004cce:	4610      	mov	r0, r2
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	ebb0 000a 	subs.w	r0, r0, sl
 8004cd6:	eb61 010b 	sbc.w	r1, r1, fp
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	018b      	lsls	r3, r1, #6
 8004ce4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ce8:	0182      	lsls	r2, r0, #6
 8004cea:	1a12      	subs	r2, r2, r0
 8004cec:	eb63 0301 	sbc.w	r3, r3, r1
 8004cf0:	f04f 0000 	mov.w	r0, #0
 8004cf4:	f04f 0100 	mov.w	r1, #0
 8004cf8:	00d9      	lsls	r1, r3, #3
 8004cfa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004cfe:	00d0      	lsls	r0, r2, #3
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	eb12 020a 	adds.w	r2, r2, sl
 8004d08:	eb43 030b 	adc.w	r3, r3, fp
 8004d0c:	f04f 0000 	mov.w	r0, #0
 8004d10:	f04f 0100 	mov.w	r1, #0
 8004d14:	0299      	lsls	r1, r3, #10
 8004d16:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004d1a:	0290      	lsls	r0, r2, #10
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4610      	mov	r0, r2
 8004d22:	4619      	mov	r1, r3
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	461a      	mov	r2, r3
 8004d28:	f04f 0300 	mov.w	r3, #0
 8004d2c:	f7fb ff7e 	bl	8000c2c <__aeabi_uldivmod>
 8004d30:	4602      	mov	r2, r0
 8004d32:	460b      	mov	r3, r1
 8004d34:	4613      	mov	r3, r2
 8004d36:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d38:	4b63      	ldr	r3, [pc, #396]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	0c1b      	lsrs	r3, r3, #16
 8004d3e:	f003 0303 	and.w	r3, r3, #3
 8004d42:	3301      	adds	r3, #1
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004d48:	69fa      	ldr	r2, [r7, #28]
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d50:	61bb      	str	r3, [r7, #24]
      break;
 8004d52:	e0b2      	b.n	8004eba <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d54:	4b5c      	ldr	r3, [pc, #368]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d5c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d5e:	4b5a      	ldr	r3, [pc, #360]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d04d      	beq.n	8004e06 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d6a:	4b57      	ldr	r3, [pc, #348]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	099b      	lsrs	r3, r3, #6
 8004d70:	461a      	mov	r2, r3
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d7a:	f04f 0100 	mov.w	r1, #0
 8004d7e:	ea02 0800 	and.w	r8, r2, r0
 8004d82:	ea03 0901 	and.w	r9, r3, r1
 8004d86:	4640      	mov	r0, r8
 8004d88:	4649      	mov	r1, r9
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	f04f 0300 	mov.w	r3, #0
 8004d92:	014b      	lsls	r3, r1, #5
 8004d94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d98:	0142      	lsls	r2, r0, #5
 8004d9a:	4610      	mov	r0, r2
 8004d9c:	4619      	mov	r1, r3
 8004d9e:	ebb0 0008 	subs.w	r0, r0, r8
 8004da2:	eb61 0109 	sbc.w	r1, r1, r9
 8004da6:	f04f 0200 	mov.w	r2, #0
 8004daa:	f04f 0300 	mov.w	r3, #0
 8004dae:	018b      	lsls	r3, r1, #6
 8004db0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004db4:	0182      	lsls	r2, r0, #6
 8004db6:	1a12      	subs	r2, r2, r0
 8004db8:	eb63 0301 	sbc.w	r3, r3, r1
 8004dbc:	f04f 0000 	mov.w	r0, #0
 8004dc0:	f04f 0100 	mov.w	r1, #0
 8004dc4:	00d9      	lsls	r1, r3, #3
 8004dc6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dca:	00d0      	lsls	r0, r2, #3
 8004dcc:	4602      	mov	r2, r0
 8004dce:	460b      	mov	r3, r1
 8004dd0:	eb12 0208 	adds.w	r2, r2, r8
 8004dd4:	eb43 0309 	adc.w	r3, r3, r9
 8004dd8:	f04f 0000 	mov.w	r0, #0
 8004ddc:	f04f 0100 	mov.w	r1, #0
 8004de0:	0259      	lsls	r1, r3, #9
 8004de2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004de6:	0250      	lsls	r0, r2, #9
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4610      	mov	r0, r2
 8004dee:	4619      	mov	r1, r3
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	461a      	mov	r2, r3
 8004df4:	f04f 0300 	mov.w	r3, #0
 8004df8:	f7fb ff18 	bl	8000c2c <__aeabi_uldivmod>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	4613      	mov	r3, r2
 8004e02:	61fb      	str	r3, [r7, #28]
 8004e04:	e04a      	b.n	8004e9c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e06:	4b30      	ldr	r3, [pc, #192]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	099b      	lsrs	r3, r3, #6
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	f04f 0300 	mov.w	r3, #0
 8004e12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004e16:	f04f 0100 	mov.w	r1, #0
 8004e1a:	ea02 0400 	and.w	r4, r2, r0
 8004e1e:	ea03 0501 	and.w	r5, r3, r1
 8004e22:	4620      	mov	r0, r4
 8004e24:	4629      	mov	r1, r5
 8004e26:	f04f 0200 	mov.w	r2, #0
 8004e2a:	f04f 0300 	mov.w	r3, #0
 8004e2e:	014b      	lsls	r3, r1, #5
 8004e30:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004e34:	0142      	lsls	r2, r0, #5
 8004e36:	4610      	mov	r0, r2
 8004e38:	4619      	mov	r1, r3
 8004e3a:	1b00      	subs	r0, r0, r4
 8004e3c:	eb61 0105 	sbc.w	r1, r1, r5
 8004e40:	f04f 0200 	mov.w	r2, #0
 8004e44:	f04f 0300 	mov.w	r3, #0
 8004e48:	018b      	lsls	r3, r1, #6
 8004e4a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004e4e:	0182      	lsls	r2, r0, #6
 8004e50:	1a12      	subs	r2, r2, r0
 8004e52:	eb63 0301 	sbc.w	r3, r3, r1
 8004e56:	f04f 0000 	mov.w	r0, #0
 8004e5a:	f04f 0100 	mov.w	r1, #0
 8004e5e:	00d9      	lsls	r1, r3, #3
 8004e60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004e64:	00d0      	lsls	r0, r2, #3
 8004e66:	4602      	mov	r2, r0
 8004e68:	460b      	mov	r3, r1
 8004e6a:	1912      	adds	r2, r2, r4
 8004e6c:	eb45 0303 	adc.w	r3, r5, r3
 8004e70:	f04f 0000 	mov.w	r0, #0
 8004e74:	f04f 0100 	mov.w	r1, #0
 8004e78:	0299      	lsls	r1, r3, #10
 8004e7a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004e7e:	0290      	lsls	r0, r2, #10
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4610      	mov	r0, r2
 8004e86:	4619      	mov	r1, r3
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f04f 0300 	mov.w	r3, #0
 8004e90:	f7fb fecc 	bl	8000c2c <__aeabi_uldivmod>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	4613      	mov	r3, r2
 8004e9a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004e9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ec8 <HAL_RCC_GetSysClockFreq+0x358>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	0f1b      	lsrs	r3, r3, #28
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004ea8:	69fa      	ldr	r2, [r7, #28]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb0:	61bb      	str	r3, [r7, #24]
      break;
 8004eb2:	e002      	b.n	8004eba <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004eb4:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <HAL_RCC_GetSysClockFreq+0x35c>)
 8004eb6:	61bb      	str	r3, [r7, #24]
      break;
 8004eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004eba:	69bb      	ldr	r3, [r7, #24]
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3720      	adds	r7, #32
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ec6:	bf00      	nop
 8004ec8:	40023800 	.word	0x40023800
 8004ecc:	00f42400 	.word	0x00f42400
 8004ed0:	007a1200 	.word	0x007a1200

08004ed4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e28d      	b.n	8005402 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 8083 	beq.w	8004ffa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004ef4:	4b94      	ldr	r3, [pc, #592]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f003 030c 	and.w	r3, r3, #12
 8004efc:	2b04      	cmp	r3, #4
 8004efe:	d019      	beq.n	8004f34 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f00:	4b91      	ldr	r3, [pc, #580]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f08:	2b08      	cmp	r3, #8
 8004f0a:	d106      	bne.n	8004f1a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f0c:	4b8e      	ldr	r3, [pc, #568]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f18:	d00c      	beq.n	8004f34 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f1a:	4b8b      	ldr	r3, [pc, #556]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f22:	2b0c      	cmp	r3, #12
 8004f24:	d112      	bne.n	8004f4c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f26:	4b88      	ldr	r3, [pc, #544]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f32:	d10b      	bne.n	8004f4c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f34:	4b84      	ldr	r3, [pc, #528]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d05b      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x124>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d157      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e25a      	b.n	8005402 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f54:	d106      	bne.n	8004f64 <HAL_RCC_OscConfig+0x90>
 8004f56:	4b7c      	ldr	r3, [pc, #496]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a7b      	ldr	r2, [pc, #492]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 8004f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f60:	6013      	str	r3, [r2, #0]
 8004f62:	e01d      	b.n	8004fa0 <HAL_RCC_OscConfig+0xcc>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f6c:	d10c      	bne.n	8004f88 <HAL_RCC_OscConfig+0xb4>
 8004f6e:	4b76      	ldr	r3, [pc, #472]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a75      	ldr	r2, [pc, #468]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 8004f74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f78:	6013      	str	r3, [r2, #0]
 8004f7a:	4b73      	ldr	r3, [pc, #460]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a72      	ldr	r2, [pc, #456]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 8004f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f84:	6013      	str	r3, [r2, #0]
 8004f86:	e00b      	b.n	8004fa0 <HAL_RCC_OscConfig+0xcc>
 8004f88:	4b6f      	ldr	r3, [pc, #444]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a6e      	ldr	r2, [pc, #440]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 8004f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f92:	6013      	str	r3, [r2, #0]
 8004f94:	4b6c      	ldr	r3, [pc, #432]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a6b      	ldr	r2, [pc, #428]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 8004f9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d013      	beq.n	8004fd0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa8:	f7fd fd66 	bl	8002a78 <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fb0:	f7fd fd62 	bl	8002a78 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b64      	cmp	r3, #100	; 0x64
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e21f      	b.n	8005402 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fc2:	4b61      	ldr	r3, [pc, #388]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d0f0      	beq.n	8004fb0 <HAL_RCC_OscConfig+0xdc>
 8004fce:	e014      	b.n	8004ffa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd0:	f7fd fd52 	bl	8002a78 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fd8:	f7fd fd4e 	bl	8002a78 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b64      	cmp	r3, #100	; 0x64
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e20b      	b.n	8005402 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fea:	4b57      	ldr	r3, [pc, #348]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1f0      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x104>
 8004ff6:	e000      	b.n	8004ffa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d06f      	beq.n	80050e6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005006:	4b50      	ldr	r3, [pc, #320]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f003 030c 	and.w	r3, r3, #12
 800500e:	2b00      	cmp	r3, #0
 8005010:	d017      	beq.n	8005042 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005012:	4b4d      	ldr	r3, [pc, #308]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800501a:	2b08      	cmp	r3, #8
 800501c:	d105      	bne.n	800502a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800501e:	4b4a      	ldr	r3, [pc, #296]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00b      	beq.n	8005042 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800502a:	4b47      	ldr	r3, [pc, #284]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005032:	2b0c      	cmp	r3, #12
 8005034:	d11c      	bne.n	8005070 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005036:	4b44      	ldr	r3, [pc, #272]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d116      	bne.n	8005070 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005042:	4b41      	ldr	r3, [pc, #260]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d005      	beq.n	800505a <HAL_RCC_OscConfig+0x186>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d001      	beq.n	800505a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e1d3      	b.n	8005402 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800505a:	4b3b      	ldr	r3, [pc, #236]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	4937      	ldr	r1, [pc, #220]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 800506a:	4313      	orrs	r3, r2
 800506c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800506e:	e03a      	b.n	80050e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d020      	beq.n	80050ba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005078:	4b34      	ldr	r3, [pc, #208]	; (800514c <HAL_RCC_OscConfig+0x278>)
 800507a:	2201      	movs	r2, #1
 800507c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800507e:	f7fd fcfb 	bl	8002a78 <HAL_GetTick>
 8005082:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005084:	e008      	b.n	8005098 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005086:	f7fd fcf7 	bl	8002a78 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b02      	cmp	r3, #2
 8005092:	d901      	bls.n	8005098 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e1b4      	b.n	8005402 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005098:	4b2b      	ldr	r3, [pc, #172]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d0f0      	beq.n	8005086 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050a4:	4b28      	ldr	r3, [pc, #160]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	00db      	lsls	r3, r3, #3
 80050b2:	4925      	ldr	r1, [pc, #148]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	600b      	str	r3, [r1, #0]
 80050b8:	e015      	b.n	80050e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050ba:	4b24      	ldr	r3, [pc, #144]	; (800514c <HAL_RCC_OscConfig+0x278>)
 80050bc:	2200      	movs	r2, #0
 80050be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c0:	f7fd fcda 	bl	8002a78 <HAL_GetTick>
 80050c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050c6:	e008      	b.n	80050da <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050c8:	f7fd fcd6 	bl	8002a78 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	d901      	bls.n	80050da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80050d6:	2303      	movs	r3, #3
 80050d8:	e193      	b.n	8005402 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050da:	4b1b      	ldr	r3, [pc, #108]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1f0      	bne.n	80050c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0308 	and.w	r3, r3, #8
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d036      	beq.n	8005160 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d016      	beq.n	8005128 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050fa:	4b15      	ldr	r3, [pc, #84]	; (8005150 <HAL_RCC_OscConfig+0x27c>)
 80050fc:	2201      	movs	r2, #1
 80050fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005100:	f7fd fcba 	bl	8002a78 <HAL_GetTick>
 8005104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005106:	e008      	b.n	800511a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005108:	f7fd fcb6 	bl	8002a78 <HAL_GetTick>
 800510c:	4602      	mov	r2, r0
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b02      	cmp	r3, #2
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e173      	b.n	8005402 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800511a:	4b0b      	ldr	r3, [pc, #44]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 800511c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d0f0      	beq.n	8005108 <HAL_RCC_OscConfig+0x234>
 8005126:	e01b      	b.n	8005160 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005128:	4b09      	ldr	r3, [pc, #36]	; (8005150 <HAL_RCC_OscConfig+0x27c>)
 800512a:	2200      	movs	r2, #0
 800512c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800512e:	f7fd fca3 	bl	8002a78 <HAL_GetTick>
 8005132:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005134:	e00e      	b.n	8005154 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005136:	f7fd fc9f 	bl	8002a78 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d907      	bls.n	8005154 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e15c      	b.n	8005402 <HAL_RCC_OscConfig+0x52e>
 8005148:	40023800 	.word	0x40023800
 800514c:	42470000 	.word	0x42470000
 8005150:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005154:	4b8a      	ldr	r3, [pc, #552]	; (8005380 <HAL_RCC_OscConfig+0x4ac>)
 8005156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1ea      	bne.n	8005136 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 8097 	beq.w	800529c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800516e:	2300      	movs	r3, #0
 8005170:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005172:	4b83      	ldr	r3, [pc, #524]	; (8005380 <HAL_RCC_OscConfig+0x4ac>)
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10f      	bne.n	800519e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800517e:	2300      	movs	r3, #0
 8005180:	60bb      	str	r3, [r7, #8]
 8005182:	4b7f      	ldr	r3, [pc, #508]	; (8005380 <HAL_RCC_OscConfig+0x4ac>)
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	4a7e      	ldr	r2, [pc, #504]	; (8005380 <HAL_RCC_OscConfig+0x4ac>)
 8005188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800518c:	6413      	str	r3, [r2, #64]	; 0x40
 800518e:	4b7c      	ldr	r3, [pc, #496]	; (8005380 <HAL_RCC_OscConfig+0x4ac>)
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005196:	60bb      	str	r3, [r7, #8]
 8005198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800519a:	2301      	movs	r3, #1
 800519c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800519e:	4b79      	ldr	r3, [pc, #484]	; (8005384 <HAL_RCC_OscConfig+0x4b0>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d118      	bne.n	80051dc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051aa:	4b76      	ldr	r3, [pc, #472]	; (8005384 <HAL_RCC_OscConfig+0x4b0>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a75      	ldr	r2, [pc, #468]	; (8005384 <HAL_RCC_OscConfig+0x4b0>)
 80051b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051b6:	f7fd fc5f 	bl	8002a78 <HAL_GetTick>
 80051ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051bc:	e008      	b.n	80051d0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051be:	f7fd fc5b 	bl	8002a78 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d901      	bls.n	80051d0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e118      	b.n	8005402 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d0:	4b6c      	ldr	r3, [pc, #432]	; (8005384 <HAL_RCC_OscConfig+0x4b0>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d0f0      	beq.n	80051be <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d106      	bne.n	80051f2 <HAL_RCC_OscConfig+0x31e>
 80051e4:	4b66      	ldr	r3, [pc, #408]	; (8005380 <HAL_RCC_OscConfig+0x4ac>)
 80051e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e8:	4a65      	ldr	r2, [pc, #404]	; (8005380 <HAL_RCC_OscConfig+0x4ac>)
 80051ea:	f043 0301 	orr.w	r3, r3, #1
 80051ee:	6713      	str	r3, [r2, #112]	; 0x70
 80051f0:	e01c      	b.n	800522c <HAL_RCC_OscConfig+0x358>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	2b05      	cmp	r3, #5
 80051f8:	d10c      	bne.n	8005214 <HAL_RCC_OscConfig+0x340>
 80051fa:	4b61      	ldr	r3, [pc, #388]	; (8005380 <HAL_RCC_OscConfig+0x4ac>)
 80051fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fe:	4a60      	ldr	r2, [pc, #384]	; (8005380 <HAL_RCC_OscConfig+0x4ac>)
 8005200:	f043 0304 	orr.w	r3, r3, #4
 8005204:	6713      	str	r3, [r2, #112]	; 0x70
 8005206:	4b5e      	ldr	r3, [pc, #376]	; (8005380 <HAL_RCC_OscConfig+0x4ac>)
 8005208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520a:	4a5d      	ldr	r2, [pc, #372]	; (8005380 <HAL_RCC_OscConfig+0x4ac>)
 800520c:	f043 0301 	orr.w	r3, r3, #1
 8005210:	6713      	str	r3, [r2, #112]	; 0x70
 8005212:	e00b      	b.n	800522c <HAL_RCC_OscConfig+0x358>
 8005214:	4b5a      	ldr	r3, [pc, #360]	; (8005380 <HAL_RCC_OscConfig+0x4ac>)
 8005216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005218:	4a59      	ldr	r2, [pc, #356]	; (8005380 <HAL_RCC_OscConfig+0x4ac>)
 800521a:	f023 0301 	bic.w	r3, r3, #1
 800521e:	6713      	str	r3, [r2, #112]	; 0x70
 8005220:	4b57      	ldr	r3, [pc, #348]	; (8005380 <HAL_RCC_OscConfig+0x4ac>)
 8005222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005224:	4a56      	ldr	r2, [pc, #344]	; (8005380 <HAL_RCC_OscConfig+0x4ac>)
 8005226:	f023 0304 	bic.w	r3, r3, #4
 800522a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d015      	beq.n	8005260 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005234:	f7fd fc20 	bl	8002a78 <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800523a:	e00a      	b.n	8005252 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800523c:	f7fd fc1c 	bl	8002a78 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	f241 3288 	movw	r2, #5000	; 0x1388
 800524a:	4293      	cmp	r3, r2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e0d7      	b.n	8005402 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005252:	4b4b      	ldr	r3, [pc, #300]	; (8005380 <HAL_RCC_OscConfig+0x4ac>)
 8005254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d0ee      	beq.n	800523c <HAL_RCC_OscConfig+0x368>
 800525e:	e014      	b.n	800528a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005260:	f7fd fc0a 	bl	8002a78 <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005266:	e00a      	b.n	800527e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005268:	f7fd fc06 	bl	8002a78 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	f241 3288 	movw	r2, #5000	; 0x1388
 8005276:	4293      	cmp	r3, r2
 8005278:	d901      	bls.n	800527e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	e0c1      	b.n	8005402 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800527e:	4b40      	ldr	r3, [pc, #256]	; (8005380 <HAL_RCC_OscConfig+0x4ac>)
 8005280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005282:	f003 0302 	and.w	r3, r3, #2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d1ee      	bne.n	8005268 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800528a:	7dfb      	ldrb	r3, [r7, #23]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d105      	bne.n	800529c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005290:	4b3b      	ldr	r3, [pc, #236]	; (8005380 <HAL_RCC_OscConfig+0x4ac>)
 8005292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005294:	4a3a      	ldr	r2, [pc, #232]	; (8005380 <HAL_RCC_OscConfig+0x4ac>)
 8005296:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800529a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 80ad 	beq.w	8005400 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052a6:	4b36      	ldr	r3, [pc, #216]	; (8005380 <HAL_RCC_OscConfig+0x4ac>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 030c 	and.w	r3, r3, #12
 80052ae:	2b08      	cmp	r3, #8
 80052b0:	d060      	beq.n	8005374 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d145      	bne.n	8005346 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ba:	4b33      	ldr	r3, [pc, #204]	; (8005388 <HAL_RCC_OscConfig+0x4b4>)
 80052bc:	2200      	movs	r2, #0
 80052be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c0:	f7fd fbda 	bl	8002a78 <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052c8:	f7fd fbd6 	bl	8002a78 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e093      	b.n	8005402 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052da:	4b29      	ldr	r3, [pc, #164]	; (8005380 <HAL_RCC_OscConfig+0x4ac>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1f0      	bne.n	80052c8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	69da      	ldr	r2, [r3, #28]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	431a      	orrs	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f4:	019b      	lsls	r3, r3, #6
 80052f6:	431a      	orrs	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fc:	085b      	lsrs	r3, r3, #1
 80052fe:	3b01      	subs	r3, #1
 8005300:	041b      	lsls	r3, r3, #16
 8005302:	431a      	orrs	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005308:	061b      	lsls	r3, r3, #24
 800530a:	431a      	orrs	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005310:	071b      	lsls	r3, r3, #28
 8005312:	491b      	ldr	r1, [pc, #108]	; (8005380 <HAL_RCC_OscConfig+0x4ac>)
 8005314:	4313      	orrs	r3, r2
 8005316:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005318:	4b1b      	ldr	r3, [pc, #108]	; (8005388 <HAL_RCC_OscConfig+0x4b4>)
 800531a:	2201      	movs	r2, #1
 800531c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800531e:	f7fd fbab 	bl	8002a78 <HAL_GetTick>
 8005322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005324:	e008      	b.n	8005338 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005326:	f7fd fba7 	bl	8002a78 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	2b02      	cmp	r3, #2
 8005332:	d901      	bls.n	8005338 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e064      	b.n	8005402 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005338:	4b11      	ldr	r3, [pc, #68]	; (8005380 <HAL_RCC_OscConfig+0x4ac>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0f0      	beq.n	8005326 <HAL_RCC_OscConfig+0x452>
 8005344:	e05c      	b.n	8005400 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005346:	4b10      	ldr	r3, [pc, #64]	; (8005388 <HAL_RCC_OscConfig+0x4b4>)
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534c:	f7fd fb94 	bl	8002a78 <HAL_GetTick>
 8005350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005352:	e008      	b.n	8005366 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005354:	f7fd fb90 	bl	8002a78 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e04d      	b.n	8005402 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005366:	4b06      	ldr	r3, [pc, #24]	; (8005380 <HAL_RCC_OscConfig+0x4ac>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1f0      	bne.n	8005354 <HAL_RCC_OscConfig+0x480>
 8005372:	e045      	b.n	8005400 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d107      	bne.n	800538c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e040      	b.n	8005402 <HAL_RCC_OscConfig+0x52e>
 8005380:	40023800 	.word	0x40023800
 8005384:	40007000 	.word	0x40007000
 8005388:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800538c:	4b1f      	ldr	r3, [pc, #124]	; (800540c <HAL_RCC_OscConfig+0x538>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d030      	beq.n	80053fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d129      	bne.n	80053fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d122      	bne.n	80053fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80053bc:	4013      	ands	r3, r2
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d119      	bne.n	80053fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d2:	085b      	lsrs	r3, r3, #1
 80053d4:	3b01      	subs	r3, #1
 80053d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053d8:	429a      	cmp	r2, r3
 80053da:	d10f      	bne.n	80053fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d107      	bne.n	80053fc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d001      	beq.n	8005400 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e000      	b.n	8005402 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3718      	adds	r7, #24
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	40023800 	.word	0x40023800

08005410 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e03f      	b.n	80054a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d106      	bne.n	800543c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7fd f9b4 	bl	80027a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2224      	movs	r2, #36	; 0x24
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68da      	ldr	r2, [r3, #12]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005452:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f929 	bl	80056ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	691a      	ldr	r2, [r3, #16]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005468:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695a      	ldr	r2, [r3, #20]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005478:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68da      	ldr	r2, [r3, #12]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005488:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2220      	movs	r2, #32
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2220      	movs	r2, #32
 800549c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3708      	adds	r7, #8
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054aa:	b580      	push	{r7, lr}
 80054ac:	b08a      	sub	sp, #40	; 0x28
 80054ae:	af02      	add	r7, sp, #8
 80054b0:	60f8      	str	r0, [r7, #12]
 80054b2:	60b9      	str	r1, [r7, #8]
 80054b4:	603b      	str	r3, [r7, #0]
 80054b6:	4613      	mov	r3, r2
 80054b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b20      	cmp	r3, #32
 80054c8:	d17c      	bne.n	80055c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <HAL_UART_Transmit+0x2c>
 80054d0:	88fb      	ldrh	r3, [r7, #6]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e075      	b.n	80055c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d101      	bne.n	80054e8 <HAL_UART_Transmit+0x3e>
 80054e4:	2302      	movs	r3, #2
 80054e6:	e06e      	b.n	80055c6 <HAL_UART_Transmit+0x11c>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2221      	movs	r2, #33	; 0x21
 80054fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054fe:	f7fd fabb 	bl	8002a78 <HAL_GetTick>
 8005502:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	88fa      	ldrh	r2, [r7, #6]
 8005508:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	88fa      	ldrh	r2, [r7, #6]
 800550e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005518:	d108      	bne.n	800552c <HAL_UART_Transmit+0x82>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d104      	bne.n	800552c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005522:	2300      	movs	r3, #0
 8005524:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	61bb      	str	r3, [r7, #24]
 800552a:	e003      	b.n	8005534 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005530:	2300      	movs	r3, #0
 8005532:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800553c:	e02a      	b.n	8005594 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	2200      	movs	r2, #0
 8005546:	2180      	movs	r1, #128	; 0x80
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f000 f840 	bl	80055ce <UART_WaitOnFlagUntilTimeout>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d001      	beq.n	8005558 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e036      	b.n	80055c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10b      	bne.n	8005576 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	881b      	ldrh	r3, [r3, #0]
 8005562:	461a      	mov	r2, r3
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800556c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	3302      	adds	r3, #2
 8005572:	61bb      	str	r3, [r7, #24]
 8005574:	e007      	b.n	8005586 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	781a      	ldrb	r2, [r3, #0]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	3301      	adds	r3, #1
 8005584:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800558a:	b29b      	uxth	r3, r3
 800558c:	3b01      	subs	r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005598:	b29b      	uxth	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1cf      	bne.n	800553e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	9300      	str	r3, [sp, #0]
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	2200      	movs	r2, #0
 80055a6:	2140      	movs	r1, #64	; 0x40
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f000 f810 	bl	80055ce <UART_WaitOnFlagUntilTimeout>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d001      	beq.n	80055b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e006      	b.n	80055c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2220      	movs	r2, #32
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80055c0:	2300      	movs	r3, #0
 80055c2:	e000      	b.n	80055c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80055c4:	2302      	movs	r3, #2
  }
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3720      	adds	r7, #32
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b090      	sub	sp, #64	; 0x40
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	60f8      	str	r0, [r7, #12]
 80055d6:	60b9      	str	r1, [r7, #8]
 80055d8:	603b      	str	r3, [r7, #0]
 80055da:	4613      	mov	r3, r2
 80055dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055de:	e050      	b.n	8005682 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055e6:	d04c      	beq.n	8005682 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80055e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d007      	beq.n	80055fe <UART_WaitOnFlagUntilTimeout+0x30>
 80055ee:	f7fd fa43 	bl	8002a78 <HAL_GetTick>
 80055f2:	4602      	mov	r2, r0
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	1ad3      	subs	r3, r2, r3
 80055f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d241      	bcs.n	8005682 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	330c      	adds	r3, #12
 8005604:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005608:	e853 3f00 	ldrex	r3, [r3]
 800560c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005614:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	330c      	adds	r3, #12
 800561c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800561e:	637a      	str	r2, [r7, #52]	; 0x34
 8005620:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005622:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005624:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005626:	e841 2300 	strex	r3, r2, [r1]
 800562a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800562c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1e5      	bne.n	80055fe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	3314      	adds	r3, #20
 8005638:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	e853 3f00 	ldrex	r3, [r3]
 8005640:	613b      	str	r3, [r7, #16]
   return(result);
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f023 0301 	bic.w	r3, r3, #1
 8005648:	63bb      	str	r3, [r7, #56]	; 0x38
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	3314      	adds	r3, #20
 8005650:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005652:	623a      	str	r2, [r7, #32]
 8005654:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005656:	69f9      	ldr	r1, [r7, #28]
 8005658:	6a3a      	ldr	r2, [r7, #32]
 800565a:	e841 2300 	strex	r3, r2, [r1]
 800565e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1e5      	bne.n	8005632 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2220      	movs	r2, #32
 800566a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2220      	movs	r2, #32
 8005672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e00f      	b.n	80056a2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	4013      	ands	r3, r2
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	429a      	cmp	r2, r3
 8005690:	bf0c      	ite	eq
 8005692:	2301      	moveq	r3, #1
 8005694:	2300      	movne	r3, #0
 8005696:	b2db      	uxtb	r3, r3
 8005698:	461a      	mov	r2, r3
 800569a:	79fb      	ldrb	r3, [r7, #7]
 800569c:	429a      	cmp	r2, r3
 800569e:	d09f      	beq.n	80055e0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3740      	adds	r7, #64	; 0x40
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
	...

080056ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b0:	b09f      	sub	sp, #124	; 0x7c
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80056c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056c2:	68d9      	ldr	r1, [r3, #12]
 80056c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	ea40 0301 	orr.w	r3, r0, r1
 80056cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	431a      	orrs	r2, r3
 80056d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056da:	695b      	ldr	r3, [r3, #20]
 80056dc:	431a      	orrs	r2, r3
 80056de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80056e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80056f0:	f021 010c 	bic.w	r1, r1, #12
 80056f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056fa:	430b      	orrs	r3, r1
 80056fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	695b      	ldr	r3, [r3, #20]
 8005704:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800570a:	6999      	ldr	r1, [r3, #24]
 800570c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	ea40 0301 	orr.w	r3, r0, r1
 8005714:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	4bc5      	ldr	r3, [pc, #788]	; (8005a30 <UART_SetConfig+0x384>)
 800571c:	429a      	cmp	r2, r3
 800571e:	d004      	beq.n	800572a <UART_SetConfig+0x7e>
 8005720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	4bc3      	ldr	r3, [pc, #780]	; (8005a34 <UART_SetConfig+0x388>)
 8005726:	429a      	cmp	r2, r3
 8005728:	d103      	bne.n	8005732 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800572a:	f7ff fa0d 	bl	8004b48 <HAL_RCC_GetPCLK2Freq>
 800572e:	6778      	str	r0, [r7, #116]	; 0x74
 8005730:	e002      	b.n	8005738 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005732:	f7ff f9f5 	bl	8004b20 <HAL_RCC_GetPCLK1Freq>
 8005736:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800573a:	69db      	ldr	r3, [r3, #28]
 800573c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005740:	f040 80b6 	bne.w	80058b0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005744:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005746:	461c      	mov	r4, r3
 8005748:	f04f 0500 	mov.w	r5, #0
 800574c:	4622      	mov	r2, r4
 800574e:	462b      	mov	r3, r5
 8005750:	1891      	adds	r1, r2, r2
 8005752:	6439      	str	r1, [r7, #64]	; 0x40
 8005754:	415b      	adcs	r3, r3
 8005756:	647b      	str	r3, [r7, #68]	; 0x44
 8005758:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800575c:	1912      	adds	r2, r2, r4
 800575e:	eb45 0303 	adc.w	r3, r5, r3
 8005762:	f04f 0000 	mov.w	r0, #0
 8005766:	f04f 0100 	mov.w	r1, #0
 800576a:	00d9      	lsls	r1, r3, #3
 800576c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005770:	00d0      	lsls	r0, r2, #3
 8005772:	4602      	mov	r2, r0
 8005774:	460b      	mov	r3, r1
 8005776:	1911      	adds	r1, r2, r4
 8005778:	6639      	str	r1, [r7, #96]	; 0x60
 800577a:	416b      	adcs	r3, r5
 800577c:	667b      	str	r3, [r7, #100]	; 0x64
 800577e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	461a      	mov	r2, r3
 8005784:	f04f 0300 	mov.w	r3, #0
 8005788:	1891      	adds	r1, r2, r2
 800578a:	63b9      	str	r1, [r7, #56]	; 0x38
 800578c:	415b      	adcs	r3, r3
 800578e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005790:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005794:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005798:	f7fb fa48 	bl	8000c2c <__aeabi_uldivmod>
 800579c:	4602      	mov	r2, r0
 800579e:	460b      	mov	r3, r1
 80057a0:	4ba5      	ldr	r3, [pc, #660]	; (8005a38 <UART_SetConfig+0x38c>)
 80057a2:	fba3 2302 	umull	r2, r3, r3, r2
 80057a6:	095b      	lsrs	r3, r3, #5
 80057a8:	011e      	lsls	r6, r3, #4
 80057aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057ac:	461c      	mov	r4, r3
 80057ae:	f04f 0500 	mov.w	r5, #0
 80057b2:	4622      	mov	r2, r4
 80057b4:	462b      	mov	r3, r5
 80057b6:	1891      	adds	r1, r2, r2
 80057b8:	6339      	str	r1, [r7, #48]	; 0x30
 80057ba:	415b      	adcs	r3, r3
 80057bc:	637b      	str	r3, [r7, #52]	; 0x34
 80057be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80057c2:	1912      	adds	r2, r2, r4
 80057c4:	eb45 0303 	adc.w	r3, r5, r3
 80057c8:	f04f 0000 	mov.w	r0, #0
 80057cc:	f04f 0100 	mov.w	r1, #0
 80057d0:	00d9      	lsls	r1, r3, #3
 80057d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057d6:	00d0      	lsls	r0, r2, #3
 80057d8:	4602      	mov	r2, r0
 80057da:	460b      	mov	r3, r1
 80057dc:	1911      	adds	r1, r2, r4
 80057de:	65b9      	str	r1, [r7, #88]	; 0x58
 80057e0:	416b      	adcs	r3, r5
 80057e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	461a      	mov	r2, r3
 80057ea:	f04f 0300 	mov.w	r3, #0
 80057ee:	1891      	adds	r1, r2, r2
 80057f0:	62b9      	str	r1, [r7, #40]	; 0x28
 80057f2:	415b      	adcs	r3, r3
 80057f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057fa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80057fe:	f7fb fa15 	bl	8000c2c <__aeabi_uldivmod>
 8005802:	4602      	mov	r2, r0
 8005804:	460b      	mov	r3, r1
 8005806:	4b8c      	ldr	r3, [pc, #560]	; (8005a38 <UART_SetConfig+0x38c>)
 8005808:	fba3 1302 	umull	r1, r3, r3, r2
 800580c:	095b      	lsrs	r3, r3, #5
 800580e:	2164      	movs	r1, #100	; 0x64
 8005810:	fb01 f303 	mul.w	r3, r1, r3
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	3332      	adds	r3, #50	; 0x32
 800581a:	4a87      	ldr	r2, [pc, #540]	; (8005a38 <UART_SetConfig+0x38c>)
 800581c:	fba2 2303 	umull	r2, r3, r2, r3
 8005820:	095b      	lsrs	r3, r3, #5
 8005822:	005b      	lsls	r3, r3, #1
 8005824:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005828:	441e      	add	r6, r3
 800582a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800582c:	4618      	mov	r0, r3
 800582e:	f04f 0100 	mov.w	r1, #0
 8005832:	4602      	mov	r2, r0
 8005834:	460b      	mov	r3, r1
 8005836:	1894      	adds	r4, r2, r2
 8005838:	623c      	str	r4, [r7, #32]
 800583a:	415b      	adcs	r3, r3
 800583c:	627b      	str	r3, [r7, #36]	; 0x24
 800583e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005842:	1812      	adds	r2, r2, r0
 8005844:	eb41 0303 	adc.w	r3, r1, r3
 8005848:	f04f 0400 	mov.w	r4, #0
 800584c:	f04f 0500 	mov.w	r5, #0
 8005850:	00dd      	lsls	r5, r3, #3
 8005852:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005856:	00d4      	lsls	r4, r2, #3
 8005858:	4622      	mov	r2, r4
 800585a:	462b      	mov	r3, r5
 800585c:	1814      	adds	r4, r2, r0
 800585e:	653c      	str	r4, [r7, #80]	; 0x50
 8005860:	414b      	adcs	r3, r1
 8005862:	657b      	str	r3, [r7, #84]	; 0x54
 8005864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	461a      	mov	r2, r3
 800586a:	f04f 0300 	mov.w	r3, #0
 800586e:	1891      	adds	r1, r2, r2
 8005870:	61b9      	str	r1, [r7, #24]
 8005872:	415b      	adcs	r3, r3
 8005874:	61fb      	str	r3, [r7, #28]
 8005876:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800587a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800587e:	f7fb f9d5 	bl	8000c2c <__aeabi_uldivmod>
 8005882:	4602      	mov	r2, r0
 8005884:	460b      	mov	r3, r1
 8005886:	4b6c      	ldr	r3, [pc, #432]	; (8005a38 <UART_SetConfig+0x38c>)
 8005888:	fba3 1302 	umull	r1, r3, r3, r2
 800588c:	095b      	lsrs	r3, r3, #5
 800588e:	2164      	movs	r1, #100	; 0x64
 8005890:	fb01 f303 	mul.w	r3, r1, r3
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	3332      	adds	r3, #50	; 0x32
 800589a:	4a67      	ldr	r2, [pc, #412]	; (8005a38 <UART_SetConfig+0x38c>)
 800589c:	fba2 2303 	umull	r2, r3, r2, r3
 80058a0:	095b      	lsrs	r3, r3, #5
 80058a2:	f003 0207 	and.w	r2, r3, #7
 80058a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4432      	add	r2, r6
 80058ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058ae:	e0b9      	b.n	8005a24 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058b2:	461c      	mov	r4, r3
 80058b4:	f04f 0500 	mov.w	r5, #0
 80058b8:	4622      	mov	r2, r4
 80058ba:	462b      	mov	r3, r5
 80058bc:	1891      	adds	r1, r2, r2
 80058be:	6139      	str	r1, [r7, #16]
 80058c0:	415b      	adcs	r3, r3
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80058c8:	1912      	adds	r2, r2, r4
 80058ca:	eb45 0303 	adc.w	r3, r5, r3
 80058ce:	f04f 0000 	mov.w	r0, #0
 80058d2:	f04f 0100 	mov.w	r1, #0
 80058d6:	00d9      	lsls	r1, r3, #3
 80058d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058dc:	00d0      	lsls	r0, r2, #3
 80058de:	4602      	mov	r2, r0
 80058e0:	460b      	mov	r3, r1
 80058e2:	eb12 0804 	adds.w	r8, r2, r4
 80058e6:	eb43 0905 	adc.w	r9, r3, r5
 80058ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f04f 0100 	mov.w	r1, #0
 80058f4:	f04f 0200 	mov.w	r2, #0
 80058f8:	f04f 0300 	mov.w	r3, #0
 80058fc:	008b      	lsls	r3, r1, #2
 80058fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005902:	0082      	lsls	r2, r0, #2
 8005904:	4640      	mov	r0, r8
 8005906:	4649      	mov	r1, r9
 8005908:	f7fb f990 	bl	8000c2c <__aeabi_uldivmod>
 800590c:	4602      	mov	r2, r0
 800590e:	460b      	mov	r3, r1
 8005910:	4b49      	ldr	r3, [pc, #292]	; (8005a38 <UART_SetConfig+0x38c>)
 8005912:	fba3 2302 	umull	r2, r3, r3, r2
 8005916:	095b      	lsrs	r3, r3, #5
 8005918:	011e      	lsls	r6, r3, #4
 800591a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800591c:	4618      	mov	r0, r3
 800591e:	f04f 0100 	mov.w	r1, #0
 8005922:	4602      	mov	r2, r0
 8005924:	460b      	mov	r3, r1
 8005926:	1894      	adds	r4, r2, r2
 8005928:	60bc      	str	r4, [r7, #8]
 800592a:	415b      	adcs	r3, r3
 800592c:	60fb      	str	r3, [r7, #12]
 800592e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005932:	1812      	adds	r2, r2, r0
 8005934:	eb41 0303 	adc.w	r3, r1, r3
 8005938:	f04f 0400 	mov.w	r4, #0
 800593c:	f04f 0500 	mov.w	r5, #0
 8005940:	00dd      	lsls	r5, r3, #3
 8005942:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005946:	00d4      	lsls	r4, r2, #3
 8005948:	4622      	mov	r2, r4
 800594a:	462b      	mov	r3, r5
 800594c:	1814      	adds	r4, r2, r0
 800594e:	64bc      	str	r4, [r7, #72]	; 0x48
 8005950:	414b      	adcs	r3, r1
 8005952:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	4618      	mov	r0, r3
 800595a:	f04f 0100 	mov.w	r1, #0
 800595e:	f04f 0200 	mov.w	r2, #0
 8005962:	f04f 0300 	mov.w	r3, #0
 8005966:	008b      	lsls	r3, r1, #2
 8005968:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800596c:	0082      	lsls	r2, r0, #2
 800596e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005972:	f7fb f95b 	bl	8000c2c <__aeabi_uldivmod>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	4b2f      	ldr	r3, [pc, #188]	; (8005a38 <UART_SetConfig+0x38c>)
 800597c:	fba3 1302 	umull	r1, r3, r3, r2
 8005980:	095b      	lsrs	r3, r3, #5
 8005982:	2164      	movs	r1, #100	; 0x64
 8005984:	fb01 f303 	mul.w	r3, r1, r3
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	011b      	lsls	r3, r3, #4
 800598c:	3332      	adds	r3, #50	; 0x32
 800598e:	4a2a      	ldr	r2, [pc, #168]	; (8005a38 <UART_SetConfig+0x38c>)
 8005990:	fba2 2303 	umull	r2, r3, r2, r3
 8005994:	095b      	lsrs	r3, r3, #5
 8005996:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800599a:	441e      	add	r6, r3
 800599c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800599e:	4618      	mov	r0, r3
 80059a0:	f04f 0100 	mov.w	r1, #0
 80059a4:	4602      	mov	r2, r0
 80059a6:	460b      	mov	r3, r1
 80059a8:	1894      	adds	r4, r2, r2
 80059aa:	603c      	str	r4, [r7, #0]
 80059ac:	415b      	adcs	r3, r3
 80059ae:	607b      	str	r3, [r7, #4]
 80059b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059b4:	1812      	adds	r2, r2, r0
 80059b6:	eb41 0303 	adc.w	r3, r1, r3
 80059ba:	f04f 0400 	mov.w	r4, #0
 80059be:	f04f 0500 	mov.w	r5, #0
 80059c2:	00dd      	lsls	r5, r3, #3
 80059c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059c8:	00d4      	lsls	r4, r2, #3
 80059ca:	4622      	mov	r2, r4
 80059cc:	462b      	mov	r3, r5
 80059ce:	eb12 0a00 	adds.w	sl, r2, r0
 80059d2:	eb43 0b01 	adc.w	fp, r3, r1
 80059d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	4618      	mov	r0, r3
 80059dc:	f04f 0100 	mov.w	r1, #0
 80059e0:	f04f 0200 	mov.w	r2, #0
 80059e4:	f04f 0300 	mov.w	r3, #0
 80059e8:	008b      	lsls	r3, r1, #2
 80059ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80059ee:	0082      	lsls	r2, r0, #2
 80059f0:	4650      	mov	r0, sl
 80059f2:	4659      	mov	r1, fp
 80059f4:	f7fb f91a 	bl	8000c2c <__aeabi_uldivmod>
 80059f8:	4602      	mov	r2, r0
 80059fa:	460b      	mov	r3, r1
 80059fc:	4b0e      	ldr	r3, [pc, #56]	; (8005a38 <UART_SetConfig+0x38c>)
 80059fe:	fba3 1302 	umull	r1, r3, r3, r2
 8005a02:	095b      	lsrs	r3, r3, #5
 8005a04:	2164      	movs	r1, #100	; 0x64
 8005a06:	fb01 f303 	mul.w	r3, r1, r3
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	011b      	lsls	r3, r3, #4
 8005a0e:	3332      	adds	r3, #50	; 0x32
 8005a10:	4a09      	ldr	r2, [pc, #36]	; (8005a38 <UART_SetConfig+0x38c>)
 8005a12:	fba2 2303 	umull	r2, r3, r2, r3
 8005a16:	095b      	lsrs	r3, r3, #5
 8005a18:	f003 020f 	and.w	r2, r3, #15
 8005a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4432      	add	r2, r6
 8005a22:	609a      	str	r2, [r3, #8]
}
 8005a24:	bf00      	nop
 8005a26:	377c      	adds	r7, #124	; 0x7c
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a2e:	bf00      	nop
 8005a30:	40011000 	.word	0x40011000
 8005a34:	40011400 	.word	0x40011400
 8005a38:	51eb851f 	.word	0x51eb851f

08005a3c <calloc>:
 8005a3c:	4b02      	ldr	r3, [pc, #8]	; (8005a48 <calloc+0xc>)
 8005a3e:	460a      	mov	r2, r1
 8005a40:	4601      	mov	r1, r0
 8005a42:	6818      	ldr	r0, [r3, #0]
 8005a44:	f000 b856 	b.w	8005af4 <_calloc_r>
 8005a48:	2000000c 	.word	0x2000000c

08005a4c <__errno>:
 8005a4c:	4b01      	ldr	r3, [pc, #4]	; (8005a54 <__errno+0x8>)
 8005a4e:	6818      	ldr	r0, [r3, #0]
 8005a50:	4770      	bx	lr
 8005a52:	bf00      	nop
 8005a54:	2000000c 	.word	0x2000000c

08005a58 <__libc_init_array>:
 8005a58:	b570      	push	{r4, r5, r6, lr}
 8005a5a:	4d0d      	ldr	r5, [pc, #52]	; (8005a90 <__libc_init_array+0x38>)
 8005a5c:	4c0d      	ldr	r4, [pc, #52]	; (8005a94 <__libc_init_array+0x3c>)
 8005a5e:	1b64      	subs	r4, r4, r5
 8005a60:	10a4      	asrs	r4, r4, #2
 8005a62:	2600      	movs	r6, #0
 8005a64:	42a6      	cmp	r6, r4
 8005a66:	d109      	bne.n	8005a7c <__libc_init_array+0x24>
 8005a68:	4d0b      	ldr	r5, [pc, #44]	; (8005a98 <__libc_init_array+0x40>)
 8005a6a:	4c0c      	ldr	r4, [pc, #48]	; (8005a9c <__libc_init_array+0x44>)
 8005a6c:	f000 fcca 	bl	8006404 <_init>
 8005a70:	1b64      	subs	r4, r4, r5
 8005a72:	10a4      	asrs	r4, r4, #2
 8005a74:	2600      	movs	r6, #0
 8005a76:	42a6      	cmp	r6, r4
 8005a78:	d105      	bne.n	8005a86 <__libc_init_array+0x2e>
 8005a7a:	bd70      	pop	{r4, r5, r6, pc}
 8005a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a80:	4798      	blx	r3
 8005a82:	3601      	adds	r6, #1
 8005a84:	e7ee      	b.n	8005a64 <__libc_init_array+0xc>
 8005a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a8a:	4798      	blx	r3
 8005a8c:	3601      	adds	r6, #1
 8005a8e:	e7f2      	b.n	8005a76 <__libc_init_array+0x1e>
 8005a90:	0800652c 	.word	0x0800652c
 8005a94:	0800652c 	.word	0x0800652c
 8005a98:	0800652c 	.word	0x0800652c
 8005a9c:	08006530 	.word	0x08006530

08005aa0 <__itoa>:
 8005aa0:	1e93      	subs	r3, r2, #2
 8005aa2:	2b22      	cmp	r3, #34	; 0x22
 8005aa4:	b510      	push	{r4, lr}
 8005aa6:	460c      	mov	r4, r1
 8005aa8:	d904      	bls.n	8005ab4 <__itoa+0x14>
 8005aaa:	2300      	movs	r3, #0
 8005aac:	700b      	strb	r3, [r1, #0]
 8005aae:	461c      	mov	r4, r3
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	bd10      	pop	{r4, pc}
 8005ab4:	2a0a      	cmp	r2, #10
 8005ab6:	d109      	bne.n	8005acc <__itoa+0x2c>
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	da07      	bge.n	8005acc <__itoa+0x2c>
 8005abc:	232d      	movs	r3, #45	; 0x2d
 8005abe:	700b      	strb	r3, [r1, #0]
 8005ac0:	4240      	negs	r0, r0
 8005ac2:	2101      	movs	r1, #1
 8005ac4:	4421      	add	r1, r4
 8005ac6:	f000 f907 	bl	8005cd8 <__utoa>
 8005aca:	e7f1      	b.n	8005ab0 <__itoa+0x10>
 8005acc:	2100      	movs	r1, #0
 8005ace:	e7f9      	b.n	8005ac4 <__itoa+0x24>

08005ad0 <itoa>:
 8005ad0:	f7ff bfe6 	b.w	8005aa0 <__itoa>

08005ad4 <malloc>:
 8005ad4:	4b02      	ldr	r3, [pc, #8]	; (8005ae0 <malloc+0xc>)
 8005ad6:	4601      	mov	r1, r0
 8005ad8:	6818      	ldr	r0, [r3, #0]
 8005ada:	f000 b86b 	b.w	8005bb4 <_malloc_r>
 8005ade:	bf00      	nop
 8005ae0:	2000000c 	.word	0x2000000c

08005ae4 <memset>:
 8005ae4:	4402      	add	r2, r0
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d100      	bne.n	8005aee <memset+0xa>
 8005aec:	4770      	bx	lr
 8005aee:	f803 1b01 	strb.w	r1, [r3], #1
 8005af2:	e7f9      	b.n	8005ae8 <memset+0x4>

08005af4 <_calloc_r>:
 8005af4:	b513      	push	{r0, r1, r4, lr}
 8005af6:	434a      	muls	r2, r1
 8005af8:	4611      	mov	r1, r2
 8005afa:	9201      	str	r2, [sp, #4]
 8005afc:	f000 f85a 	bl	8005bb4 <_malloc_r>
 8005b00:	4604      	mov	r4, r0
 8005b02:	b118      	cbz	r0, 8005b0c <_calloc_r+0x18>
 8005b04:	9a01      	ldr	r2, [sp, #4]
 8005b06:	2100      	movs	r1, #0
 8005b08:	f7ff ffec 	bl	8005ae4 <memset>
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	b002      	add	sp, #8
 8005b10:	bd10      	pop	{r4, pc}
	...

08005b14 <_free_r>:
 8005b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b16:	2900      	cmp	r1, #0
 8005b18:	d048      	beq.n	8005bac <_free_r+0x98>
 8005b1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b1e:	9001      	str	r0, [sp, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f1a1 0404 	sub.w	r4, r1, #4
 8005b26:	bfb8      	it	lt
 8005b28:	18e4      	addlt	r4, r4, r3
 8005b2a:	f000 f917 	bl	8005d5c <__malloc_lock>
 8005b2e:	4a20      	ldr	r2, [pc, #128]	; (8005bb0 <_free_r+0x9c>)
 8005b30:	9801      	ldr	r0, [sp, #4]
 8005b32:	6813      	ldr	r3, [r2, #0]
 8005b34:	4615      	mov	r5, r2
 8005b36:	b933      	cbnz	r3, 8005b46 <_free_r+0x32>
 8005b38:	6063      	str	r3, [r4, #4]
 8005b3a:	6014      	str	r4, [r2, #0]
 8005b3c:	b003      	add	sp, #12
 8005b3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b42:	f000 b911 	b.w	8005d68 <__malloc_unlock>
 8005b46:	42a3      	cmp	r3, r4
 8005b48:	d90b      	bls.n	8005b62 <_free_r+0x4e>
 8005b4a:	6821      	ldr	r1, [r4, #0]
 8005b4c:	1862      	adds	r2, r4, r1
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	bf04      	itt	eq
 8005b52:	681a      	ldreq	r2, [r3, #0]
 8005b54:	685b      	ldreq	r3, [r3, #4]
 8005b56:	6063      	str	r3, [r4, #4]
 8005b58:	bf04      	itt	eq
 8005b5a:	1852      	addeq	r2, r2, r1
 8005b5c:	6022      	streq	r2, [r4, #0]
 8005b5e:	602c      	str	r4, [r5, #0]
 8005b60:	e7ec      	b.n	8005b3c <_free_r+0x28>
 8005b62:	461a      	mov	r2, r3
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	b10b      	cbz	r3, 8005b6c <_free_r+0x58>
 8005b68:	42a3      	cmp	r3, r4
 8005b6a:	d9fa      	bls.n	8005b62 <_free_r+0x4e>
 8005b6c:	6811      	ldr	r1, [r2, #0]
 8005b6e:	1855      	adds	r5, r2, r1
 8005b70:	42a5      	cmp	r5, r4
 8005b72:	d10b      	bne.n	8005b8c <_free_r+0x78>
 8005b74:	6824      	ldr	r4, [r4, #0]
 8005b76:	4421      	add	r1, r4
 8005b78:	1854      	adds	r4, r2, r1
 8005b7a:	42a3      	cmp	r3, r4
 8005b7c:	6011      	str	r1, [r2, #0]
 8005b7e:	d1dd      	bne.n	8005b3c <_free_r+0x28>
 8005b80:	681c      	ldr	r4, [r3, #0]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	6053      	str	r3, [r2, #4]
 8005b86:	4421      	add	r1, r4
 8005b88:	6011      	str	r1, [r2, #0]
 8005b8a:	e7d7      	b.n	8005b3c <_free_r+0x28>
 8005b8c:	d902      	bls.n	8005b94 <_free_r+0x80>
 8005b8e:	230c      	movs	r3, #12
 8005b90:	6003      	str	r3, [r0, #0]
 8005b92:	e7d3      	b.n	8005b3c <_free_r+0x28>
 8005b94:	6825      	ldr	r5, [r4, #0]
 8005b96:	1961      	adds	r1, r4, r5
 8005b98:	428b      	cmp	r3, r1
 8005b9a:	bf04      	itt	eq
 8005b9c:	6819      	ldreq	r1, [r3, #0]
 8005b9e:	685b      	ldreq	r3, [r3, #4]
 8005ba0:	6063      	str	r3, [r4, #4]
 8005ba2:	bf04      	itt	eq
 8005ba4:	1949      	addeq	r1, r1, r5
 8005ba6:	6021      	streq	r1, [r4, #0]
 8005ba8:	6054      	str	r4, [r2, #4]
 8005baa:	e7c7      	b.n	8005b3c <_free_r+0x28>
 8005bac:	b003      	add	sp, #12
 8005bae:	bd30      	pop	{r4, r5, pc}
 8005bb0:	20000094 	.word	0x20000094

08005bb4 <_malloc_r>:
 8005bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bb6:	1ccd      	adds	r5, r1, #3
 8005bb8:	f025 0503 	bic.w	r5, r5, #3
 8005bbc:	3508      	adds	r5, #8
 8005bbe:	2d0c      	cmp	r5, #12
 8005bc0:	bf38      	it	cc
 8005bc2:	250c      	movcc	r5, #12
 8005bc4:	2d00      	cmp	r5, #0
 8005bc6:	4606      	mov	r6, r0
 8005bc8:	db01      	blt.n	8005bce <_malloc_r+0x1a>
 8005bca:	42a9      	cmp	r1, r5
 8005bcc:	d903      	bls.n	8005bd6 <_malloc_r+0x22>
 8005bce:	230c      	movs	r3, #12
 8005bd0:	6033      	str	r3, [r6, #0]
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bd6:	f000 f8c1 	bl	8005d5c <__malloc_lock>
 8005bda:	4921      	ldr	r1, [pc, #132]	; (8005c60 <_malloc_r+0xac>)
 8005bdc:	680a      	ldr	r2, [r1, #0]
 8005bde:	4614      	mov	r4, r2
 8005be0:	b99c      	cbnz	r4, 8005c0a <_malloc_r+0x56>
 8005be2:	4f20      	ldr	r7, [pc, #128]	; (8005c64 <_malloc_r+0xb0>)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	b923      	cbnz	r3, 8005bf2 <_malloc_r+0x3e>
 8005be8:	4621      	mov	r1, r4
 8005bea:	4630      	mov	r0, r6
 8005bec:	f000 f83c 	bl	8005c68 <_sbrk_r>
 8005bf0:	6038      	str	r0, [r7, #0]
 8005bf2:	4629      	mov	r1, r5
 8005bf4:	4630      	mov	r0, r6
 8005bf6:	f000 f837 	bl	8005c68 <_sbrk_r>
 8005bfa:	1c43      	adds	r3, r0, #1
 8005bfc:	d123      	bne.n	8005c46 <_malloc_r+0x92>
 8005bfe:	230c      	movs	r3, #12
 8005c00:	6033      	str	r3, [r6, #0]
 8005c02:	4630      	mov	r0, r6
 8005c04:	f000 f8b0 	bl	8005d68 <__malloc_unlock>
 8005c08:	e7e3      	b.n	8005bd2 <_malloc_r+0x1e>
 8005c0a:	6823      	ldr	r3, [r4, #0]
 8005c0c:	1b5b      	subs	r3, r3, r5
 8005c0e:	d417      	bmi.n	8005c40 <_malloc_r+0x8c>
 8005c10:	2b0b      	cmp	r3, #11
 8005c12:	d903      	bls.n	8005c1c <_malloc_r+0x68>
 8005c14:	6023      	str	r3, [r4, #0]
 8005c16:	441c      	add	r4, r3
 8005c18:	6025      	str	r5, [r4, #0]
 8005c1a:	e004      	b.n	8005c26 <_malloc_r+0x72>
 8005c1c:	6863      	ldr	r3, [r4, #4]
 8005c1e:	42a2      	cmp	r2, r4
 8005c20:	bf0c      	ite	eq
 8005c22:	600b      	streq	r3, [r1, #0]
 8005c24:	6053      	strne	r3, [r2, #4]
 8005c26:	4630      	mov	r0, r6
 8005c28:	f000 f89e 	bl	8005d68 <__malloc_unlock>
 8005c2c:	f104 000b 	add.w	r0, r4, #11
 8005c30:	1d23      	adds	r3, r4, #4
 8005c32:	f020 0007 	bic.w	r0, r0, #7
 8005c36:	1ac2      	subs	r2, r0, r3
 8005c38:	d0cc      	beq.n	8005bd4 <_malloc_r+0x20>
 8005c3a:	1a1b      	subs	r3, r3, r0
 8005c3c:	50a3      	str	r3, [r4, r2]
 8005c3e:	e7c9      	b.n	8005bd4 <_malloc_r+0x20>
 8005c40:	4622      	mov	r2, r4
 8005c42:	6864      	ldr	r4, [r4, #4]
 8005c44:	e7cc      	b.n	8005be0 <_malloc_r+0x2c>
 8005c46:	1cc4      	adds	r4, r0, #3
 8005c48:	f024 0403 	bic.w	r4, r4, #3
 8005c4c:	42a0      	cmp	r0, r4
 8005c4e:	d0e3      	beq.n	8005c18 <_malloc_r+0x64>
 8005c50:	1a21      	subs	r1, r4, r0
 8005c52:	4630      	mov	r0, r6
 8005c54:	f000 f808 	bl	8005c68 <_sbrk_r>
 8005c58:	3001      	adds	r0, #1
 8005c5a:	d1dd      	bne.n	8005c18 <_malloc_r+0x64>
 8005c5c:	e7cf      	b.n	8005bfe <_malloc_r+0x4a>
 8005c5e:	bf00      	nop
 8005c60:	20000094 	.word	0x20000094
 8005c64:	20000098 	.word	0x20000098

08005c68 <_sbrk_r>:
 8005c68:	b538      	push	{r3, r4, r5, lr}
 8005c6a:	4d06      	ldr	r5, [pc, #24]	; (8005c84 <_sbrk_r+0x1c>)
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	4604      	mov	r4, r0
 8005c70:	4608      	mov	r0, r1
 8005c72:	602b      	str	r3, [r5, #0]
 8005c74:	f7fc fe28 	bl	80028c8 <_sbrk>
 8005c78:	1c43      	adds	r3, r0, #1
 8005c7a:	d102      	bne.n	8005c82 <_sbrk_r+0x1a>
 8005c7c:	682b      	ldr	r3, [r5, #0]
 8005c7e:	b103      	cbz	r3, 8005c82 <_sbrk_r+0x1a>
 8005c80:	6023      	str	r3, [r4, #0]
 8005c82:	bd38      	pop	{r3, r4, r5, pc}
 8005c84:	2000018c 	.word	0x2000018c

08005c88 <siprintf>:
 8005c88:	b40e      	push	{r1, r2, r3}
 8005c8a:	b500      	push	{lr}
 8005c8c:	b09c      	sub	sp, #112	; 0x70
 8005c8e:	ab1d      	add	r3, sp, #116	; 0x74
 8005c90:	9002      	str	r0, [sp, #8]
 8005c92:	9006      	str	r0, [sp, #24]
 8005c94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c98:	4809      	ldr	r0, [pc, #36]	; (8005cc0 <siprintf+0x38>)
 8005c9a:	9107      	str	r1, [sp, #28]
 8005c9c:	9104      	str	r1, [sp, #16]
 8005c9e:	4909      	ldr	r1, [pc, #36]	; (8005cc4 <siprintf+0x3c>)
 8005ca0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ca4:	9105      	str	r1, [sp, #20]
 8005ca6:	6800      	ldr	r0, [r0, #0]
 8005ca8:	9301      	str	r3, [sp, #4]
 8005caa:	a902      	add	r1, sp, #8
 8005cac:	f000 f8be 	bl	8005e2c <_svfiprintf_r>
 8005cb0:	9b02      	ldr	r3, [sp, #8]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	701a      	strb	r2, [r3, #0]
 8005cb6:	b01c      	add	sp, #112	; 0x70
 8005cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cbc:	b003      	add	sp, #12
 8005cbe:	4770      	bx	lr
 8005cc0:	2000000c 	.word	0x2000000c
 8005cc4:	ffff0208 	.word	0xffff0208

08005cc8 <strcpy>:
 8005cc8:	4603      	mov	r3, r0
 8005cca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005cce:	f803 2b01 	strb.w	r2, [r3], #1
 8005cd2:	2a00      	cmp	r2, #0
 8005cd4:	d1f9      	bne.n	8005cca <strcpy+0x2>
 8005cd6:	4770      	bx	lr

08005cd8 <__utoa>:
 8005cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cda:	4c1f      	ldr	r4, [pc, #124]	; (8005d58 <__utoa+0x80>)
 8005cdc:	b08b      	sub	sp, #44	; 0x2c
 8005cde:	4605      	mov	r5, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	466e      	mov	r6, sp
 8005ce4:	f104 0c20 	add.w	ip, r4, #32
 8005ce8:	6820      	ldr	r0, [r4, #0]
 8005cea:	6861      	ldr	r1, [r4, #4]
 8005cec:	4637      	mov	r7, r6
 8005cee:	c703      	stmia	r7!, {r0, r1}
 8005cf0:	3408      	adds	r4, #8
 8005cf2:	4564      	cmp	r4, ip
 8005cf4:	463e      	mov	r6, r7
 8005cf6:	d1f7      	bne.n	8005ce8 <__utoa+0x10>
 8005cf8:	7921      	ldrb	r1, [r4, #4]
 8005cfa:	7139      	strb	r1, [r7, #4]
 8005cfc:	1e91      	subs	r1, r2, #2
 8005cfe:	6820      	ldr	r0, [r4, #0]
 8005d00:	6038      	str	r0, [r7, #0]
 8005d02:	2922      	cmp	r1, #34	; 0x22
 8005d04:	f04f 0100 	mov.w	r1, #0
 8005d08:	d904      	bls.n	8005d14 <__utoa+0x3c>
 8005d0a:	7019      	strb	r1, [r3, #0]
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	4618      	mov	r0, r3
 8005d10:	b00b      	add	sp, #44	; 0x2c
 8005d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d14:	1e58      	subs	r0, r3, #1
 8005d16:	4684      	mov	ip, r0
 8005d18:	fbb5 f7f2 	udiv	r7, r5, r2
 8005d1c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8005d20:	fb02 5617 	mls	r6, r2, r7, r5
 8005d24:	4476      	add	r6, lr
 8005d26:	460c      	mov	r4, r1
 8005d28:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005d2c:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005d30:	462e      	mov	r6, r5
 8005d32:	42b2      	cmp	r2, r6
 8005d34:	f101 0101 	add.w	r1, r1, #1
 8005d38:	463d      	mov	r5, r7
 8005d3a:	d9ed      	bls.n	8005d18 <__utoa+0x40>
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	545a      	strb	r2, [r3, r1]
 8005d40:	1919      	adds	r1, r3, r4
 8005d42:	1aa5      	subs	r5, r4, r2
 8005d44:	42aa      	cmp	r2, r5
 8005d46:	dae2      	bge.n	8005d0e <__utoa+0x36>
 8005d48:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005d4c:	780e      	ldrb	r6, [r1, #0]
 8005d4e:	7006      	strb	r6, [r0, #0]
 8005d50:	3201      	adds	r2, #1
 8005d52:	f801 5901 	strb.w	r5, [r1], #-1
 8005d56:	e7f4      	b.n	8005d42 <__utoa+0x6a>
 8005d58:	080064cc 	.word	0x080064cc

08005d5c <__malloc_lock>:
 8005d5c:	4801      	ldr	r0, [pc, #4]	; (8005d64 <__malloc_lock+0x8>)
 8005d5e:	f000 baf9 	b.w	8006354 <__retarget_lock_acquire_recursive>
 8005d62:	bf00      	nop
 8005d64:	20000194 	.word	0x20000194

08005d68 <__malloc_unlock>:
 8005d68:	4801      	ldr	r0, [pc, #4]	; (8005d70 <__malloc_unlock+0x8>)
 8005d6a:	f000 baf4 	b.w	8006356 <__retarget_lock_release_recursive>
 8005d6e:	bf00      	nop
 8005d70:	20000194 	.word	0x20000194

08005d74 <__ssputs_r>:
 8005d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d78:	688e      	ldr	r6, [r1, #8]
 8005d7a:	429e      	cmp	r6, r3
 8005d7c:	4682      	mov	sl, r0
 8005d7e:	460c      	mov	r4, r1
 8005d80:	4690      	mov	r8, r2
 8005d82:	461f      	mov	r7, r3
 8005d84:	d838      	bhi.n	8005df8 <__ssputs_r+0x84>
 8005d86:	898a      	ldrh	r2, [r1, #12]
 8005d88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d8c:	d032      	beq.n	8005df4 <__ssputs_r+0x80>
 8005d8e:	6825      	ldr	r5, [r4, #0]
 8005d90:	6909      	ldr	r1, [r1, #16]
 8005d92:	eba5 0901 	sub.w	r9, r5, r1
 8005d96:	6965      	ldr	r5, [r4, #20]
 8005d98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005da0:	3301      	adds	r3, #1
 8005da2:	444b      	add	r3, r9
 8005da4:	106d      	asrs	r5, r5, #1
 8005da6:	429d      	cmp	r5, r3
 8005da8:	bf38      	it	cc
 8005daa:	461d      	movcc	r5, r3
 8005dac:	0553      	lsls	r3, r2, #21
 8005dae:	d531      	bpl.n	8005e14 <__ssputs_r+0xa0>
 8005db0:	4629      	mov	r1, r5
 8005db2:	f7ff feff 	bl	8005bb4 <_malloc_r>
 8005db6:	4606      	mov	r6, r0
 8005db8:	b950      	cbnz	r0, 8005dd0 <__ssputs_r+0x5c>
 8005dba:	230c      	movs	r3, #12
 8005dbc:	f8ca 3000 	str.w	r3, [sl]
 8005dc0:	89a3      	ldrh	r3, [r4, #12]
 8005dc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dc6:	81a3      	strh	r3, [r4, #12]
 8005dc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd0:	6921      	ldr	r1, [r4, #16]
 8005dd2:	464a      	mov	r2, r9
 8005dd4:	f000 fac0 	bl	8006358 <memcpy>
 8005dd8:	89a3      	ldrh	r3, [r4, #12]
 8005dda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005dde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005de2:	81a3      	strh	r3, [r4, #12]
 8005de4:	6126      	str	r6, [r4, #16]
 8005de6:	6165      	str	r5, [r4, #20]
 8005de8:	444e      	add	r6, r9
 8005dea:	eba5 0509 	sub.w	r5, r5, r9
 8005dee:	6026      	str	r6, [r4, #0]
 8005df0:	60a5      	str	r5, [r4, #8]
 8005df2:	463e      	mov	r6, r7
 8005df4:	42be      	cmp	r6, r7
 8005df6:	d900      	bls.n	8005dfa <__ssputs_r+0x86>
 8005df8:	463e      	mov	r6, r7
 8005dfa:	4632      	mov	r2, r6
 8005dfc:	6820      	ldr	r0, [r4, #0]
 8005dfe:	4641      	mov	r1, r8
 8005e00:	f000 fab8 	bl	8006374 <memmove>
 8005e04:	68a3      	ldr	r3, [r4, #8]
 8005e06:	6822      	ldr	r2, [r4, #0]
 8005e08:	1b9b      	subs	r3, r3, r6
 8005e0a:	4432      	add	r2, r6
 8005e0c:	60a3      	str	r3, [r4, #8]
 8005e0e:	6022      	str	r2, [r4, #0]
 8005e10:	2000      	movs	r0, #0
 8005e12:	e7db      	b.n	8005dcc <__ssputs_r+0x58>
 8005e14:	462a      	mov	r2, r5
 8005e16:	f000 fac7 	bl	80063a8 <_realloc_r>
 8005e1a:	4606      	mov	r6, r0
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	d1e1      	bne.n	8005de4 <__ssputs_r+0x70>
 8005e20:	6921      	ldr	r1, [r4, #16]
 8005e22:	4650      	mov	r0, sl
 8005e24:	f7ff fe76 	bl	8005b14 <_free_r>
 8005e28:	e7c7      	b.n	8005dba <__ssputs_r+0x46>
	...

08005e2c <_svfiprintf_r>:
 8005e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e30:	4698      	mov	r8, r3
 8005e32:	898b      	ldrh	r3, [r1, #12]
 8005e34:	061b      	lsls	r3, r3, #24
 8005e36:	b09d      	sub	sp, #116	; 0x74
 8005e38:	4607      	mov	r7, r0
 8005e3a:	460d      	mov	r5, r1
 8005e3c:	4614      	mov	r4, r2
 8005e3e:	d50e      	bpl.n	8005e5e <_svfiprintf_r+0x32>
 8005e40:	690b      	ldr	r3, [r1, #16]
 8005e42:	b963      	cbnz	r3, 8005e5e <_svfiprintf_r+0x32>
 8005e44:	2140      	movs	r1, #64	; 0x40
 8005e46:	f7ff feb5 	bl	8005bb4 <_malloc_r>
 8005e4a:	6028      	str	r0, [r5, #0]
 8005e4c:	6128      	str	r0, [r5, #16]
 8005e4e:	b920      	cbnz	r0, 8005e5a <_svfiprintf_r+0x2e>
 8005e50:	230c      	movs	r3, #12
 8005e52:	603b      	str	r3, [r7, #0]
 8005e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e58:	e0d1      	b.n	8005ffe <_svfiprintf_r+0x1d2>
 8005e5a:	2340      	movs	r3, #64	; 0x40
 8005e5c:	616b      	str	r3, [r5, #20]
 8005e5e:	2300      	movs	r3, #0
 8005e60:	9309      	str	r3, [sp, #36]	; 0x24
 8005e62:	2320      	movs	r3, #32
 8005e64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e68:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e6c:	2330      	movs	r3, #48	; 0x30
 8005e6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006018 <_svfiprintf_r+0x1ec>
 8005e72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e76:	f04f 0901 	mov.w	r9, #1
 8005e7a:	4623      	mov	r3, r4
 8005e7c:	469a      	mov	sl, r3
 8005e7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e82:	b10a      	cbz	r2, 8005e88 <_svfiprintf_r+0x5c>
 8005e84:	2a25      	cmp	r2, #37	; 0x25
 8005e86:	d1f9      	bne.n	8005e7c <_svfiprintf_r+0x50>
 8005e88:	ebba 0b04 	subs.w	fp, sl, r4
 8005e8c:	d00b      	beq.n	8005ea6 <_svfiprintf_r+0x7a>
 8005e8e:	465b      	mov	r3, fp
 8005e90:	4622      	mov	r2, r4
 8005e92:	4629      	mov	r1, r5
 8005e94:	4638      	mov	r0, r7
 8005e96:	f7ff ff6d 	bl	8005d74 <__ssputs_r>
 8005e9a:	3001      	adds	r0, #1
 8005e9c:	f000 80aa 	beq.w	8005ff4 <_svfiprintf_r+0x1c8>
 8005ea0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ea2:	445a      	add	r2, fp
 8005ea4:	9209      	str	r2, [sp, #36]	; 0x24
 8005ea6:	f89a 3000 	ldrb.w	r3, [sl]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 80a2 	beq.w	8005ff4 <_svfiprintf_r+0x1c8>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005eb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005eba:	f10a 0a01 	add.w	sl, sl, #1
 8005ebe:	9304      	str	r3, [sp, #16]
 8005ec0:	9307      	str	r3, [sp, #28]
 8005ec2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ec6:	931a      	str	r3, [sp, #104]	; 0x68
 8005ec8:	4654      	mov	r4, sl
 8005eca:	2205      	movs	r2, #5
 8005ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ed0:	4851      	ldr	r0, [pc, #324]	; (8006018 <_svfiprintf_r+0x1ec>)
 8005ed2:	f7fa f9a5 	bl	8000220 <memchr>
 8005ed6:	9a04      	ldr	r2, [sp, #16]
 8005ed8:	b9d8      	cbnz	r0, 8005f12 <_svfiprintf_r+0xe6>
 8005eda:	06d0      	lsls	r0, r2, #27
 8005edc:	bf44      	itt	mi
 8005ede:	2320      	movmi	r3, #32
 8005ee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ee4:	0711      	lsls	r1, r2, #28
 8005ee6:	bf44      	itt	mi
 8005ee8:	232b      	movmi	r3, #43	; 0x2b
 8005eea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005eee:	f89a 3000 	ldrb.w	r3, [sl]
 8005ef2:	2b2a      	cmp	r3, #42	; 0x2a
 8005ef4:	d015      	beq.n	8005f22 <_svfiprintf_r+0xf6>
 8005ef6:	9a07      	ldr	r2, [sp, #28]
 8005ef8:	4654      	mov	r4, sl
 8005efa:	2000      	movs	r0, #0
 8005efc:	f04f 0c0a 	mov.w	ip, #10
 8005f00:	4621      	mov	r1, r4
 8005f02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f06:	3b30      	subs	r3, #48	; 0x30
 8005f08:	2b09      	cmp	r3, #9
 8005f0a:	d94e      	bls.n	8005faa <_svfiprintf_r+0x17e>
 8005f0c:	b1b0      	cbz	r0, 8005f3c <_svfiprintf_r+0x110>
 8005f0e:	9207      	str	r2, [sp, #28]
 8005f10:	e014      	b.n	8005f3c <_svfiprintf_r+0x110>
 8005f12:	eba0 0308 	sub.w	r3, r0, r8
 8005f16:	fa09 f303 	lsl.w	r3, r9, r3
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	9304      	str	r3, [sp, #16]
 8005f1e:	46a2      	mov	sl, r4
 8005f20:	e7d2      	b.n	8005ec8 <_svfiprintf_r+0x9c>
 8005f22:	9b03      	ldr	r3, [sp, #12]
 8005f24:	1d19      	adds	r1, r3, #4
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	9103      	str	r1, [sp, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	bfbb      	ittet	lt
 8005f2e:	425b      	neglt	r3, r3
 8005f30:	f042 0202 	orrlt.w	r2, r2, #2
 8005f34:	9307      	strge	r3, [sp, #28]
 8005f36:	9307      	strlt	r3, [sp, #28]
 8005f38:	bfb8      	it	lt
 8005f3a:	9204      	strlt	r2, [sp, #16]
 8005f3c:	7823      	ldrb	r3, [r4, #0]
 8005f3e:	2b2e      	cmp	r3, #46	; 0x2e
 8005f40:	d10c      	bne.n	8005f5c <_svfiprintf_r+0x130>
 8005f42:	7863      	ldrb	r3, [r4, #1]
 8005f44:	2b2a      	cmp	r3, #42	; 0x2a
 8005f46:	d135      	bne.n	8005fb4 <_svfiprintf_r+0x188>
 8005f48:	9b03      	ldr	r3, [sp, #12]
 8005f4a:	1d1a      	adds	r2, r3, #4
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	9203      	str	r2, [sp, #12]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	bfb8      	it	lt
 8005f54:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005f58:	3402      	adds	r4, #2
 8005f5a:	9305      	str	r3, [sp, #20]
 8005f5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006028 <_svfiprintf_r+0x1fc>
 8005f60:	7821      	ldrb	r1, [r4, #0]
 8005f62:	2203      	movs	r2, #3
 8005f64:	4650      	mov	r0, sl
 8005f66:	f7fa f95b 	bl	8000220 <memchr>
 8005f6a:	b140      	cbz	r0, 8005f7e <_svfiprintf_r+0x152>
 8005f6c:	2340      	movs	r3, #64	; 0x40
 8005f6e:	eba0 000a 	sub.w	r0, r0, sl
 8005f72:	fa03 f000 	lsl.w	r0, r3, r0
 8005f76:	9b04      	ldr	r3, [sp, #16]
 8005f78:	4303      	orrs	r3, r0
 8005f7a:	3401      	adds	r4, #1
 8005f7c:	9304      	str	r3, [sp, #16]
 8005f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f82:	4826      	ldr	r0, [pc, #152]	; (800601c <_svfiprintf_r+0x1f0>)
 8005f84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f88:	2206      	movs	r2, #6
 8005f8a:	f7fa f949 	bl	8000220 <memchr>
 8005f8e:	2800      	cmp	r0, #0
 8005f90:	d038      	beq.n	8006004 <_svfiprintf_r+0x1d8>
 8005f92:	4b23      	ldr	r3, [pc, #140]	; (8006020 <_svfiprintf_r+0x1f4>)
 8005f94:	bb1b      	cbnz	r3, 8005fde <_svfiprintf_r+0x1b2>
 8005f96:	9b03      	ldr	r3, [sp, #12]
 8005f98:	3307      	adds	r3, #7
 8005f9a:	f023 0307 	bic.w	r3, r3, #7
 8005f9e:	3308      	adds	r3, #8
 8005fa0:	9303      	str	r3, [sp, #12]
 8005fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fa4:	4433      	add	r3, r6
 8005fa6:	9309      	str	r3, [sp, #36]	; 0x24
 8005fa8:	e767      	b.n	8005e7a <_svfiprintf_r+0x4e>
 8005faa:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fae:	460c      	mov	r4, r1
 8005fb0:	2001      	movs	r0, #1
 8005fb2:	e7a5      	b.n	8005f00 <_svfiprintf_r+0xd4>
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	3401      	adds	r4, #1
 8005fb8:	9305      	str	r3, [sp, #20]
 8005fba:	4619      	mov	r1, r3
 8005fbc:	f04f 0c0a 	mov.w	ip, #10
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fc6:	3a30      	subs	r2, #48	; 0x30
 8005fc8:	2a09      	cmp	r2, #9
 8005fca:	d903      	bls.n	8005fd4 <_svfiprintf_r+0x1a8>
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d0c5      	beq.n	8005f5c <_svfiprintf_r+0x130>
 8005fd0:	9105      	str	r1, [sp, #20]
 8005fd2:	e7c3      	b.n	8005f5c <_svfiprintf_r+0x130>
 8005fd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fd8:	4604      	mov	r4, r0
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e7f0      	b.n	8005fc0 <_svfiprintf_r+0x194>
 8005fde:	ab03      	add	r3, sp, #12
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	462a      	mov	r2, r5
 8005fe4:	4b0f      	ldr	r3, [pc, #60]	; (8006024 <_svfiprintf_r+0x1f8>)
 8005fe6:	a904      	add	r1, sp, #16
 8005fe8:	4638      	mov	r0, r7
 8005fea:	f3af 8000 	nop.w
 8005fee:	1c42      	adds	r2, r0, #1
 8005ff0:	4606      	mov	r6, r0
 8005ff2:	d1d6      	bne.n	8005fa2 <_svfiprintf_r+0x176>
 8005ff4:	89ab      	ldrh	r3, [r5, #12]
 8005ff6:	065b      	lsls	r3, r3, #25
 8005ff8:	f53f af2c 	bmi.w	8005e54 <_svfiprintf_r+0x28>
 8005ffc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ffe:	b01d      	add	sp, #116	; 0x74
 8006000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006004:	ab03      	add	r3, sp, #12
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	462a      	mov	r2, r5
 800600a:	4b06      	ldr	r3, [pc, #24]	; (8006024 <_svfiprintf_r+0x1f8>)
 800600c:	a904      	add	r1, sp, #16
 800600e:	4638      	mov	r0, r7
 8006010:	f000 f87a 	bl	8006108 <_printf_i>
 8006014:	e7eb      	b.n	8005fee <_svfiprintf_r+0x1c2>
 8006016:	bf00      	nop
 8006018:	080064f1 	.word	0x080064f1
 800601c:	080064fb 	.word	0x080064fb
 8006020:	00000000 	.word	0x00000000
 8006024:	08005d75 	.word	0x08005d75
 8006028:	080064f7 	.word	0x080064f7

0800602c <_printf_common>:
 800602c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006030:	4616      	mov	r6, r2
 8006032:	4699      	mov	r9, r3
 8006034:	688a      	ldr	r2, [r1, #8]
 8006036:	690b      	ldr	r3, [r1, #16]
 8006038:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800603c:	4293      	cmp	r3, r2
 800603e:	bfb8      	it	lt
 8006040:	4613      	movlt	r3, r2
 8006042:	6033      	str	r3, [r6, #0]
 8006044:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006048:	4607      	mov	r7, r0
 800604a:	460c      	mov	r4, r1
 800604c:	b10a      	cbz	r2, 8006052 <_printf_common+0x26>
 800604e:	3301      	adds	r3, #1
 8006050:	6033      	str	r3, [r6, #0]
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	0699      	lsls	r1, r3, #26
 8006056:	bf42      	ittt	mi
 8006058:	6833      	ldrmi	r3, [r6, #0]
 800605a:	3302      	addmi	r3, #2
 800605c:	6033      	strmi	r3, [r6, #0]
 800605e:	6825      	ldr	r5, [r4, #0]
 8006060:	f015 0506 	ands.w	r5, r5, #6
 8006064:	d106      	bne.n	8006074 <_printf_common+0x48>
 8006066:	f104 0a19 	add.w	sl, r4, #25
 800606a:	68e3      	ldr	r3, [r4, #12]
 800606c:	6832      	ldr	r2, [r6, #0]
 800606e:	1a9b      	subs	r3, r3, r2
 8006070:	42ab      	cmp	r3, r5
 8006072:	dc26      	bgt.n	80060c2 <_printf_common+0x96>
 8006074:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006078:	1e13      	subs	r3, r2, #0
 800607a:	6822      	ldr	r2, [r4, #0]
 800607c:	bf18      	it	ne
 800607e:	2301      	movne	r3, #1
 8006080:	0692      	lsls	r2, r2, #26
 8006082:	d42b      	bmi.n	80060dc <_printf_common+0xb0>
 8006084:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006088:	4649      	mov	r1, r9
 800608a:	4638      	mov	r0, r7
 800608c:	47c0      	blx	r8
 800608e:	3001      	adds	r0, #1
 8006090:	d01e      	beq.n	80060d0 <_printf_common+0xa4>
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	68e5      	ldr	r5, [r4, #12]
 8006096:	6832      	ldr	r2, [r6, #0]
 8006098:	f003 0306 	and.w	r3, r3, #6
 800609c:	2b04      	cmp	r3, #4
 800609e:	bf08      	it	eq
 80060a0:	1aad      	subeq	r5, r5, r2
 80060a2:	68a3      	ldr	r3, [r4, #8]
 80060a4:	6922      	ldr	r2, [r4, #16]
 80060a6:	bf0c      	ite	eq
 80060a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060ac:	2500      	movne	r5, #0
 80060ae:	4293      	cmp	r3, r2
 80060b0:	bfc4      	itt	gt
 80060b2:	1a9b      	subgt	r3, r3, r2
 80060b4:	18ed      	addgt	r5, r5, r3
 80060b6:	2600      	movs	r6, #0
 80060b8:	341a      	adds	r4, #26
 80060ba:	42b5      	cmp	r5, r6
 80060bc:	d11a      	bne.n	80060f4 <_printf_common+0xc8>
 80060be:	2000      	movs	r0, #0
 80060c0:	e008      	b.n	80060d4 <_printf_common+0xa8>
 80060c2:	2301      	movs	r3, #1
 80060c4:	4652      	mov	r2, sl
 80060c6:	4649      	mov	r1, r9
 80060c8:	4638      	mov	r0, r7
 80060ca:	47c0      	blx	r8
 80060cc:	3001      	adds	r0, #1
 80060ce:	d103      	bne.n	80060d8 <_printf_common+0xac>
 80060d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060d8:	3501      	adds	r5, #1
 80060da:	e7c6      	b.n	800606a <_printf_common+0x3e>
 80060dc:	18e1      	adds	r1, r4, r3
 80060de:	1c5a      	adds	r2, r3, #1
 80060e0:	2030      	movs	r0, #48	; 0x30
 80060e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060e6:	4422      	add	r2, r4
 80060e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060f0:	3302      	adds	r3, #2
 80060f2:	e7c7      	b.n	8006084 <_printf_common+0x58>
 80060f4:	2301      	movs	r3, #1
 80060f6:	4622      	mov	r2, r4
 80060f8:	4649      	mov	r1, r9
 80060fa:	4638      	mov	r0, r7
 80060fc:	47c0      	blx	r8
 80060fe:	3001      	adds	r0, #1
 8006100:	d0e6      	beq.n	80060d0 <_printf_common+0xa4>
 8006102:	3601      	adds	r6, #1
 8006104:	e7d9      	b.n	80060ba <_printf_common+0x8e>
	...

08006108 <_printf_i>:
 8006108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800610c:	460c      	mov	r4, r1
 800610e:	4691      	mov	r9, r2
 8006110:	7e27      	ldrb	r7, [r4, #24]
 8006112:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006114:	2f78      	cmp	r7, #120	; 0x78
 8006116:	4680      	mov	r8, r0
 8006118:	469a      	mov	sl, r3
 800611a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800611e:	d807      	bhi.n	8006130 <_printf_i+0x28>
 8006120:	2f62      	cmp	r7, #98	; 0x62
 8006122:	d80a      	bhi.n	800613a <_printf_i+0x32>
 8006124:	2f00      	cmp	r7, #0
 8006126:	f000 80d8 	beq.w	80062da <_printf_i+0x1d2>
 800612a:	2f58      	cmp	r7, #88	; 0x58
 800612c:	f000 80a3 	beq.w	8006276 <_printf_i+0x16e>
 8006130:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006134:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006138:	e03a      	b.n	80061b0 <_printf_i+0xa8>
 800613a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800613e:	2b15      	cmp	r3, #21
 8006140:	d8f6      	bhi.n	8006130 <_printf_i+0x28>
 8006142:	a001      	add	r0, pc, #4	; (adr r0, 8006148 <_printf_i+0x40>)
 8006144:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006148:	080061a1 	.word	0x080061a1
 800614c:	080061b5 	.word	0x080061b5
 8006150:	08006131 	.word	0x08006131
 8006154:	08006131 	.word	0x08006131
 8006158:	08006131 	.word	0x08006131
 800615c:	08006131 	.word	0x08006131
 8006160:	080061b5 	.word	0x080061b5
 8006164:	08006131 	.word	0x08006131
 8006168:	08006131 	.word	0x08006131
 800616c:	08006131 	.word	0x08006131
 8006170:	08006131 	.word	0x08006131
 8006174:	080062c1 	.word	0x080062c1
 8006178:	080061e5 	.word	0x080061e5
 800617c:	080062a3 	.word	0x080062a3
 8006180:	08006131 	.word	0x08006131
 8006184:	08006131 	.word	0x08006131
 8006188:	080062e3 	.word	0x080062e3
 800618c:	08006131 	.word	0x08006131
 8006190:	080061e5 	.word	0x080061e5
 8006194:	08006131 	.word	0x08006131
 8006198:	08006131 	.word	0x08006131
 800619c:	080062ab 	.word	0x080062ab
 80061a0:	680b      	ldr	r3, [r1, #0]
 80061a2:	1d1a      	adds	r2, r3, #4
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	600a      	str	r2, [r1, #0]
 80061a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80061ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061b0:	2301      	movs	r3, #1
 80061b2:	e0a3      	b.n	80062fc <_printf_i+0x1f4>
 80061b4:	6825      	ldr	r5, [r4, #0]
 80061b6:	6808      	ldr	r0, [r1, #0]
 80061b8:	062e      	lsls	r6, r5, #24
 80061ba:	f100 0304 	add.w	r3, r0, #4
 80061be:	d50a      	bpl.n	80061d6 <_printf_i+0xce>
 80061c0:	6805      	ldr	r5, [r0, #0]
 80061c2:	600b      	str	r3, [r1, #0]
 80061c4:	2d00      	cmp	r5, #0
 80061c6:	da03      	bge.n	80061d0 <_printf_i+0xc8>
 80061c8:	232d      	movs	r3, #45	; 0x2d
 80061ca:	426d      	negs	r5, r5
 80061cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061d0:	485e      	ldr	r0, [pc, #376]	; (800634c <_printf_i+0x244>)
 80061d2:	230a      	movs	r3, #10
 80061d4:	e019      	b.n	800620a <_printf_i+0x102>
 80061d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80061da:	6805      	ldr	r5, [r0, #0]
 80061dc:	600b      	str	r3, [r1, #0]
 80061de:	bf18      	it	ne
 80061e0:	b22d      	sxthne	r5, r5
 80061e2:	e7ef      	b.n	80061c4 <_printf_i+0xbc>
 80061e4:	680b      	ldr	r3, [r1, #0]
 80061e6:	6825      	ldr	r5, [r4, #0]
 80061e8:	1d18      	adds	r0, r3, #4
 80061ea:	6008      	str	r0, [r1, #0]
 80061ec:	0628      	lsls	r0, r5, #24
 80061ee:	d501      	bpl.n	80061f4 <_printf_i+0xec>
 80061f0:	681d      	ldr	r5, [r3, #0]
 80061f2:	e002      	b.n	80061fa <_printf_i+0xf2>
 80061f4:	0669      	lsls	r1, r5, #25
 80061f6:	d5fb      	bpl.n	80061f0 <_printf_i+0xe8>
 80061f8:	881d      	ldrh	r5, [r3, #0]
 80061fa:	4854      	ldr	r0, [pc, #336]	; (800634c <_printf_i+0x244>)
 80061fc:	2f6f      	cmp	r7, #111	; 0x6f
 80061fe:	bf0c      	ite	eq
 8006200:	2308      	moveq	r3, #8
 8006202:	230a      	movne	r3, #10
 8006204:	2100      	movs	r1, #0
 8006206:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800620a:	6866      	ldr	r6, [r4, #4]
 800620c:	60a6      	str	r6, [r4, #8]
 800620e:	2e00      	cmp	r6, #0
 8006210:	bfa2      	ittt	ge
 8006212:	6821      	ldrge	r1, [r4, #0]
 8006214:	f021 0104 	bicge.w	r1, r1, #4
 8006218:	6021      	strge	r1, [r4, #0]
 800621a:	b90d      	cbnz	r5, 8006220 <_printf_i+0x118>
 800621c:	2e00      	cmp	r6, #0
 800621e:	d04d      	beq.n	80062bc <_printf_i+0x1b4>
 8006220:	4616      	mov	r6, r2
 8006222:	fbb5 f1f3 	udiv	r1, r5, r3
 8006226:	fb03 5711 	mls	r7, r3, r1, r5
 800622a:	5dc7      	ldrb	r7, [r0, r7]
 800622c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006230:	462f      	mov	r7, r5
 8006232:	42bb      	cmp	r3, r7
 8006234:	460d      	mov	r5, r1
 8006236:	d9f4      	bls.n	8006222 <_printf_i+0x11a>
 8006238:	2b08      	cmp	r3, #8
 800623a:	d10b      	bne.n	8006254 <_printf_i+0x14c>
 800623c:	6823      	ldr	r3, [r4, #0]
 800623e:	07df      	lsls	r7, r3, #31
 8006240:	d508      	bpl.n	8006254 <_printf_i+0x14c>
 8006242:	6923      	ldr	r3, [r4, #16]
 8006244:	6861      	ldr	r1, [r4, #4]
 8006246:	4299      	cmp	r1, r3
 8006248:	bfde      	ittt	le
 800624a:	2330      	movle	r3, #48	; 0x30
 800624c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006250:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006254:	1b92      	subs	r2, r2, r6
 8006256:	6122      	str	r2, [r4, #16]
 8006258:	f8cd a000 	str.w	sl, [sp]
 800625c:	464b      	mov	r3, r9
 800625e:	aa03      	add	r2, sp, #12
 8006260:	4621      	mov	r1, r4
 8006262:	4640      	mov	r0, r8
 8006264:	f7ff fee2 	bl	800602c <_printf_common>
 8006268:	3001      	adds	r0, #1
 800626a:	d14c      	bne.n	8006306 <_printf_i+0x1fe>
 800626c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006270:	b004      	add	sp, #16
 8006272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006276:	4835      	ldr	r0, [pc, #212]	; (800634c <_printf_i+0x244>)
 8006278:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800627c:	6823      	ldr	r3, [r4, #0]
 800627e:	680e      	ldr	r6, [r1, #0]
 8006280:	061f      	lsls	r7, r3, #24
 8006282:	f856 5b04 	ldr.w	r5, [r6], #4
 8006286:	600e      	str	r6, [r1, #0]
 8006288:	d514      	bpl.n	80062b4 <_printf_i+0x1ac>
 800628a:	07d9      	lsls	r1, r3, #31
 800628c:	bf44      	itt	mi
 800628e:	f043 0320 	orrmi.w	r3, r3, #32
 8006292:	6023      	strmi	r3, [r4, #0]
 8006294:	b91d      	cbnz	r5, 800629e <_printf_i+0x196>
 8006296:	6823      	ldr	r3, [r4, #0]
 8006298:	f023 0320 	bic.w	r3, r3, #32
 800629c:	6023      	str	r3, [r4, #0]
 800629e:	2310      	movs	r3, #16
 80062a0:	e7b0      	b.n	8006204 <_printf_i+0xfc>
 80062a2:	6823      	ldr	r3, [r4, #0]
 80062a4:	f043 0320 	orr.w	r3, r3, #32
 80062a8:	6023      	str	r3, [r4, #0]
 80062aa:	2378      	movs	r3, #120	; 0x78
 80062ac:	4828      	ldr	r0, [pc, #160]	; (8006350 <_printf_i+0x248>)
 80062ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80062b2:	e7e3      	b.n	800627c <_printf_i+0x174>
 80062b4:	065e      	lsls	r6, r3, #25
 80062b6:	bf48      	it	mi
 80062b8:	b2ad      	uxthmi	r5, r5
 80062ba:	e7e6      	b.n	800628a <_printf_i+0x182>
 80062bc:	4616      	mov	r6, r2
 80062be:	e7bb      	b.n	8006238 <_printf_i+0x130>
 80062c0:	680b      	ldr	r3, [r1, #0]
 80062c2:	6826      	ldr	r6, [r4, #0]
 80062c4:	6960      	ldr	r0, [r4, #20]
 80062c6:	1d1d      	adds	r5, r3, #4
 80062c8:	600d      	str	r5, [r1, #0]
 80062ca:	0635      	lsls	r5, r6, #24
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	d501      	bpl.n	80062d4 <_printf_i+0x1cc>
 80062d0:	6018      	str	r0, [r3, #0]
 80062d2:	e002      	b.n	80062da <_printf_i+0x1d2>
 80062d4:	0671      	lsls	r1, r6, #25
 80062d6:	d5fb      	bpl.n	80062d0 <_printf_i+0x1c8>
 80062d8:	8018      	strh	r0, [r3, #0]
 80062da:	2300      	movs	r3, #0
 80062dc:	6123      	str	r3, [r4, #16]
 80062de:	4616      	mov	r6, r2
 80062e0:	e7ba      	b.n	8006258 <_printf_i+0x150>
 80062e2:	680b      	ldr	r3, [r1, #0]
 80062e4:	1d1a      	adds	r2, r3, #4
 80062e6:	600a      	str	r2, [r1, #0]
 80062e8:	681e      	ldr	r6, [r3, #0]
 80062ea:	6862      	ldr	r2, [r4, #4]
 80062ec:	2100      	movs	r1, #0
 80062ee:	4630      	mov	r0, r6
 80062f0:	f7f9 ff96 	bl	8000220 <memchr>
 80062f4:	b108      	cbz	r0, 80062fa <_printf_i+0x1f2>
 80062f6:	1b80      	subs	r0, r0, r6
 80062f8:	6060      	str	r0, [r4, #4]
 80062fa:	6863      	ldr	r3, [r4, #4]
 80062fc:	6123      	str	r3, [r4, #16]
 80062fe:	2300      	movs	r3, #0
 8006300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006304:	e7a8      	b.n	8006258 <_printf_i+0x150>
 8006306:	6923      	ldr	r3, [r4, #16]
 8006308:	4632      	mov	r2, r6
 800630a:	4649      	mov	r1, r9
 800630c:	4640      	mov	r0, r8
 800630e:	47d0      	blx	sl
 8006310:	3001      	adds	r0, #1
 8006312:	d0ab      	beq.n	800626c <_printf_i+0x164>
 8006314:	6823      	ldr	r3, [r4, #0]
 8006316:	079b      	lsls	r3, r3, #30
 8006318:	d413      	bmi.n	8006342 <_printf_i+0x23a>
 800631a:	68e0      	ldr	r0, [r4, #12]
 800631c:	9b03      	ldr	r3, [sp, #12]
 800631e:	4298      	cmp	r0, r3
 8006320:	bfb8      	it	lt
 8006322:	4618      	movlt	r0, r3
 8006324:	e7a4      	b.n	8006270 <_printf_i+0x168>
 8006326:	2301      	movs	r3, #1
 8006328:	4632      	mov	r2, r6
 800632a:	4649      	mov	r1, r9
 800632c:	4640      	mov	r0, r8
 800632e:	47d0      	blx	sl
 8006330:	3001      	adds	r0, #1
 8006332:	d09b      	beq.n	800626c <_printf_i+0x164>
 8006334:	3501      	adds	r5, #1
 8006336:	68e3      	ldr	r3, [r4, #12]
 8006338:	9903      	ldr	r1, [sp, #12]
 800633a:	1a5b      	subs	r3, r3, r1
 800633c:	42ab      	cmp	r3, r5
 800633e:	dcf2      	bgt.n	8006326 <_printf_i+0x21e>
 8006340:	e7eb      	b.n	800631a <_printf_i+0x212>
 8006342:	2500      	movs	r5, #0
 8006344:	f104 0619 	add.w	r6, r4, #25
 8006348:	e7f5      	b.n	8006336 <_printf_i+0x22e>
 800634a:	bf00      	nop
 800634c:	08006502 	.word	0x08006502
 8006350:	08006513 	.word	0x08006513

08006354 <__retarget_lock_acquire_recursive>:
 8006354:	4770      	bx	lr

08006356 <__retarget_lock_release_recursive>:
 8006356:	4770      	bx	lr

08006358 <memcpy>:
 8006358:	440a      	add	r2, r1
 800635a:	4291      	cmp	r1, r2
 800635c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006360:	d100      	bne.n	8006364 <memcpy+0xc>
 8006362:	4770      	bx	lr
 8006364:	b510      	push	{r4, lr}
 8006366:	f811 4b01 	ldrb.w	r4, [r1], #1
 800636a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800636e:	4291      	cmp	r1, r2
 8006370:	d1f9      	bne.n	8006366 <memcpy+0xe>
 8006372:	bd10      	pop	{r4, pc}

08006374 <memmove>:
 8006374:	4288      	cmp	r0, r1
 8006376:	b510      	push	{r4, lr}
 8006378:	eb01 0402 	add.w	r4, r1, r2
 800637c:	d902      	bls.n	8006384 <memmove+0x10>
 800637e:	4284      	cmp	r4, r0
 8006380:	4623      	mov	r3, r4
 8006382:	d807      	bhi.n	8006394 <memmove+0x20>
 8006384:	1e43      	subs	r3, r0, #1
 8006386:	42a1      	cmp	r1, r4
 8006388:	d008      	beq.n	800639c <memmove+0x28>
 800638a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800638e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006392:	e7f8      	b.n	8006386 <memmove+0x12>
 8006394:	4402      	add	r2, r0
 8006396:	4601      	mov	r1, r0
 8006398:	428a      	cmp	r2, r1
 800639a:	d100      	bne.n	800639e <memmove+0x2a>
 800639c:	bd10      	pop	{r4, pc}
 800639e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063a6:	e7f7      	b.n	8006398 <memmove+0x24>

080063a8 <_realloc_r>:
 80063a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063aa:	4607      	mov	r7, r0
 80063ac:	4614      	mov	r4, r2
 80063ae:	460e      	mov	r6, r1
 80063b0:	b921      	cbnz	r1, 80063bc <_realloc_r+0x14>
 80063b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80063b6:	4611      	mov	r1, r2
 80063b8:	f7ff bbfc 	b.w	8005bb4 <_malloc_r>
 80063bc:	b922      	cbnz	r2, 80063c8 <_realloc_r+0x20>
 80063be:	f7ff fba9 	bl	8005b14 <_free_r>
 80063c2:	4625      	mov	r5, r4
 80063c4:	4628      	mov	r0, r5
 80063c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063c8:	f000 f814 	bl	80063f4 <_malloc_usable_size_r>
 80063cc:	42a0      	cmp	r0, r4
 80063ce:	d20f      	bcs.n	80063f0 <_realloc_r+0x48>
 80063d0:	4621      	mov	r1, r4
 80063d2:	4638      	mov	r0, r7
 80063d4:	f7ff fbee 	bl	8005bb4 <_malloc_r>
 80063d8:	4605      	mov	r5, r0
 80063da:	2800      	cmp	r0, #0
 80063dc:	d0f2      	beq.n	80063c4 <_realloc_r+0x1c>
 80063de:	4631      	mov	r1, r6
 80063e0:	4622      	mov	r2, r4
 80063e2:	f7ff ffb9 	bl	8006358 <memcpy>
 80063e6:	4631      	mov	r1, r6
 80063e8:	4638      	mov	r0, r7
 80063ea:	f7ff fb93 	bl	8005b14 <_free_r>
 80063ee:	e7e9      	b.n	80063c4 <_realloc_r+0x1c>
 80063f0:	4635      	mov	r5, r6
 80063f2:	e7e7      	b.n	80063c4 <_realloc_r+0x1c>

080063f4 <_malloc_usable_size_r>:
 80063f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063f8:	1f18      	subs	r0, r3, #4
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	bfbc      	itt	lt
 80063fe:	580b      	ldrlt	r3, [r1, r0]
 8006400:	18c0      	addlt	r0, r0, r3
 8006402:	4770      	bx	lr

08006404 <_init>:
 8006404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006406:	bf00      	nop
 8006408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800640a:	bc08      	pop	{r3}
 800640c:	469e      	mov	lr, r3
 800640e:	4770      	bx	lr

08006410 <_fini>:
 8006410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006412:	bf00      	nop
 8006414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006416:	bc08      	pop	{r3}
 8006418:	469e      	mov	lr, r3
 800641a:	4770      	bx	lr
